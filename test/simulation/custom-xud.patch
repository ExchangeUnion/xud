diff --git a/lib/Xud.ts b/lib/Xud.ts
index d83880e0..1b95a77a 100644
--- a/lib/Xud.ts
+++ b/lib/Xud.ts
@@ -88,6 +88,11 @@ class Xud extends EventEmitter {
       this.logger.info('config file loaded');
     }
 
+    this.logger.info('CUSTOM-XUD');
+    if (process.env.CUSTOM_SCENARIO) {
+      this.logger.info(`CUSTOM_SCENARIO=${process.env.CUSTOM_SCENARIO}`);
+    }
+
     try {
       if (this.config.instanceid === 0) {
         // if we're not running with multiple instances as indicated by an instance id of 0
diff --git a/lib/swaps/SwapRecovery.ts b/lib/swaps/SwapRecovery.ts
index 3759f6a3..4089dc94 100644
--- a/lib/swaps/SwapRecovery.ts
+++ b/lib/swaps/SwapRecovery.ts
@@ -29,7 +29,18 @@ class SwapRecovery extends EventEmitter {
 
   public beginTimer = () => {
     if (!this.pendingSwapsTimer) {
-      this.pendingSwapsTimer = setInterval(this.checkPendingSwaps, SwapRecovery.PENDING_SWAP_RECHECK_INTERVAL);
+      let interval = SwapRecovery.PENDING_SWAP_RECHECK_INTERVAL;
+      if (process.env.CUSTOM_SCENARIO === 'INSTABILITY::MAKER_CRASH_WHILE_SENDING') {
+        interval = 2000;
+      }
+      if (process.env.CUSTOM_SCENARIO === 'INSTABILITY::MAKER_CRASH_AFTER_SEND_BEFORE_PREIMAGE_RESOLVED') {
+        interval = 2000;
+      }
+      if (process.env.CUSTOM_SCENARIO === 'INSTABILITY::MAKER_CRASH_AFTER_SEND_AFTER_PREIMAGE_RESOLVED') {
+        interval = 2000;
+      }
+
+      this.pendingSwapsTimer = setInterval(this.checkPendingSwaps, interval);
     }
   }
 
diff --git a/lib/swaps/Swaps.ts b/lib/swaps/Swaps.ts
index c6946347..730cf781 100644
--- a/lib/swaps/Swaps.ts
+++ b/lib/swaps/Swaps.ts
@@ -699,6 +699,24 @@ class Swaps extends EventEmitter {
     } else if (deal.state === SwapState.Active) {
       // we check that the deal is still active before we try to settle the invoice
       try {
+        if (rPreimage === '') {
+          this.logger.info('NOT SETTLING INVOICE');
+          return;
+        }
+
+        if (deal && deal.role === SwapRole.Taker && process.env.CUSTOM_SCENARIO === 'INSTABILITY::TAKER_DELAY_BEFORE_SETTLE') {
+          this.logger.info(`CUSTOM_SCENARIO: ${process.env.CUSTOM_SCENARIO}`);
+          await setTimeoutPromise(5000);
+        }
+
+        if (deal && deal.role === SwapRole.Maker && process.env.CUSTOM_SCENARIO === 'INSTABILITY::MAKER_CLIENT_CRASHED_BEFORE_SETTLE') {
+          this.logger.info(`CUSTOM_SCENARIO: ${process.env.CUSTOM_SCENARIO}`);
+          this.logger.info(`CLIENT_TYPE ${process.env.CLIENT_TYPE}, CLIENT_PID: ${process.env.CLIENT_PID}`);
+          process.kill(parseInt(process.env.CLIENT_PID!, 10));
+          await setTimeoutPromise(1000);
+        }
+
+        this.logger.info('SETTLING INVOICE');
         await swapClient.settleInvoice(rHash, rPreimage, currency);
       } catch (err) {
         this.logger.error(`could not settle invoice for deal ${rHash}`, err);
@@ -719,7 +737,9 @@ class Swaps extends EventEmitter {
               } catch (err) {
                 this.logger.error(`could not settle invoice for deal ${rHash}`, err);
               }
-            }, SwapRecovery.PENDING_SWAP_RECHECK_INTERVAL);
+            }, process.env.CUSTOM_SCENARIO === 'INSTABILITY::MAKER_CLIENT_CRASHED_BEFORE_SETTLE' ?
+              2000 :
+              SwapRecovery.PENDING_SWAP_RECHECK_INTERVAL);
           });
           await settleRetryPromise;
         } else {
@@ -743,6 +763,16 @@ class Swaps extends EventEmitter {
    * accepted, initiates the swap.
    */
   private handleSwapAccepted = async (responsePacket: packets.SwapAcceptedPacket, peer: Peer) => {
+    if (process.env.CUSTOM_SCENARIO === 'SECURITY::TAKER_SWAPACCEPTED_STALL') {
+      this.logger.info(`CUSTOM_SCENARIO: ${process.env.CUSTOM_SCENARIO}`);
+      return;
+    }
+
+    if (process.env.CUSTOM_SCENARIO === 'SECURITY::TAKER_SWAPACCEPTED_SHUTDOWN') {
+      this.logger.info(`CUSTOM_SCENARIO: ${process.env.CUSTOM_SCENARIO}`);
+      process.exit();
+    }
+
     assert(responsePacket.body, 'SwapAcceptedPacket does not contain a body');
     const { quantity, rHash, makerCltvDelta } = responsePacket.body;
     const deal = this.getDeal(rHash);
@@ -830,6 +860,11 @@ class Swaps extends EventEmitter {
 
     try {
       await makerSwapClient.sendPayment(deal);
+
+      if (process.env.CUSTOM_SCENARIO === 'SECURITY::TAKER_SWAPSUCCEEDED_STALL') {
+        this.logger.info(`CUSTOM_SCENARIO: ${process.env.CUSTOM_SCENARIO}`);
+        return;
+      }
     } catch (err) {
       // first we must handle the edge case where the maker has paid us but failed to claim our payment
       // in this case, we've already marked the swap as having been paid and completed
@@ -1011,6 +1046,18 @@ class Swaps extends EventEmitter {
 
       this.logger.debug('Executing maker code to resolve hash');
 
+      if (process.env.CUSTOM_SCENARIO === 'SECURITY::MAKER_1ST_HTLC_STALL') {
+        this.logger.info(`CUSTOM_SCENARIO: ${process.env.CUSTOM_SCENARIO}`);
+        const makerSwapClient = this.swapClientManager.get(deal.makerCurrency)!;
+        await makerSwapClient.removeInvoice(deal.rHash).catch(this.logger.error);
+        return '';
+      }
+
+      if (process.env.CUSTOM_SCENARIO === 'SECURITY::MAKER_1ST_HTLC_SHUTDOWN') {
+        this.logger.info(`CUSTOM_SCENARIO: ${process.env.CUSTOM_SCENARIO}`);
+        process.exit();
+      }
+
       const swapClient = this.swapClientManager.get(deal.takerCurrency)!;
 
       // we update the phase persist the deal to the database before we attempt to send payment
@@ -1021,6 +1068,13 @@ class Swaps extends EventEmitter {
       assert(deal.state !== SwapState.Error, `cannot send payment for failed swap ${deal.rHash}`);
 
       try {
+        if (process.env.CUSTOM_SCENARIO === 'INSTABILITY::MAKER_CRASH_WHILE_SENDING') {
+          setTimeout(() => {
+            this.logger.info(`CUSTOM_SCENARIO: ${process.env.CUSTOM_SCENARIO}`);
+            process.exit();
+          }, 2000);
+        }
+
         deal.rPreimage = await swapClient.sendPayment(deal);
       } catch (err) {
         this.logger.debug(`sendPayment in resolveHash for swap ${deal.rHash} failed due to ${err.message}`);
@@ -1098,10 +1152,22 @@ class Swaps extends EventEmitter {
         }
       }
 
+      if (process.env.CUSTOM_SCENARIO === 'INSTABILITY::MAKER_CRASH_AFTER_SEND_BEFORE_PREIMAGE_RESOLVED') {
+        this.logger.info(`CUSTOM_SCENARIO: ${process.env.CUSTOM_SCENARIO}`);
+        process.exit();
+      }
+
       // we update the deal phase but we don't wait for the updated deal to be persisted
       // to the database because we don't want to delay claiming the incoming payment
       // using the preimage we've just resolved
-      this.setDealPhase(deal, SwapPhase.PreimageResolved).catch(this.logger.error);
+      this.setDealPhase(deal, SwapPhase.PreimageResolved).then(() => {
+        if (process.env.CUSTOM_SCENARIO === 'INSTABILITY::MAKER_CRASH_AFTER_SEND_AFTER_PREIMAGE_RESOLVED') {
+          this.logger.info(`CUSTOM_SCENARIO: ${process.env.CUSTOM_SCENARIO}`);
+          process.exit();
+        }
+      }).catch(this.logger.error);
+
+
       return deal.rPreimage;
     } else {
       // If we are here we are the taker
@@ -1109,6 +1175,16 @@ class Swaps extends EventEmitter {
       assert(htlcCurrency === undefined || htlcCurrency === deal.takerCurrency, 'incoming htlc does not match expected deal currency');
       this.logger.debug('Executing taker code to resolve hash');
 
+      if (process.env.CUSTOM_SCENARIO === 'SECURITY::TAKER_2ND_HTLC_STALL') {
+        this.logger.info(`CUSTOM_SCENARIO: ${process.env.CUSTOM_SCENARIO}`);
+        return '';
+      }
+
+      if (process.env.CUSTOM_SCENARIO === 'SECURITY::TAKER_2ND_HTLC_SHUTDOWN') {
+        this.logger.info(`CUSTOM_SCENARIO: ${process.env.CUSTOM_SCENARIO}`);
+        process.exit();
+      }
+
       return deal.rPreimage;
     }
   }
@@ -1277,8 +1353,11 @@ class Swaps extends EventEmitter {
         swapClient.removeInvoice(deal.rHash).catch(this.logger.error); // we don't need to await the remove invoice call
       }
     } else if (deal.phase === SwapPhase.SendingPayment) {
-      const swapClient = this.swapClientManager.get(deal.takerCurrency)!;
-      swapClient.removeInvoice(deal.rHash).catch(this.logger.error); // we don't need to await the remove invoice call
+      // don't cancel any invoices if the taker is stalling
+      if (process.env.CUSTOM_SCENARIO !== 'SECURITY::TAKER_2ND_HTLC_STALL') {
+        const swapClient = this.swapClientManager.get(deal.takerCurrency)!;
+        swapClient.removeInvoice(deal.rHash).catch(this.logger.error); // we don't need to await the remove invoice call
+      }
     }
 
     this.logger.trace(`emitting swap.failed event for ${deal.rHash}`);
@@ -1343,9 +1422,14 @@ class Swaps extends EventEmitter {
 
         if (deal.role === SwapRole.Maker) {
           // the maker begins execution of the swap upon accepting the deal
+
+          let interval = Swaps.SWAP_COMPLETE_TIMEOUT + Swaps.SWAP_COMPLETE_MAKER_BUFFER;
+          if (process.env.CUSTOM_SCENARIO === 'INSTABILITY::MAKER_CLIENT_CRASHED_BEFORE_SETTLE') {
+            interval = 5000;
+          }
           this.timeouts.set(rHash, setTimeout(
             this.handleSwapTimeout,
-            Swaps.SWAP_COMPLETE_TIMEOUT + Swaps.SWAP_COMPLETE_MAKER_BUFFER,
+            interval,
             rHash,
             SwapFailureReason.SwapTimedOut,
           ));
