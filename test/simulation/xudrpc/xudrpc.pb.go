// Code generated by protoc-gen-go. DO NOT EDIT.
// source: xudrpc.proto

package xudrpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type OrderSide int32

const (
	OrderSide_BUY  OrderSide = 0
	OrderSide_SELL OrderSide = 1
	OrderSide_BOTH OrderSide = 2
)

var OrderSide_name = map[int32]string{
	0: "BUY",
	1: "SELL",
	2: "BOTH",
}

var OrderSide_value = map[string]int32{
	"BUY":  0,
	"SELL": 1,
	"BOTH": 2,
}

func (x OrderSide) String() string {
	return proto.EnumName(OrderSide_name, int32(x))
}

func (OrderSide) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{0}
}

type Role int32

const (
	Role_TAKER    Role = 0
	Role_MAKER    Role = 1
	Role_INTERNAL Role = 2
)

var Role_name = map[int32]string{
	0: "TAKER",
	1: "MAKER",
	2: "INTERNAL",
}

var Role_value = map[string]int32{
	"TAKER":    0,
	"MAKER":    1,
	"INTERNAL": 2,
}

func (x Role) String() string {
	return proto.EnumName(Role_name, int32(x))
}

func (Role) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{1}
}

type LogLevel int32

const (
	LogLevel_ALERT   LogLevel = 0
	LogLevel_ERROR   LogLevel = 1
	LogLevel_WARN    LogLevel = 2
	LogLevel_INFO    LogLevel = 3
	LogLevel_VERBOSE LogLevel = 4
	LogLevel_DEBUG   LogLevel = 5
	LogLevel_TRACE   LogLevel = 6
)

var LogLevel_name = map[int32]string{
	0: "ALERT",
	1: "ERROR",
	2: "WARN",
	3: "INFO",
	4: "VERBOSE",
	5: "DEBUG",
	6: "TRACE",
}

var LogLevel_value = map[string]int32{
	"ALERT":   0,
	"ERROR":   1,
	"WARN":    2,
	"INFO":    3,
	"VERBOSE": 4,
	"DEBUG":   5,
	"TRACE":   6,
}

func (x LogLevel) String() string {
	return proto.EnumName(LogLevel_name, int32(x))
}

func (LogLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{2}
}

type Currency_SwapClient int32

const (
	Currency_LND     Currency_SwapClient = 0
	Currency_CONNEXT Currency_SwapClient = 2
)

var Currency_SwapClient_name = map[int32]string{
	0: "LND",
	2: "CONNEXT",
}

var Currency_SwapClient_value = map[string]int32{
	"LND":     0,
	"CONNEXT": 2,
}

func (x Currency_SwapClient) String() string {
	return proto.EnumName(Currency_SwapClient_name, int32(x))
}

func (Currency_SwapClient) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{16, 0}
}

type ListOrdersRequest_Owner int32

const (
	ListOrdersRequest_BOTH ListOrdersRequest_Owner = 0
	ListOrdersRequest_OWN  ListOrdersRequest_Owner = 1
	ListOrdersRequest_PEER ListOrdersRequest_Owner = 2
)

var ListOrdersRequest_Owner_name = map[int32]string{
	0: "BOTH",
	1: "OWN",
	2: "PEER",
}

var ListOrdersRequest_Owner_value = map[string]int32{
	"BOTH": 0,
	"OWN":  1,
	"PEER": 2,
}

func (x ListOrdersRequest_Owner) String() string {
	return proto.EnumName(ListOrdersRequest_Owner_name, int32(x))
}

func (ListOrdersRequest_Owner) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{32, 0}
}

type AddCurrencyResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddCurrencyResponse) Reset()         { *m = AddCurrencyResponse{} }
func (m *AddCurrencyResponse) String() string { return proto.CompactTextString(m) }
func (*AddCurrencyResponse) ProtoMessage()    {}
func (*AddCurrencyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{0}
}

func (m *AddCurrencyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddCurrencyResponse.Unmarshal(m, b)
}
func (m *AddCurrencyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddCurrencyResponse.Marshal(b, m, deterministic)
}
func (m *AddCurrencyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddCurrencyResponse.Merge(m, src)
}
func (m *AddCurrencyResponse) XXX_Size() int {
	return xxx_messageInfo_AddCurrencyResponse.Size(m)
}
func (m *AddCurrencyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddCurrencyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddCurrencyResponse proto.InternalMessageInfo

type AddPairRequest struct {
	// The base currency that is bought and sold for this trading pair.
	BaseCurrency string `protobuf:"bytes,1,opt,name=base_currency,proto3" json:"base_currency,omitempty"`
	// The currency used to quote a price for the base currency.
	QuoteCurrency        string   `protobuf:"bytes,2,opt,name=quote_currency,proto3" json:"quote_currency,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddPairRequest) Reset()         { *m = AddPairRequest{} }
func (m *AddPairRequest) String() string { return proto.CompactTextString(m) }
func (*AddPairRequest) ProtoMessage()    {}
func (*AddPairRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{1}
}

func (m *AddPairRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddPairRequest.Unmarshal(m, b)
}
func (m *AddPairRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddPairRequest.Marshal(b, m, deterministic)
}
func (m *AddPairRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPairRequest.Merge(m, src)
}
func (m *AddPairRequest) XXX_Size() int {
	return xxx_messageInfo_AddPairRequest.Size(m)
}
func (m *AddPairRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPairRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddPairRequest proto.InternalMessageInfo

func (m *AddPairRequest) GetBaseCurrency() string {
	if m != nil {
		return m.BaseCurrency
	}
	return ""
}

func (m *AddPairRequest) GetQuoteCurrency() string {
	if m != nil {
		return m.QuoteCurrency
	}
	return ""
}

type AddPairResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddPairResponse) Reset()         { *m = AddPairResponse{} }
func (m *AddPairResponse) String() string { return proto.CompactTextString(m) }
func (*AddPairResponse) ProtoMessage()    {}
func (*AddPairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{2}
}

func (m *AddPairResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddPairResponse.Unmarshal(m, b)
}
func (m *AddPairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddPairResponse.Marshal(b, m, deterministic)
}
func (m *AddPairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPairResponse.Merge(m, src)
}
func (m *AddPairResponse) XXX_Size() int {
	return xxx_messageInfo_AddPairResponse.Size(m)
}
func (m *AddPairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddPairResponse proto.InternalMessageInfo

type Balance struct {
	// Total balance denominated in satoshis.
	TotalBalance uint64 `protobuf:"varint,1,opt,name=total_balance,proto3" json:"total_balance,omitempty"`
	// Sum of confirmed channel balances denominated in satoshis.
	ChannelBalance uint64 `protobuf:"varint,2,opt,name=channel_balance,proto3" json:"channel_balance,omitempty"`
	// Sum of pending channel balances denominated in satoshis.
	PendingChannelBalance uint64 `protobuf:"varint,3,opt,name=pending_channel_balance,proto3" json:"pending_channel_balance,omitempty"`
	// Sum of inactive channel balances denominated in satoshis.
	InactiveChannelBalance uint64 `protobuf:"varint,4,opt,name=inactive_channel_balance,proto3" json:"inactive_channel_balance,omitempty"`
	// Confirmed wallet balance in satoshis.
	WalletBalance uint64 `protobuf:"varint,5,opt,name=wallet_balance,proto3" json:"wallet_balance,omitempty"`
	// Unconfirmed wallet balance in satoshis.
	UnconfirmedWalletBalance uint64   `protobuf:"varint,6,opt,name=unconfirmed_wallet_balance,proto3" json:"unconfirmed_wallet_balance,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *Balance) Reset()         { *m = Balance{} }
func (m *Balance) String() string { return proto.CompactTextString(m) }
func (*Balance) ProtoMessage()    {}
func (*Balance) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{3}
}

func (m *Balance) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Balance.Unmarshal(m, b)
}
func (m *Balance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Balance.Marshal(b, m, deterministic)
}
func (m *Balance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Balance.Merge(m, src)
}
func (m *Balance) XXX_Size() int {
	return xxx_messageInfo_Balance.Size(m)
}
func (m *Balance) XXX_DiscardUnknown() {
	xxx_messageInfo_Balance.DiscardUnknown(m)
}

var xxx_messageInfo_Balance proto.InternalMessageInfo

func (m *Balance) GetTotalBalance() uint64 {
	if m != nil {
		return m.TotalBalance
	}
	return 0
}

func (m *Balance) GetChannelBalance() uint64 {
	if m != nil {
		return m.ChannelBalance
	}
	return 0
}

func (m *Balance) GetPendingChannelBalance() uint64 {
	if m != nil {
		return m.PendingChannelBalance
	}
	return 0
}

func (m *Balance) GetInactiveChannelBalance() uint64 {
	if m != nil {
		return m.InactiveChannelBalance
	}
	return 0
}

func (m *Balance) GetWalletBalance() uint64 {
	if m != nil {
		return m.WalletBalance
	}
	return 0
}

func (m *Balance) GetUnconfirmedWalletBalance() uint64 {
	if m != nil {
		return m.UnconfirmedWalletBalance
	}
	return 0
}

type BanRequest struct {
	// The node pub key or alias of the node to ban.
	NodeIdentifier       string   `protobuf:"bytes,1,opt,name=node_identifier,proto3" json:"node_identifier,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BanRequest) Reset()         { *m = BanRequest{} }
func (m *BanRequest) String() string { return proto.CompactTextString(m) }
func (*BanRequest) ProtoMessage()    {}
func (*BanRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{4}
}

func (m *BanRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BanRequest.Unmarshal(m, b)
}
func (m *BanRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BanRequest.Marshal(b, m, deterministic)
}
func (m *BanRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BanRequest.Merge(m, src)
}
func (m *BanRequest) XXX_Size() int {
	return xxx_messageInfo_BanRequest.Size(m)
}
func (m *BanRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BanRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BanRequest proto.InternalMessageInfo

func (m *BanRequest) GetNodeIdentifier() string {
	if m != nil {
		return m.NodeIdentifier
	}
	return ""
}

type BanResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BanResponse) Reset()         { *m = BanResponse{} }
func (m *BanResponse) String() string { return proto.CompactTextString(m) }
func (*BanResponse) ProtoMessage()    {}
func (*BanResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{5}
}

func (m *BanResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BanResponse.Unmarshal(m, b)
}
func (m *BanResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BanResponse.Marshal(b, m, deterministic)
}
func (m *BanResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BanResponse.Merge(m, src)
}
func (m *BanResponse) XXX_Size() int {
	return xxx_messageInfo_BanResponse.Size(m)
}
func (m *BanResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BanResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BanResponse proto.InternalMessageInfo

type Chain struct {
	// The blockchain the swap client is on (eg bitcoin, litecoin)
	Chain string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	// The network the swap client is on (eg regtest, testnet, mainnet)
	Network              string   `protobuf:"bytes,2,opt,name=network,proto3" json:"network,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Chain) Reset()         { *m = Chain{} }
func (m *Chain) String() string { return proto.CompactTextString(m) }
func (*Chain) ProtoMessage()    {}
func (*Chain) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{6}
}

func (m *Chain) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Chain.Unmarshal(m, b)
}
func (m *Chain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Chain.Marshal(b, m, deterministic)
}
func (m *Chain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chain.Merge(m, src)
}
func (m *Chain) XXX_Size() int {
	return xxx_messageInfo_Chain.Size(m)
}
func (m *Chain) XXX_DiscardUnknown() {
	xxx_messageInfo_Chain.DiscardUnknown(m)
}

var xxx_messageInfo_Chain proto.InternalMessageInfo

func (m *Chain) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *Chain) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

type Channels struct {
	// The number of active/online channels for this lnd instance that can be used for swaps.
	Active uint32 `protobuf:"varint,1,opt,name=active,proto3" json:"active,omitempty"`
	// The number of inactive/offline channels for this lnd instance.
	Inactive uint32 `protobuf:"varint,2,opt,name=inactive,proto3" json:"inactive,omitempty"`
	// The number of channels that are pending on-chain confirmation before they can be used.
	Pending uint32 `protobuf:"varint,3,opt,name=pending,proto3" json:"pending,omitempty"`
	// The number of channels that have been closed.
	Closed               uint32   `protobuf:"varint,4,opt,name=closed,proto3" json:"closed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Channels) Reset()         { *m = Channels{} }
func (m *Channels) String() string { return proto.CompactTextString(m) }
func (*Channels) ProtoMessage()    {}
func (*Channels) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{7}
}

func (m *Channels) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Channels.Unmarshal(m, b)
}
func (m *Channels) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Channels.Marshal(b, m, deterministic)
}
func (m *Channels) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Channels.Merge(m, src)
}
func (m *Channels) XXX_Size() int {
	return xxx_messageInfo_Channels.Size(m)
}
func (m *Channels) XXX_DiscardUnknown() {
	xxx_messageInfo_Channels.DiscardUnknown(m)
}

var xxx_messageInfo_Channels proto.InternalMessageInfo

func (m *Channels) GetActive() uint32 {
	if m != nil {
		return m.Active
	}
	return 0
}

func (m *Channels) GetInactive() uint32 {
	if m != nil {
		return m.Inactive
	}
	return 0
}

func (m *Channels) GetPending() uint32 {
	if m != nil {
		return m.Pending
	}
	return 0
}

func (m *Channels) GetClosed() uint32 {
	if m != nil {
		return m.Closed
	}
	return 0
}

type ChangePasswordRequest struct {
	NewPassword          string   `protobuf:"bytes,1,opt,name=new_password,proto3" json:"new_password,omitempty"`
	OldPassword          string   `protobuf:"bytes,2,opt,name=old_password,proto3" json:"old_password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChangePasswordRequest) Reset()         { *m = ChangePasswordRequest{} }
func (m *ChangePasswordRequest) String() string { return proto.CompactTextString(m) }
func (*ChangePasswordRequest) ProtoMessage()    {}
func (*ChangePasswordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{8}
}

func (m *ChangePasswordRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChangePasswordRequest.Unmarshal(m, b)
}
func (m *ChangePasswordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChangePasswordRequest.Marshal(b, m, deterministic)
}
func (m *ChangePasswordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangePasswordRequest.Merge(m, src)
}
func (m *ChangePasswordRequest) XXX_Size() int {
	return xxx_messageInfo_ChangePasswordRequest.Size(m)
}
func (m *ChangePasswordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangePasswordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChangePasswordRequest proto.InternalMessageInfo

func (m *ChangePasswordRequest) GetNewPassword() string {
	if m != nil {
		return m.NewPassword
	}
	return ""
}

func (m *ChangePasswordRequest) GetOldPassword() string {
	if m != nil {
		return m.OldPassword
	}
	return ""
}

type ChangePasswordResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChangePasswordResponse) Reset()         { *m = ChangePasswordResponse{} }
func (m *ChangePasswordResponse) String() string { return proto.CompactTextString(m) }
func (*ChangePasswordResponse) ProtoMessage()    {}
func (*ChangePasswordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{9}
}

func (m *ChangePasswordResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChangePasswordResponse.Unmarshal(m, b)
}
func (m *ChangePasswordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChangePasswordResponse.Marshal(b, m, deterministic)
}
func (m *ChangePasswordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangePasswordResponse.Merge(m, src)
}
func (m *ChangePasswordResponse) XXX_Size() int {
	return xxx_messageInfo_ChangePasswordResponse.Size(m)
}
func (m *ChangePasswordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangePasswordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChangePasswordResponse proto.InternalMessageInfo

type CloseChannelRequest struct {
	// The node pub key or alias of the peer with which to close any channels with.
	NodeIdentifier string `protobuf:"bytes,1,opt,name=node_identifier,proto3" json:"node_identifier,omitempty"`
	// The ticker symbol of the currency of the channel to close.
	Currency string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	// Whether to force close the channel in case the peer is offline or unresponsive.
	Force bool `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
	// The on-chain address to send funds extracted from the channel. If unspecified,
	// the funds return to the default wallet for the client closing the channel.
	Destination string `protobuf:"bytes,4,opt,name=destination,proto3" json:"destination,omitempty"`
	// For Connext only - the amount to extract from the channel. If 0 or unspecified,
	// the entire off-chain balance for the specified currency will be extracted.
	Amount uint64 `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`
	// A manual fee rate set in sat/byte that should be used when crafting the closure
	// transaction.
	Fee                  uint64   `protobuf:"varint,6,opt,name=fee,proto3" json:"fee,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CloseChannelRequest) Reset()         { *m = CloseChannelRequest{} }
func (m *CloseChannelRequest) String() string { return proto.CompactTextString(m) }
func (*CloseChannelRequest) ProtoMessage()    {}
func (*CloseChannelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{10}
}

func (m *CloseChannelRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloseChannelRequest.Unmarshal(m, b)
}
func (m *CloseChannelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloseChannelRequest.Marshal(b, m, deterministic)
}
func (m *CloseChannelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseChannelRequest.Merge(m, src)
}
func (m *CloseChannelRequest) XXX_Size() int {
	return xxx_messageInfo_CloseChannelRequest.Size(m)
}
func (m *CloseChannelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseChannelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CloseChannelRequest proto.InternalMessageInfo

func (m *CloseChannelRequest) GetNodeIdentifier() string {
	if m != nil {
		return m.NodeIdentifier
	}
	return ""
}

func (m *CloseChannelRequest) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *CloseChannelRequest) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func (m *CloseChannelRequest) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *CloseChannelRequest) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *CloseChannelRequest) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

type CloseChannelResponse struct {
	// The id of the transaction per channel close.
	TransactionIds       []string `protobuf:"bytes,1,rep,name=transaction_ids,proto3" json:"transaction_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CloseChannelResponse) Reset()         { *m = CloseChannelResponse{} }
func (m *CloseChannelResponse) String() string { return proto.CompactTextString(m) }
func (*CloseChannelResponse) ProtoMessage()    {}
func (*CloseChannelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{11}
}

func (m *CloseChannelResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloseChannelResponse.Unmarshal(m, b)
}
func (m *CloseChannelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloseChannelResponse.Marshal(b, m, deterministic)
}
func (m *CloseChannelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseChannelResponse.Merge(m, src)
}
func (m *CloseChannelResponse) XXX_Size() int {
	return xxx_messageInfo_CloseChannelResponse.Size(m)
}
func (m *CloseChannelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseChannelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CloseChannelResponse proto.InternalMessageInfo

func (m *CloseChannelResponse) GetTransactionIds() []string {
	if m != nil {
		return m.TransactionIds
	}
	return nil
}

type ConnectRequest struct {
	// The uri of the node to connect to in "[nodePubKey]@[host]:[port]" format.
	NodeUri              string   `protobuf:"bytes,1,opt,name=node_uri,proto3" json:"node_uri,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConnectRequest) Reset()         { *m = ConnectRequest{} }
func (m *ConnectRequest) String() string { return proto.CompactTextString(m) }
func (*ConnectRequest) ProtoMessage()    {}
func (*ConnectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{12}
}

func (m *ConnectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConnectRequest.Unmarshal(m, b)
}
func (m *ConnectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConnectRequest.Marshal(b, m, deterministic)
}
func (m *ConnectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectRequest.Merge(m, src)
}
func (m *ConnectRequest) XXX_Size() int {
	return xxx_messageInfo_ConnectRequest.Size(m)
}
func (m *ConnectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectRequest proto.InternalMessageInfo

func (m *ConnectRequest) GetNodeUri() string {
	if m != nil {
		return m.NodeUri
	}
	return ""
}

type ConnectResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConnectResponse) Reset()         { *m = ConnectResponse{} }
func (m *ConnectResponse) String() string { return proto.CompactTextString(m) }
func (*ConnectResponse) ProtoMessage()    {}
func (*ConnectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{13}
}

func (m *ConnectResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConnectResponse.Unmarshal(m, b)
}
func (m *ConnectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConnectResponse.Marshal(b, m, deterministic)
}
func (m *ConnectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectResponse.Merge(m, src)
}
func (m *ConnectResponse) XXX_Size() int {
	return xxx_messageInfo_ConnectResponse.Size(m)
}
func (m *ConnectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectResponse proto.InternalMessageInfo

type CreateNodeRequest struct {
	// The password in utf-8 with which to encrypt the new xud node key as well
	// as any uninitialized underlying wallets.
	Password             string   `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateNodeRequest) Reset()         { *m = CreateNodeRequest{} }
func (m *CreateNodeRequest) String() string { return proto.CompactTextString(m) }
func (*CreateNodeRequest) ProtoMessage()    {}
func (*CreateNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{14}
}

func (m *CreateNodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateNodeRequest.Unmarshal(m, b)
}
func (m *CreateNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateNodeRequest.Marshal(b, m, deterministic)
}
func (m *CreateNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateNodeRequest.Merge(m, src)
}
func (m *CreateNodeRequest) XXX_Size() int {
	return xxx_messageInfo_CreateNodeRequest.Size(m)
}
func (m *CreateNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateNodeRequest proto.InternalMessageInfo

func (m *CreateNodeRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type CreateNodeResponse struct {
	// The 24 word mnemonic to recover the xud identity key and underlying wallets
	SeedMnemonic []string `protobuf:"bytes,1,rep,name=seed_mnemonic,json=seedMnemonic,proto3" json:"seed_mnemonic,omitempty"`
	// The list of lnd clients that were initialized.
	InitializedLnds []string `protobuf:"bytes,2,rep,name=initialized_lnds,json=initializedLnds,proto3" json:"initialized_lnds,omitempty"`
	// Whether the connext wallet was initialized.
	InitializedConnext   bool     `protobuf:"varint,3,opt,name=initialized_connext,json=initializedConnext,proto3" json:"initialized_connext,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateNodeResponse) Reset()         { *m = CreateNodeResponse{} }
func (m *CreateNodeResponse) String() string { return proto.CompactTextString(m) }
func (*CreateNodeResponse) ProtoMessage()    {}
func (*CreateNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{15}
}

func (m *CreateNodeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateNodeResponse.Unmarshal(m, b)
}
func (m *CreateNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateNodeResponse.Marshal(b, m, deterministic)
}
func (m *CreateNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateNodeResponse.Merge(m, src)
}
func (m *CreateNodeResponse) XXX_Size() int {
	return xxx_messageInfo_CreateNodeResponse.Size(m)
}
func (m *CreateNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateNodeResponse proto.InternalMessageInfo

func (m *CreateNodeResponse) GetSeedMnemonic() []string {
	if m != nil {
		return m.SeedMnemonic
	}
	return nil
}

func (m *CreateNodeResponse) GetInitializedLnds() []string {
	if m != nil {
		return m.InitializedLnds
	}
	return nil
}

func (m *CreateNodeResponse) GetInitializedConnext() bool {
	if m != nil {
		return m.InitializedConnext
	}
	return false
}

type Currency struct {
	// The ticker symbol for this currency such as BTC, LTC, ETH, etc...
	Currency string `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`
	// The payment channel network client to use for executing swaps.
	SwapClient Currency_SwapClient `protobuf:"varint,2,opt,name=swap_client,proto3,enum=xudrpc.Currency_SwapClient" json:"swap_client,omitempty"`
	// The contract address for layered tokens such as ERC20.
	TokenAddress string `protobuf:"bytes,3,opt,name=token_address,proto3" json:"token_address,omitempty"`
	// The number of places to the right of the decimal point of the smallest subunit of the currency.
	// For example, BTC, LTC, and others where the smallest subunits (satoshis) are 0.00000001 full
	// units (bitcoins) have 8 decimal places. ETH has 18. This can be thought of as the base 10
	// exponent of the smallest subunit expressed as a positive integer. A default value of 8 is
	// used if unspecified.
	DecimalPlaces        uint32   `protobuf:"varint,4,opt,name=decimal_places,proto3" json:"decimal_places,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Currency) Reset()         { *m = Currency{} }
func (m *Currency) String() string { return proto.CompactTextString(m) }
func (*Currency) ProtoMessage()    {}
func (*Currency) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{16}
}

func (m *Currency) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Currency.Unmarshal(m, b)
}
func (m *Currency) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Currency.Marshal(b, m, deterministic)
}
func (m *Currency) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Currency.Merge(m, src)
}
func (m *Currency) XXX_Size() int {
	return xxx_messageInfo_Currency.Size(m)
}
func (m *Currency) XXX_DiscardUnknown() {
	xxx_messageInfo_Currency.DiscardUnknown(m)
}

var xxx_messageInfo_Currency proto.InternalMessageInfo

func (m *Currency) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *Currency) GetSwapClient() Currency_SwapClient {
	if m != nil {
		return m.SwapClient
	}
	return Currency_LND
}

func (m *Currency) GetTokenAddress() string {
	if m != nil {
		return m.TokenAddress
	}
	return ""
}

func (m *Currency) GetDecimalPlaces() uint32 {
	if m != nil {
		return m.DecimalPlaces
	}
	return 0
}

type DepositRequest struct {
	// The ticker symbol of the currency to deposit.
	Currency             string   `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DepositRequest) Reset()         { *m = DepositRequest{} }
func (m *DepositRequest) String() string { return proto.CompactTextString(m) }
func (*DepositRequest) ProtoMessage()    {}
func (*DepositRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{17}
}

func (m *DepositRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DepositRequest.Unmarshal(m, b)
}
func (m *DepositRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DepositRequest.Marshal(b, m, deterministic)
}
func (m *DepositRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositRequest.Merge(m, src)
}
func (m *DepositRequest) XXX_Size() int {
	return xxx_messageInfo_DepositRequest.Size(m)
}
func (m *DepositRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DepositRequest proto.InternalMessageInfo

func (m *DepositRequest) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

type DepositResponse struct {
	// The address to use to deposit funds.
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DepositResponse) Reset()         { *m = DepositResponse{} }
func (m *DepositResponse) String() string { return proto.CompactTextString(m) }
func (*DepositResponse) ProtoMessage()    {}
func (*DepositResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{18}
}

func (m *DepositResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DepositResponse.Unmarshal(m, b)
}
func (m *DepositResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DepositResponse.Marshal(b, m, deterministic)
}
func (m *DepositResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositResponse.Merge(m, src)
}
func (m *DepositResponse) XXX_Size() int {
	return xxx_messageInfo_DepositResponse.Size(m)
}
func (m *DepositResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DepositResponse proto.InternalMessageInfo

func (m *DepositResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type DiscoverNodesRequest struct {
	// The node pub key or alias of the peer to discover nodes from.
	NodeIdentifier       string   `protobuf:"bytes,1,opt,name=node_identifier,proto3" json:"node_identifier,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DiscoverNodesRequest) Reset()         { *m = DiscoverNodesRequest{} }
func (m *DiscoverNodesRequest) String() string { return proto.CompactTextString(m) }
func (*DiscoverNodesRequest) ProtoMessage()    {}
func (*DiscoverNodesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{19}
}

func (m *DiscoverNodesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiscoverNodesRequest.Unmarshal(m, b)
}
func (m *DiscoverNodesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiscoverNodesRequest.Marshal(b, m, deterministic)
}
func (m *DiscoverNodesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscoverNodesRequest.Merge(m, src)
}
func (m *DiscoverNodesRequest) XXX_Size() int {
	return xxx_messageInfo_DiscoverNodesRequest.Size(m)
}
func (m *DiscoverNodesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscoverNodesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DiscoverNodesRequest proto.InternalMessageInfo

func (m *DiscoverNodesRequest) GetNodeIdentifier() string {
	if m != nil {
		return m.NodeIdentifier
	}
	return ""
}

type DiscoverNodesResponse struct {
	NumNodes             uint32   `protobuf:"varint,1,opt,name=num_nodes,proto3" json:"num_nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DiscoverNodesResponse) Reset()         { *m = DiscoverNodesResponse{} }
func (m *DiscoverNodesResponse) String() string { return proto.CompactTextString(m) }
func (*DiscoverNodesResponse) ProtoMessage()    {}
func (*DiscoverNodesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{20}
}

func (m *DiscoverNodesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiscoverNodesResponse.Unmarshal(m, b)
}
func (m *DiscoverNodesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiscoverNodesResponse.Marshal(b, m, deterministic)
}
func (m *DiscoverNodesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscoverNodesResponse.Merge(m, src)
}
func (m *DiscoverNodesResponse) XXX_Size() int {
	return xxx_messageInfo_DiscoverNodesResponse.Size(m)
}
func (m *DiscoverNodesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscoverNodesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DiscoverNodesResponse proto.InternalMessageInfo

func (m *DiscoverNodesResponse) GetNumNodes() uint32 {
	if m != nil {
		return m.NumNodes
	}
	return 0
}

type ExecuteSwapRequest struct {
	// The order id of the maker order.
	OrderId string `protobuf:"bytes,1,opt,name=order_id,proto3" json:"order_id,omitempty"`
	// The trading pair of the swap orders.
	PairId string `protobuf:"bytes,2,opt,name=pair_id,proto3" json:"pair_id,omitempty"`
	// The node pub key of the peer which owns the maker order. This is optional but helps locate the order more quickly.
	PeerPubKey string `protobuf:"bytes,3,opt,name=peer_pub_key,proto3" json:"peer_pub_key,omitempty"`
	// The quantity to swap denominated in satoshis. The whole order will be swapped if unspecified.
	Quantity             uint64   `protobuf:"varint,4,opt,name=quantity,proto3" json:"quantity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExecuteSwapRequest) Reset()         { *m = ExecuteSwapRequest{} }
func (m *ExecuteSwapRequest) String() string { return proto.CompactTextString(m) }
func (*ExecuteSwapRequest) ProtoMessage()    {}
func (*ExecuteSwapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{21}
}

func (m *ExecuteSwapRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecuteSwapRequest.Unmarshal(m, b)
}
func (m *ExecuteSwapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecuteSwapRequest.Marshal(b, m, deterministic)
}
func (m *ExecuteSwapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteSwapRequest.Merge(m, src)
}
func (m *ExecuteSwapRequest) XXX_Size() int {
	return xxx_messageInfo_ExecuteSwapRequest.Size(m)
}
func (m *ExecuteSwapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteSwapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteSwapRequest proto.InternalMessageInfo

func (m *ExecuteSwapRequest) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *ExecuteSwapRequest) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

func (m *ExecuteSwapRequest) GetPeerPubKey() string {
	if m != nil {
		return m.PeerPubKey
	}
	return ""
}

func (m *ExecuteSwapRequest) GetQuantity() uint64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

type GetBalanceRequest struct {
	// The ticker symbol of the currency to query for, if unspecified then balances for all supported
	// currencies are queried.
	Currency             string   `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBalanceRequest) Reset()         { *m = GetBalanceRequest{} }
func (m *GetBalanceRequest) String() string { return proto.CompactTextString(m) }
func (*GetBalanceRequest) ProtoMessage()    {}
func (*GetBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{22}
}

func (m *GetBalanceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetBalanceRequest.Unmarshal(m, b)
}
func (m *GetBalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetBalanceRequest.Marshal(b, m, deterministic)
}
func (m *GetBalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBalanceRequest.Merge(m, src)
}
func (m *GetBalanceRequest) XXX_Size() int {
	return xxx_messageInfo_GetBalanceRequest.Size(m)
}
func (m *GetBalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBalanceRequest proto.InternalMessageInfo

func (m *GetBalanceRequest) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

type GetBalanceResponse struct {
	// A map between currency ticker symbols and their balances.
	Balances             map[string]*Balance `protobuf:"bytes,1,rep,name=balances,proto3" json:"balances,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *GetBalanceResponse) Reset()         { *m = GetBalanceResponse{} }
func (m *GetBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*GetBalanceResponse) ProtoMessage()    {}
func (*GetBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{23}
}

func (m *GetBalanceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetBalanceResponse.Unmarshal(m, b)
}
func (m *GetBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetBalanceResponse.Marshal(b, m, deterministic)
}
func (m *GetBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBalanceResponse.Merge(m, src)
}
func (m *GetBalanceResponse) XXX_Size() int {
	return xxx_messageInfo_GetBalanceResponse.Size(m)
}
func (m *GetBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBalanceResponse proto.InternalMessageInfo

func (m *GetBalanceResponse) GetBalances() map[string]*Balance {
	if m != nil {
		return m.Balances
	}
	return nil
}

type GetInfoRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetInfoRequest) Reset()         { *m = GetInfoRequest{} }
func (m *GetInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetInfoRequest) ProtoMessage()    {}
func (*GetInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{24}
}

func (m *GetInfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetInfoRequest.Unmarshal(m, b)
}
func (m *GetInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetInfoRequest.Marshal(b, m, deterministic)
}
func (m *GetInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInfoRequest.Merge(m, src)
}
func (m *GetInfoRequest) XXX_Size() int {
	return xxx_messageInfo_GetInfoRequest.Size(m)
}
func (m *GetInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetInfoRequest proto.InternalMessageInfo

type GetInfoResponse struct {
	// The version of this instance of xud.
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// The node pub key of this node.
	NodePubKey string `protobuf:"bytes,2,opt,name=node_pub_key,proto3" json:"node_pub_key,omitempty"`
	// A list of uris that can be used to connect to this node. These are shared with peers.
	Uris []string `protobuf:"bytes,3,rep,name=uris,proto3" json:"uris,omitempty"`
	// The number of currently connected peers.
	NumPeers uint32 `protobuf:"varint,4,opt,name=num_peers,proto3" json:"num_peers,omitempty"`
	// The number of supported trading pairs.
	NumPairs uint32 `protobuf:"varint,5,opt,name=num_pairs,proto3" json:"num_pairs,omitempty"`
	// The number of active, standing orders in the order book.
	Orders *OrdersCount        `protobuf:"bytes,6,opt,name=orders,proto3" json:"orders,omitempty"`
	Lnd    map[string]*LndInfo `protobuf:"bytes,7,rep,name=lnd,proto3" json:"lnd,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The alias of this instance of xud.
	Alias string `protobuf:"bytes,9,opt,name=alias,proto3" json:"alias,omitempty"`
	// The network of this node.
	Network              string       `protobuf:"bytes,10,opt,name=network,proto3" json:"network,omitempty"`
	PendingSwapHashes    []string     `protobuf:"bytes,11,rep,name=pending_swap_hashes,proto3" json:"pending_swap_hashes,omitempty"`
	Connext              *ConnextInfo `protobuf:"bytes,12,opt,name=connext,proto3" json:"connext,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *GetInfoResponse) Reset()         { *m = GetInfoResponse{} }
func (m *GetInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GetInfoResponse) ProtoMessage()    {}
func (*GetInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{25}
}

func (m *GetInfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetInfoResponse.Unmarshal(m, b)
}
func (m *GetInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetInfoResponse.Marshal(b, m, deterministic)
}
func (m *GetInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInfoResponse.Merge(m, src)
}
func (m *GetInfoResponse) XXX_Size() int {
	return xxx_messageInfo_GetInfoResponse.Size(m)
}
func (m *GetInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetInfoResponse proto.InternalMessageInfo

func (m *GetInfoResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *GetInfoResponse) GetNodePubKey() string {
	if m != nil {
		return m.NodePubKey
	}
	return ""
}

func (m *GetInfoResponse) GetUris() []string {
	if m != nil {
		return m.Uris
	}
	return nil
}

func (m *GetInfoResponse) GetNumPeers() uint32 {
	if m != nil {
		return m.NumPeers
	}
	return 0
}

func (m *GetInfoResponse) GetNumPairs() uint32 {
	if m != nil {
		return m.NumPairs
	}
	return 0
}

func (m *GetInfoResponse) GetOrders() *OrdersCount {
	if m != nil {
		return m.Orders
	}
	return nil
}

func (m *GetInfoResponse) GetLnd() map[string]*LndInfo {
	if m != nil {
		return m.Lnd
	}
	return nil
}

func (m *GetInfoResponse) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

func (m *GetInfoResponse) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *GetInfoResponse) GetPendingSwapHashes() []string {
	if m != nil {
		return m.PendingSwapHashes
	}
	return nil
}

func (m *GetInfoResponse) GetConnext() *ConnextInfo {
	if m != nil {
		return m.Connext
	}
	return nil
}

type GetMnemonicRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMnemonicRequest) Reset()         { *m = GetMnemonicRequest{} }
func (m *GetMnemonicRequest) String() string { return proto.CompactTextString(m) }
func (*GetMnemonicRequest) ProtoMessage()    {}
func (*GetMnemonicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{26}
}

func (m *GetMnemonicRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMnemonicRequest.Unmarshal(m, b)
}
func (m *GetMnemonicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMnemonicRequest.Marshal(b, m, deterministic)
}
func (m *GetMnemonicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMnemonicRequest.Merge(m, src)
}
func (m *GetMnemonicRequest) XXX_Size() int {
	return xxx_messageInfo_GetMnemonicRequest.Size(m)
}
func (m *GetMnemonicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMnemonicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMnemonicRequest proto.InternalMessageInfo

type GetMnemonicResponse struct {
	SeedMnemonic         []string `protobuf:"bytes,1,rep,name=seed_mnemonic,proto3" json:"seed_mnemonic,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMnemonicResponse) Reset()         { *m = GetMnemonicResponse{} }
func (m *GetMnemonicResponse) String() string { return proto.CompactTextString(m) }
func (*GetMnemonicResponse) ProtoMessage()    {}
func (*GetMnemonicResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{27}
}

func (m *GetMnemonicResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMnemonicResponse.Unmarshal(m, b)
}
func (m *GetMnemonicResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMnemonicResponse.Marshal(b, m, deterministic)
}
func (m *GetMnemonicResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMnemonicResponse.Merge(m, src)
}
func (m *GetMnemonicResponse) XXX_Size() int {
	return xxx_messageInfo_GetMnemonicResponse.Size(m)
}
func (m *GetMnemonicResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMnemonicResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetMnemonicResponse proto.InternalMessageInfo

func (m *GetMnemonicResponse) GetSeedMnemonic() []string {
	if m != nil {
		return m.SeedMnemonic
	}
	return nil
}

type GetNodeInfoRequest struct {
	// The node pub key or alias of the node for which to get information.
	NodeIdentifier       string   `protobuf:"bytes,1,opt,name=node_identifier,proto3" json:"node_identifier,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetNodeInfoRequest) Reset()         { *m = GetNodeInfoRequest{} }
func (m *GetNodeInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetNodeInfoRequest) ProtoMessage()    {}
func (*GetNodeInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{28}
}

func (m *GetNodeInfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNodeInfoRequest.Unmarshal(m, b)
}
func (m *GetNodeInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNodeInfoRequest.Marshal(b, m, deterministic)
}
func (m *GetNodeInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNodeInfoRequest.Merge(m, src)
}
func (m *GetNodeInfoRequest) XXX_Size() int {
	return xxx_messageInfo_GetNodeInfoRequest.Size(m)
}
func (m *GetNodeInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNodeInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetNodeInfoRequest proto.InternalMessageInfo

func (m *GetNodeInfoRequest) GetNodeIdentifier() string {
	if m != nil {
		return m.NodeIdentifier
	}
	return ""
}

type GetNodeInfoResponse struct {
	// The node's reputation score. Points are subtracted for unexpected or potentially malicious
	// behavior. Points are added when swaps are successfully executed.
	ReputationScore int32 `protobuf:"zigzag32,1,opt,name=reputationScore,json=reputation,proto3" json:"reputationScore,omitempty"`
	// Whether the node is currently banned.
	Banned               bool     `protobuf:"varint,2,opt,name=banned,proto3" json:"banned,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetNodeInfoResponse) Reset()         { *m = GetNodeInfoResponse{} }
func (m *GetNodeInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GetNodeInfoResponse) ProtoMessage()    {}
func (*GetNodeInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{29}
}

func (m *GetNodeInfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNodeInfoResponse.Unmarshal(m, b)
}
func (m *GetNodeInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNodeInfoResponse.Marshal(b, m, deterministic)
}
func (m *GetNodeInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNodeInfoResponse.Merge(m, src)
}
func (m *GetNodeInfoResponse) XXX_Size() int {
	return xxx_messageInfo_GetNodeInfoResponse.Size(m)
}
func (m *GetNodeInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNodeInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetNodeInfoResponse proto.InternalMessageInfo

func (m *GetNodeInfoResponse) GetReputationScore() int32 {
	if m != nil {
		return m.ReputationScore
	}
	return 0
}

func (m *GetNodeInfoResponse) GetBanned() bool {
	if m != nil {
		return m.Banned
	}
	return false
}

type ListCurrenciesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListCurrenciesRequest) Reset()         { *m = ListCurrenciesRequest{} }
func (m *ListCurrenciesRequest) String() string { return proto.CompactTextString(m) }
func (*ListCurrenciesRequest) ProtoMessage()    {}
func (*ListCurrenciesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{30}
}

func (m *ListCurrenciesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListCurrenciesRequest.Unmarshal(m, b)
}
func (m *ListCurrenciesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListCurrenciesRequest.Marshal(b, m, deterministic)
}
func (m *ListCurrenciesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCurrenciesRequest.Merge(m, src)
}
func (m *ListCurrenciesRequest) XXX_Size() int {
	return xxx_messageInfo_ListCurrenciesRequest.Size(m)
}
func (m *ListCurrenciesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCurrenciesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListCurrenciesRequest proto.InternalMessageInfo

type ListCurrenciesResponse struct {
	// The list of available currencies in the orderbook.
	Currencies           []*Currency `protobuf:"bytes,1,rep,name=currencies,proto3" json:"currencies,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ListCurrenciesResponse) Reset()         { *m = ListCurrenciesResponse{} }
func (m *ListCurrenciesResponse) String() string { return proto.CompactTextString(m) }
func (*ListCurrenciesResponse) ProtoMessage()    {}
func (*ListCurrenciesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{31}
}

func (m *ListCurrenciesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListCurrenciesResponse.Unmarshal(m, b)
}
func (m *ListCurrenciesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListCurrenciesResponse.Marshal(b, m, deterministic)
}
func (m *ListCurrenciesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCurrenciesResponse.Merge(m, src)
}
func (m *ListCurrenciesResponse) XXX_Size() int {
	return xxx_messageInfo_ListCurrenciesResponse.Size(m)
}
func (m *ListCurrenciesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCurrenciesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListCurrenciesResponse proto.InternalMessageInfo

func (m *ListCurrenciesResponse) GetCurrencies() []*Currency {
	if m != nil {
		return m.Currencies
	}
	return nil
}

type ListOrdersRequest struct {
	// The trading pair for which to retrieve orders.
	PairId string `protobuf:"bytes,1,opt,name=pair_id,proto3" json:"pair_id,omitempty"`
	// Whether only own, only peer or both orders should be included in result.
	Owner ListOrdersRequest_Owner `protobuf:"varint,2,opt,name=owner,proto3,enum=xudrpc.ListOrdersRequest_Owner" json:"owner,omitempty"`
	// The maximum number of orders to return from each side of the order book.
	Limit uint32 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// Whether to include the node aliases of owners of the orders.
	IncludeAliases       bool     `protobuf:"varint,4,opt,name=include_aliases,proto3" json:"include_aliases,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListOrdersRequest) Reset()         { *m = ListOrdersRequest{} }
func (m *ListOrdersRequest) String() string { return proto.CompactTextString(m) }
func (*ListOrdersRequest) ProtoMessage()    {}
func (*ListOrdersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{32}
}

func (m *ListOrdersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListOrdersRequest.Unmarshal(m, b)
}
func (m *ListOrdersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListOrdersRequest.Marshal(b, m, deterministic)
}
func (m *ListOrdersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListOrdersRequest.Merge(m, src)
}
func (m *ListOrdersRequest) XXX_Size() int {
	return xxx_messageInfo_ListOrdersRequest.Size(m)
}
func (m *ListOrdersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListOrdersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListOrdersRequest proto.InternalMessageInfo

func (m *ListOrdersRequest) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

func (m *ListOrdersRequest) GetOwner() ListOrdersRequest_Owner {
	if m != nil {
		return m.Owner
	}
	return ListOrdersRequest_BOTH
}

func (m *ListOrdersRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListOrdersRequest) GetIncludeAliases() bool {
	if m != nil {
		return m.IncludeAliases
	}
	return false
}

type ListOrdersResponse struct {
	// A map between pair ids and their buy and sell orders.
	Orders               map[string]*Orders `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ListOrdersResponse) Reset()         { *m = ListOrdersResponse{} }
func (m *ListOrdersResponse) String() string { return proto.CompactTextString(m) }
func (*ListOrdersResponse) ProtoMessage()    {}
func (*ListOrdersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{33}
}

func (m *ListOrdersResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListOrdersResponse.Unmarshal(m, b)
}
func (m *ListOrdersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListOrdersResponse.Marshal(b, m, deterministic)
}
func (m *ListOrdersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListOrdersResponse.Merge(m, src)
}
func (m *ListOrdersResponse) XXX_Size() int {
	return xxx_messageInfo_ListOrdersResponse.Size(m)
}
func (m *ListOrdersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListOrdersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListOrdersResponse proto.InternalMessageInfo

func (m *ListOrdersResponse) GetOrders() map[string]*Orders {
	if m != nil {
		return m.Orders
	}
	return nil
}

type ListPairsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListPairsRequest) Reset()         { *m = ListPairsRequest{} }
func (m *ListPairsRequest) String() string { return proto.CompactTextString(m) }
func (*ListPairsRequest) ProtoMessage()    {}
func (*ListPairsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{34}
}

func (m *ListPairsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPairsRequest.Unmarshal(m, b)
}
func (m *ListPairsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPairsRequest.Marshal(b, m, deterministic)
}
func (m *ListPairsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPairsRequest.Merge(m, src)
}
func (m *ListPairsRequest) XXX_Size() int {
	return xxx_messageInfo_ListPairsRequest.Size(m)
}
func (m *ListPairsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPairsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListPairsRequest proto.InternalMessageInfo

type ListPairsResponse struct {
	// The list of supported trading pair tickers in formats like "LTC/BTC".
	Pairs                []string `protobuf:"bytes,1,rep,name=pairs,proto3" json:"pairs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListPairsResponse) Reset()         { *m = ListPairsResponse{} }
func (m *ListPairsResponse) String() string { return proto.CompactTextString(m) }
func (*ListPairsResponse) ProtoMessage()    {}
func (*ListPairsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{35}
}

func (m *ListPairsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPairsResponse.Unmarshal(m, b)
}
func (m *ListPairsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPairsResponse.Marshal(b, m, deterministic)
}
func (m *ListPairsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPairsResponse.Merge(m, src)
}
func (m *ListPairsResponse) XXX_Size() int {
	return xxx_messageInfo_ListPairsResponse.Size(m)
}
func (m *ListPairsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPairsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListPairsResponse proto.InternalMessageInfo

func (m *ListPairsResponse) GetPairs() []string {
	if m != nil {
		return m.Pairs
	}
	return nil
}

type ListPeersRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListPeersRequest) Reset()         { *m = ListPeersRequest{} }
func (m *ListPeersRequest) String() string { return proto.CompactTextString(m) }
func (*ListPeersRequest) ProtoMessage()    {}
func (*ListPeersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{36}
}

func (m *ListPeersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPeersRequest.Unmarshal(m, b)
}
func (m *ListPeersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPeersRequest.Marshal(b, m, deterministic)
}
func (m *ListPeersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPeersRequest.Merge(m, src)
}
func (m *ListPeersRequest) XXX_Size() int {
	return xxx_messageInfo_ListPeersRequest.Size(m)
}
func (m *ListPeersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPeersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListPeersRequest proto.InternalMessageInfo

type ListPeersResponse struct {
	// The list of connected peers.
	Peers                []*Peer  `protobuf:"bytes,1,rep,name=peers,proto3" json:"peers,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListPeersResponse) Reset()         { *m = ListPeersResponse{} }
func (m *ListPeersResponse) String() string { return proto.CompactTextString(m) }
func (*ListPeersResponse) ProtoMessage()    {}
func (*ListPeersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{37}
}

func (m *ListPeersResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPeersResponse.Unmarshal(m, b)
}
func (m *ListPeersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPeersResponse.Marshal(b, m, deterministic)
}
func (m *ListPeersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPeersResponse.Merge(m, src)
}
func (m *ListPeersResponse) XXX_Size() int {
	return xxx_messageInfo_ListPeersResponse.Size(m)
}
func (m *ListPeersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPeersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListPeersResponse proto.InternalMessageInfo

func (m *ListPeersResponse) GetPeers() []*Peer {
	if m != nil {
		return m.Peers
	}
	return nil
}

type LndInfo struct {
	Status               string    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Channels             *Channels `protobuf:"bytes,2,opt,name=channels,proto3" json:"channels,omitempty"`
	Chains               []*Chain  `protobuf:"bytes,3,rep,name=chains,proto3" json:"chains,omitempty"`
	Blockheight          uint32    `protobuf:"varint,4,opt,name=blockheight,proto3" json:"blockheight,omitempty"`
	Uris                 []string  `protobuf:"bytes,5,rep,name=uris,proto3" json:"uris,omitempty"`
	Version              string    `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`
	Alias                string    `protobuf:"bytes,7,opt,name=alias,proto3" json:"alias,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *LndInfo) Reset()         { *m = LndInfo{} }
func (m *LndInfo) String() string { return proto.CompactTextString(m) }
func (*LndInfo) ProtoMessage()    {}
func (*LndInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{38}
}

func (m *LndInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LndInfo.Unmarshal(m, b)
}
func (m *LndInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LndInfo.Marshal(b, m, deterministic)
}
func (m *LndInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LndInfo.Merge(m, src)
}
func (m *LndInfo) XXX_Size() int {
	return xxx_messageInfo_LndInfo.Size(m)
}
func (m *LndInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LndInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LndInfo proto.InternalMessageInfo

func (m *LndInfo) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *LndInfo) GetChannels() *Channels {
	if m != nil {
		return m.Channels
	}
	return nil
}

func (m *LndInfo) GetChains() []*Chain {
	if m != nil {
		return m.Chains
	}
	return nil
}

func (m *LndInfo) GetBlockheight() uint32 {
	if m != nil {
		return m.Blockheight
	}
	return 0
}

func (m *LndInfo) GetUris() []string {
	if m != nil {
		return m.Uris
	}
	return nil
}

func (m *LndInfo) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *LndInfo) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

type NodeIdentifier struct {
	// The pub key of this node
	NodePubKey string `protobuf:"bytes,1,opt,name=node_pub_key,proto3" json:"node_pub_key,omitempty"`
	// An alias for this node deterministically generated from the pub key
	Alias                string   `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeIdentifier) Reset()         { *m = NodeIdentifier{} }
func (m *NodeIdentifier) String() string { return proto.CompactTextString(m) }
func (*NodeIdentifier) ProtoMessage()    {}
func (*NodeIdentifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{39}
}

func (m *NodeIdentifier) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeIdentifier.Unmarshal(m, b)
}
func (m *NodeIdentifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeIdentifier.Marshal(b, m, deterministic)
}
func (m *NodeIdentifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeIdentifier.Merge(m, src)
}
func (m *NodeIdentifier) XXX_Size() int {
	return xxx_messageInfo_NodeIdentifier.Size(m)
}
func (m *NodeIdentifier) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeIdentifier.DiscardUnknown(m)
}

var xxx_messageInfo_NodeIdentifier proto.InternalMessageInfo

func (m *NodeIdentifier) GetNodePubKey() string {
	if m != nil {
		return m.NodePubKey
	}
	return ""
}

func (m *NodeIdentifier) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

type OpenChannelRequest struct {
	// The node pub key or alias of the peer with which to open channel with.
	NodeIdentifier string `protobuf:"bytes,1,opt,name=node_identifier,proto3" json:"node_identifier,omitempty"`
	// The ticker symbol of the currency to open the channel for.
	Currency string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	// The amount to be deposited into the channel denominated in satoshis.
	Amount uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// The balance amount to be pushed to the remote side of the channel denominated in satoshis.
	PushAmount uint64 `protobuf:"varint,4,opt,name=push_amount,proto3" json:"push_amount,omitempty"`
	// The manual fee rate set in sat/byte that should be used when crafting the funding transaction in the channel.
	Fee                  uint64   `protobuf:"varint,5,opt,name=fee,proto3" json:"fee,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OpenChannelRequest) Reset()         { *m = OpenChannelRequest{} }
func (m *OpenChannelRequest) String() string { return proto.CompactTextString(m) }
func (*OpenChannelRequest) ProtoMessage()    {}
func (*OpenChannelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{40}
}

func (m *OpenChannelRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpenChannelRequest.Unmarshal(m, b)
}
func (m *OpenChannelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpenChannelRequest.Marshal(b, m, deterministic)
}
func (m *OpenChannelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenChannelRequest.Merge(m, src)
}
func (m *OpenChannelRequest) XXX_Size() int {
	return xxx_messageInfo_OpenChannelRequest.Size(m)
}
func (m *OpenChannelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenChannelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OpenChannelRequest proto.InternalMessageInfo

func (m *OpenChannelRequest) GetNodeIdentifier() string {
	if m != nil {
		return m.NodeIdentifier
	}
	return ""
}

func (m *OpenChannelRequest) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *OpenChannelRequest) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *OpenChannelRequest) GetPushAmount() uint64 {
	if m != nil {
		return m.PushAmount
	}
	return 0
}

func (m *OpenChannelRequest) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

type OpenChannelResponse struct {
	// The id of the transaction that opened the channel.
	TransactionId        string   `protobuf:"bytes,1,opt,name=transaction_id,proto3" json:"transaction_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OpenChannelResponse) Reset()         { *m = OpenChannelResponse{} }
func (m *OpenChannelResponse) String() string { return proto.CompactTextString(m) }
func (*OpenChannelResponse) ProtoMessage()    {}
func (*OpenChannelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{41}
}

func (m *OpenChannelResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpenChannelResponse.Unmarshal(m, b)
}
func (m *OpenChannelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpenChannelResponse.Marshal(b, m, deterministic)
}
func (m *OpenChannelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenChannelResponse.Merge(m, src)
}
func (m *OpenChannelResponse) XXX_Size() int {
	return xxx_messageInfo_OpenChannelResponse.Size(m)
}
func (m *OpenChannelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenChannelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OpenChannelResponse proto.InternalMessageInfo

func (m *OpenChannelResponse) GetTransactionId() string {
	if m != nil {
		return m.TransactionId
	}
	return ""
}

type Order struct {
	// The price of the order.
	Price float64 `protobuf:"fixed64,1,opt,name=price,proto3" json:"price,omitempty"`
	// The quantity of the order in satoshis.
	Quantity uint64 `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// The trading pair that this order is for.
	PairId string `protobuf:"bytes,3,opt,name=pair_id,proto3" json:"pair_id,omitempty"`
	// A UUID for this order.
	Id string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	// The identifier of the node that created this order.
	NodeIdentifier *NodeIdentifier `protobuf:"bytes,5,opt,name=node_identifier,proto3" json:"node_identifier,omitempty"`
	// The local id for this order, if applicable.
	LocalId string `protobuf:"bytes,6,opt,name=local_id,proto3" json:"local_id,omitempty"`
	// The epoch time in milliseconds when this order was created.
	CreatedAt uint64 `protobuf:"varint,7,opt,name=created_at,proto3" json:"created_at,omitempty"`
	// Whether this order is a buy or sell
	Side OrderSide `protobuf:"varint,8,opt,name=side,proto3,enum=xudrpc.OrderSide" json:"side,omitempty"`
	// Whether this order is a local own order or a remote peer order.
	IsOwnOrder bool `protobuf:"varint,9,opt,name=is_own_order,proto3" json:"is_own_order,omitempty"`
	// The quantity on hold pending swap execution.
	Hold                 uint64   `protobuf:"varint,10,opt,name=hold,proto3" json:"hold,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Order) Reset()         { *m = Order{} }
func (m *Order) String() string { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()    {}
func (*Order) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{42}
}

func (m *Order) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Order.Unmarshal(m, b)
}
func (m *Order) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Order.Marshal(b, m, deterministic)
}
func (m *Order) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Order.Merge(m, src)
}
func (m *Order) XXX_Size() int {
	return xxx_messageInfo_Order.Size(m)
}
func (m *Order) XXX_DiscardUnknown() {
	xxx_messageInfo_Order.DiscardUnknown(m)
}

var xxx_messageInfo_Order proto.InternalMessageInfo

func (m *Order) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Order) GetQuantity() uint64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *Order) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

func (m *Order) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Order) GetNodeIdentifier() *NodeIdentifier {
	if m != nil {
		return m.NodeIdentifier
	}
	return nil
}

func (m *Order) GetLocalId() string {
	if m != nil {
		return m.LocalId
	}
	return ""
}

func (m *Order) GetCreatedAt() uint64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Order) GetSide() OrderSide {
	if m != nil {
		return m.Side
	}
	return OrderSide_BUY
}

func (m *Order) GetIsOwnOrder() bool {
	if m != nil {
		return m.IsOwnOrder
	}
	return false
}

func (m *Order) GetHold() uint64 {
	if m != nil {
		return m.Hold
	}
	return 0
}

type OrderBookRequest struct {
	// The trading pair for which to retrieve orders.
	PairId string `protobuf:"bytes,1,opt,name=pair_id,json=pairId,proto3" json:"pair_id,omitempty"`
	// The number of digits to the right of the decimal point for each price bucket. A negative
	// number rounds digits to the left of the decimal point, e.g. -2 would round to the hundreds place.
	Precision int32 `protobuf:"varint,2,opt,name=precision,proto3" json:"precision,omitempty"`
	// The maximum number of price "buckets" to return, if zero or unspecified then no limit is imposed.
	Limit                uint32   `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrderBookRequest) Reset()         { *m = OrderBookRequest{} }
func (m *OrderBookRequest) String() string { return proto.CompactTextString(m) }
func (*OrderBookRequest) ProtoMessage()    {}
func (*OrderBookRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{43}
}

func (m *OrderBookRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderBookRequest.Unmarshal(m, b)
}
func (m *OrderBookRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderBookRequest.Marshal(b, m, deterministic)
}
func (m *OrderBookRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderBookRequest.Merge(m, src)
}
func (m *OrderBookRequest) XXX_Size() int {
	return xxx_messageInfo_OrderBookRequest.Size(m)
}
func (m *OrderBookRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderBookRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OrderBookRequest proto.InternalMessageInfo

func (m *OrderBookRequest) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

func (m *OrderBookRequest) GetPrecision() int32 {
	if m != nil {
		return m.Precision
	}
	return 0
}

func (m *OrderBookRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type OrderBookResponse struct {
	// A map between currency tickers and sorted lists of order buckets
	Buckets              map[string]*OrderBookResponse_Buckets `protobuf:"bytes,1,rep,name=buckets,proto3" json:"buckets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *OrderBookResponse) Reset()         { *m = OrderBookResponse{} }
func (m *OrderBookResponse) String() string { return proto.CompactTextString(m) }
func (*OrderBookResponse) ProtoMessage()    {}
func (*OrderBookResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{44}
}

func (m *OrderBookResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderBookResponse.Unmarshal(m, b)
}
func (m *OrderBookResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderBookResponse.Marshal(b, m, deterministic)
}
func (m *OrderBookResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderBookResponse.Merge(m, src)
}
func (m *OrderBookResponse) XXX_Size() int {
	return xxx_messageInfo_OrderBookResponse.Size(m)
}
func (m *OrderBookResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderBookResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OrderBookResponse proto.InternalMessageInfo

func (m *OrderBookResponse) GetBuckets() map[string]*OrderBookResponse_Buckets {
	if m != nil {
		return m.Buckets
	}
	return nil
}

type OrderBookResponse_Bucket struct {
	// The rounded price of the bucket.
	Price float64 `protobuf:"fixed64,1,opt,name=price,proto3" json:"price,omitempty"`
	// The total quantity for all orders that fall into this bucket.
	Quantity             uint64   `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrderBookResponse_Bucket) Reset()         { *m = OrderBookResponse_Bucket{} }
func (m *OrderBookResponse_Bucket) String() string { return proto.CompactTextString(m) }
func (*OrderBookResponse_Bucket) ProtoMessage()    {}
func (*OrderBookResponse_Bucket) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{44, 0}
}

func (m *OrderBookResponse_Bucket) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderBookResponse_Bucket.Unmarshal(m, b)
}
func (m *OrderBookResponse_Bucket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderBookResponse_Bucket.Marshal(b, m, deterministic)
}
func (m *OrderBookResponse_Bucket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderBookResponse_Bucket.Merge(m, src)
}
func (m *OrderBookResponse_Bucket) XXX_Size() int {
	return xxx_messageInfo_OrderBookResponse_Bucket.Size(m)
}
func (m *OrderBookResponse_Bucket) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderBookResponse_Bucket.DiscardUnknown(m)
}

var xxx_messageInfo_OrderBookResponse_Bucket proto.InternalMessageInfo

func (m *OrderBookResponse_Bucket) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *OrderBookResponse_Bucket) GetQuantity() uint64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

type OrderBookResponse_Buckets struct {
	// A sorted list of buckets for sell orders
	SellBuckets []*OrderBookResponse_Bucket `protobuf:"bytes,1,rep,name=sell_buckets,json=sellBuckets,proto3" json:"sell_buckets,omitempty"`
	// A sorted list of buckets for buy orders.
	BuyBuckets           []*OrderBookResponse_Bucket `protobuf:"bytes,2,rep,name=buy_buckets,json=buyBuckets,proto3" json:"buy_buckets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *OrderBookResponse_Buckets) Reset()         { *m = OrderBookResponse_Buckets{} }
func (m *OrderBookResponse_Buckets) String() string { return proto.CompactTextString(m) }
func (*OrderBookResponse_Buckets) ProtoMessage()    {}
func (*OrderBookResponse_Buckets) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{44, 1}
}

func (m *OrderBookResponse_Buckets) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderBookResponse_Buckets.Unmarshal(m, b)
}
func (m *OrderBookResponse_Buckets) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderBookResponse_Buckets.Marshal(b, m, deterministic)
}
func (m *OrderBookResponse_Buckets) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderBookResponse_Buckets.Merge(m, src)
}
func (m *OrderBookResponse_Buckets) XXX_Size() int {
	return xxx_messageInfo_OrderBookResponse_Buckets.Size(m)
}
func (m *OrderBookResponse_Buckets) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderBookResponse_Buckets.DiscardUnknown(m)
}

var xxx_messageInfo_OrderBookResponse_Buckets proto.InternalMessageInfo

func (m *OrderBookResponse_Buckets) GetSellBuckets() []*OrderBookResponse_Bucket {
	if m != nil {
		return m.SellBuckets
	}
	return nil
}

func (m *OrderBookResponse_Buckets) GetBuyBuckets() []*OrderBookResponse_Bucket {
	if m != nil {
		return m.BuyBuckets
	}
	return nil
}

type OrderRemoval struct {
	// The quantity removed from the order.
	Quantity uint64 `protobuf:"varint,1,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// The trading pair that the order is for.
	PairId string `protobuf:"bytes,2,opt,name=pair_id,proto3" json:"pair_id,omitempty"`
	// The global UUID for the order.
	OrderId string `protobuf:"bytes,3,opt,name=order_id,proto3" json:"order_id,omitempty"`
	// The local id for the order, if applicable.
	LocalId string `protobuf:"bytes,4,opt,name=local_id,proto3" json:"local_id,omitempty"`
	// Whether the order being removed is a local own order or a remote peer order.
	IsOwnOrder           bool     `protobuf:"varint,5,opt,name=is_own_order,proto3" json:"is_own_order,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrderRemoval) Reset()         { *m = OrderRemoval{} }
func (m *OrderRemoval) String() string { return proto.CompactTextString(m) }
func (*OrderRemoval) ProtoMessage()    {}
func (*OrderRemoval) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{45}
}

func (m *OrderRemoval) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderRemoval.Unmarshal(m, b)
}
func (m *OrderRemoval) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderRemoval.Marshal(b, m, deterministic)
}
func (m *OrderRemoval) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderRemoval.Merge(m, src)
}
func (m *OrderRemoval) XXX_Size() int {
	return xxx_messageInfo_OrderRemoval.Size(m)
}
func (m *OrderRemoval) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderRemoval.DiscardUnknown(m)
}

var xxx_messageInfo_OrderRemoval proto.InternalMessageInfo

func (m *OrderRemoval) GetQuantity() uint64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *OrderRemoval) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

func (m *OrderRemoval) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *OrderRemoval) GetLocalId() string {
	if m != nil {
		return m.LocalId
	}
	return ""
}

func (m *OrderRemoval) GetIsOwnOrder() bool {
	if m != nil {
		return m.IsOwnOrder
	}
	return false
}

type Orders struct {
	// A list of buy orders sorted by descending price.
	BuyOrders []*Order `protobuf:"bytes,1,rep,name=buy_orders,proto3" json:"buy_orders,omitempty"`
	// A list of sell orders sorted by ascending price.
	SellOrders           []*Order `protobuf:"bytes,2,rep,name=sell_orders,proto3" json:"sell_orders,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Orders) Reset()         { *m = Orders{} }
func (m *Orders) String() string { return proto.CompactTextString(m) }
func (*Orders) ProtoMessage()    {}
func (*Orders) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{46}
}

func (m *Orders) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Orders.Unmarshal(m, b)
}
func (m *Orders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Orders.Marshal(b, m, deterministic)
}
func (m *Orders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Orders.Merge(m, src)
}
func (m *Orders) XXX_Size() int {
	return xxx_messageInfo_Orders.Size(m)
}
func (m *Orders) XXX_DiscardUnknown() {
	xxx_messageInfo_Orders.DiscardUnknown(m)
}

var xxx_messageInfo_Orders proto.InternalMessageInfo

func (m *Orders) GetBuyOrders() []*Order {
	if m != nil {
		return m.BuyOrders
	}
	return nil
}

func (m *Orders) GetSellOrders() []*Order {
	if m != nil {
		return m.SellOrders
	}
	return nil
}

type OrdersCount struct {
	// The number of orders belonging to remote xud nodes.
	Peer uint32 `protobuf:"varint,1,opt,name=peer,proto3" json:"peer,omitempty"`
	// The number of orders belonging to our local xud node.
	Own                  uint32   `protobuf:"varint,2,opt,name=own,proto3" json:"own,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrdersCount) Reset()         { *m = OrdersCount{} }
func (m *OrdersCount) String() string { return proto.CompactTextString(m) }
func (*OrdersCount) ProtoMessage()    {}
func (*OrdersCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{47}
}

func (m *OrdersCount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrdersCount.Unmarshal(m, b)
}
func (m *OrdersCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrdersCount.Marshal(b, m, deterministic)
}
func (m *OrdersCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrdersCount.Merge(m, src)
}
func (m *OrdersCount) XXX_Size() int {
	return xxx_messageInfo_OrdersCount.Size(m)
}
func (m *OrdersCount) XXX_DiscardUnknown() {
	xxx_messageInfo_OrdersCount.DiscardUnknown(m)
}

var xxx_messageInfo_OrdersCount proto.InternalMessageInfo

func (m *OrdersCount) GetPeer() uint32 {
	if m != nil {
		return m.Peer
	}
	return 0
}

func (m *OrdersCount) GetOwn() uint32 {
	if m != nil {
		return m.Own
	}
	return 0
}

type OrderUpdate struct {
	// Types that are valid to be assigned to OrderUpdate:
	//	*OrderUpdate_Order
	//	*OrderUpdate_OrderRemoval
	OrderUpdate          isOrderUpdate_OrderUpdate `protobuf_oneof:"order_update"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *OrderUpdate) Reset()         { *m = OrderUpdate{} }
func (m *OrderUpdate) String() string { return proto.CompactTextString(m) }
func (*OrderUpdate) ProtoMessage()    {}
func (*OrderUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{48}
}

func (m *OrderUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderUpdate.Unmarshal(m, b)
}
func (m *OrderUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderUpdate.Marshal(b, m, deterministic)
}
func (m *OrderUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderUpdate.Merge(m, src)
}
func (m *OrderUpdate) XXX_Size() int {
	return xxx_messageInfo_OrderUpdate.Size(m)
}
func (m *OrderUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_OrderUpdate proto.InternalMessageInfo

type isOrderUpdate_OrderUpdate interface {
	isOrderUpdate_OrderUpdate()
}

type OrderUpdate_Order struct {
	Order *Order `protobuf:"bytes,1,opt,name=order,proto3,oneof"`
}

type OrderUpdate_OrderRemoval struct {
	OrderRemoval *OrderRemoval `protobuf:"bytes,2,opt,name=order_removal,proto3,oneof"`
}

func (*OrderUpdate_Order) isOrderUpdate_OrderUpdate() {}

func (*OrderUpdate_OrderRemoval) isOrderUpdate_OrderUpdate() {}

func (m *OrderUpdate) GetOrderUpdate() isOrderUpdate_OrderUpdate {
	if m != nil {
		return m.OrderUpdate
	}
	return nil
}

func (m *OrderUpdate) GetOrder() *Order {
	if x, ok := m.GetOrderUpdate().(*OrderUpdate_Order); ok {
		return x.Order
	}
	return nil
}

func (m *OrderUpdate) GetOrderRemoval() *OrderRemoval {
	if x, ok := m.GetOrderUpdate().(*OrderUpdate_OrderRemoval); ok {
		return x.OrderRemoval
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*OrderUpdate) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*OrderUpdate_Order)(nil),
		(*OrderUpdate_OrderRemoval)(nil),
	}
}

type Peer struct {
	// The socket address with host and port for this peer.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// The node pub key to uniquely identify this peer.
	NodePubKey string `protobuf:"bytes,2,opt,name=node_pub_key,proto3" json:"node_pub_key,omitempty"`
	// A map of ticker symbols to lnd pub keys for this peer
	LndPubKeys map[string]string `protobuf:"bytes,3,rep,name=lnd_pub_keys,proto3" json:"lnd_pub_keys,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Indicates whether this peer was connected inbound.
	Inbound bool `protobuf:"varint,4,opt,name=inbound,proto3" json:"inbound,omitempty"`
	// A list of trading pair tickers supported by this peer.
	Pairs []string `protobuf:"bytes,5,rep,name=pairs,proto3" json:"pairs,omitempty"`
	// The version of xud being used by the peer.
	XudVersion string `protobuf:"bytes,6,opt,name=xud_version,proto3" json:"xud_version,omitempty"`
	// The time in seconds that we have been connected to this peer.
	SecondsConnected uint32 `protobuf:"varint,7,opt,name=seconds_connected,proto3" json:"seconds_connected,omitempty"`
	// The alias for this peer's public key
	Alias   string          `protobuf:"bytes,9,opt,name=alias,proto3" json:"alias,omitempty"`
	LndUris []*Peer_LndUris `protobuf:"bytes,10,rep,name=lnd_uris,proto3" json:"lnd_uris,omitempty"`
	// The connext identifier for this peer
	ConnextIdentifier    string   `protobuf:"bytes,11,opt,name=connext_identifier,proto3" json:"connext_identifier,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Peer) Reset()         { *m = Peer{} }
func (m *Peer) String() string { return proto.CompactTextString(m) }
func (*Peer) ProtoMessage()    {}
func (*Peer) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{49}
}

func (m *Peer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Peer.Unmarshal(m, b)
}
func (m *Peer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Peer.Marshal(b, m, deterministic)
}
func (m *Peer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Peer.Merge(m, src)
}
func (m *Peer) XXX_Size() int {
	return xxx_messageInfo_Peer.Size(m)
}
func (m *Peer) XXX_DiscardUnknown() {
	xxx_messageInfo_Peer.DiscardUnknown(m)
}

var xxx_messageInfo_Peer proto.InternalMessageInfo

func (m *Peer) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Peer) GetNodePubKey() string {
	if m != nil {
		return m.NodePubKey
	}
	return ""
}

func (m *Peer) GetLndPubKeys() map[string]string {
	if m != nil {
		return m.LndPubKeys
	}
	return nil
}

func (m *Peer) GetInbound() bool {
	if m != nil {
		return m.Inbound
	}
	return false
}

func (m *Peer) GetPairs() []string {
	if m != nil {
		return m.Pairs
	}
	return nil
}

func (m *Peer) GetXudVersion() string {
	if m != nil {
		return m.XudVersion
	}
	return ""
}

func (m *Peer) GetSecondsConnected() uint32 {
	if m != nil {
		return m.SecondsConnected
	}
	return 0
}

func (m *Peer) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

func (m *Peer) GetLndUris() []*Peer_LndUris {
	if m != nil {
		return m.LndUris
	}
	return nil
}

func (m *Peer) GetConnextIdentifier() string {
	if m != nil {
		return m.ConnextIdentifier
	}
	return ""
}

// A map of ticker symbols to lnd uris for this peer
type Peer_LndUris struct {
	Currency             string   `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`
	Uri                  []string `protobuf:"bytes,2,rep,name=uri,proto3" json:"uri,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Peer_LndUris) Reset()         { *m = Peer_LndUris{} }
func (m *Peer_LndUris) String() string { return proto.CompactTextString(m) }
func (*Peer_LndUris) ProtoMessage()    {}
func (*Peer_LndUris) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{49, 1}
}

func (m *Peer_LndUris) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Peer_LndUris.Unmarshal(m, b)
}
func (m *Peer_LndUris) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Peer_LndUris.Marshal(b, m, deterministic)
}
func (m *Peer_LndUris) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Peer_LndUris.Merge(m, src)
}
func (m *Peer_LndUris) XXX_Size() int {
	return xxx_messageInfo_Peer_LndUris.Size(m)
}
func (m *Peer_LndUris) XXX_DiscardUnknown() {
	xxx_messageInfo_Peer_LndUris.DiscardUnknown(m)
}

var xxx_messageInfo_Peer_LndUris proto.InternalMessageInfo

func (m *Peer_LndUris) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *Peer_LndUris) GetUri() []string {
	if m != nil {
		return m.Uri
	}
	return nil
}

type PlaceOrderRequest struct {
	// The price of the order.
	Price float64 `protobuf:"fixed64,1,opt,name=price,proto3" json:"price,omitempty"`
	// The quantity of the order denominated in satoshis.
	Quantity uint64 `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// The trading pair that the order is for.
	PairId string `protobuf:"bytes,3,opt,name=pair_id,proto3" json:"pair_id,omitempty"`
	// The local id to assign to the order.
	OrderId string `protobuf:"bytes,4,opt,name=order_id,proto3" json:"order_id,omitempty"`
	// Whether the order is a buy or sell.
	Side OrderSide `protobuf:"varint,5,opt,name=side,proto3,enum=xudrpc.OrderSide" json:"side,omitempty"`
	// The local id of an existing order to be replaced. If provided, the order must be successfully
	// found and removed before the new order is placed, otherwise an error is returned.
	ReplaceOrderId string `protobuf:"bytes,6,opt,name=replace_order_id,proto3" json:"replace_order_id,omitempty"`
	// Whether the order must be filled immediately and not allowed to enter the order book.
	ImmediateOrCancel    bool     `protobuf:"varint,7,opt,name=immediate_or_cancel,proto3" json:"immediate_or_cancel,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlaceOrderRequest) Reset()         { *m = PlaceOrderRequest{} }
func (m *PlaceOrderRequest) String() string { return proto.CompactTextString(m) }
func (*PlaceOrderRequest) ProtoMessage()    {}
func (*PlaceOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{50}
}

func (m *PlaceOrderRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlaceOrderRequest.Unmarshal(m, b)
}
func (m *PlaceOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlaceOrderRequest.Marshal(b, m, deterministic)
}
func (m *PlaceOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlaceOrderRequest.Merge(m, src)
}
func (m *PlaceOrderRequest) XXX_Size() int {
	return xxx_messageInfo_PlaceOrderRequest.Size(m)
}
func (m *PlaceOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PlaceOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PlaceOrderRequest proto.InternalMessageInfo

func (m *PlaceOrderRequest) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *PlaceOrderRequest) GetQuantity() uint64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *PlaceOrderRequest) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

func (m *PlaceOrderRequest) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *PlaceOrderRequest) GetSide() OrderSide {
	if m != nil {
		return m.Side
	}
	return OrderSide_BUY
}

func (m *PlaceOrderRequest) GetReplaceOrderId() string {
	if m != nil {
		return m.ReplaceOrderId
	}
	return ""
}

func (m *PlaceOrderRequest) GetImmediateOrCancel() bool {
	if m != nil {
		return m.ImmediateOrCancel
	}
	return false
}

type PlaceOrderResponse struct {
	// A list of own orders (or portions thereof) that matched the newly placed order.
	InternalMatches []*Order `protobuf:"bytes,1,rep,name=internal_matches,proto3" json:"internal_matches,omitempty"`
	// A list of successful swaps of peer orders that matched the newly placed order.
	SwapSuccesses []*SwapSuccess `protobuf:"bytes,2,rep,name=swap_successes,proto3" json:"swap_successes,omitempty"`
	// The remaining portion of the order, after matches, that enters the order book.
	RemainingOrder *Order `protobuf:"bytes,3,opt,name=remaining_order,proto3" json:"remaining_order,omitempty"`
	// A list of swap attempts that failed.
	SwapFailures         []*SwapFailure `protobuf:"bytes,4,rep,name=swap_failures,proto3" json:"swap_failures,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PlaceOrderResponse) Reset()         { *m = PlaceOrderResponse{} }
func (m *PlaceOrderResponse) String() string { return proto.CompactTextString(m) }
func (*PlaceOrderResponse) ProtoMessage()    {}
func (*PlaceOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{51}
}

func (m *PlaceOrderResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlaceOrderResponse.Unmarshal(m, b)
}
func (m *PlaceOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlaceOrderResponse.Marshal(b, m, deterministic)
}
func (m *PlaceOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlaceOrderResponse.Merge(m, src)
}
func (m *PlaceOrderResponse) XXX_Size() int {
	return xxx_messageInfo_PlaceOrderResponse.Size(m)
}
func (m *PlaceOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PlaceOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PlaceOrderResponse proto.InternalMessageInfo

func (m *PlaceOrderResponse) GetInternalMatches() []*Order {
	if m != nil {
		return m.InternalMatches
	}
	return nil
}

func (m *PlaceOrderResponse) GetSwapSuccesses() []*SwapSuccess {
	if m != nil {
		return m.SwapSuccesses
	}
	return nil
}

func (m *PlaceOrderResponse) GetRemainingOrder() *Order {
	if m != nil {
		return m.RemainingOrder
	}
	return nil
}

func (m *PlaceOrderResponse) GetSwapFailures() []*SwapFailure {
	if m != nil {
		return m.SwapFailures
	}
	return nil
}

type PlaceOrderEvent struct {
	// Types that are valid to be assigned to Event:
	//	*PlaceOrderEvent_Match
	//	*PlaceOrderEvent_SwapSuccess
	//	*PlaceOrderEvent_RemainingOrder
	//	*PlaceOrderEvent_SwapFailure
	Event                isPlaceOrderEvent_Event `protobuf_oneof:"event"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *PlaceOrderEvent) Reset()         { *m = PlaceOrderEvent{} }
func (m *PlaceOrderEvent) String() string { return proto.CompactTextString(m) }
func (*PlaceOrderEvent) ProtoMessage()    {}
func (*PlaceOrderEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{52}
}

func (m *PlaceOrderEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlaceOrderEvent.Unmarshal(m, b)
}
func (m *PlaceOrderEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlaceOrderEvent.Marshal(b, m, deterministic)
}
func (m *PlaceOrderEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlaceOrderEvent.Merge(m, src)
}
func (m *PlaceOrderEvent) XXX_Size() int {
	return xxx_messageInfo_PlaceOrderEvent.Size(m)
}
func (m *PlaceOrderEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_PlaceOrderEvent.DiscardUnknown(m)
}

var xxx_messageInfo_PlaceOrderEvent proto.InternalMessageInfo

type isPlaceOrderEvent_Event interface {
	isPlaceOrderEvent_Event()
}

type PlaceOrderEvent_Match struct {
	Match *Order `protobuf:"bytes,1,opt,name=match,proto3,oneof"`
}

type PlaceOrderEvent_SwapSuccess struct {
	SwapSuccess *SwapSuccess `protobuf:"bytes,2,opt,name=swap_success,proto3,oneof"`
}

type PlaceOrderEvent_RemainingOrder struct {
	RemainingOrder *Order `protobuf:"bytes,3,opt,name=remaining_order,proto3,oneof"`
}

type PlaceOrderEvent_SwapFailure struct {
	SwapFailure *SwapFailure `protobuf:"bytes,4,opt,name=swap_failure,proto3,oneof"`
}

func (*PlaceOrderEvent_Match) isPlaceOrderEvent_Event() {}

func (*PlaceOrderEvent_SwapSuccess) isPlaceOrderEvent_Event() {}

func (*PlaceOrderEvent_RemainingOrder) isPlaceOrderEvent_Event() {}

func (*PlaceOrderEvent_SwapFailure) isPlaceOrderEvent_Event() {}

func (m *PlaceOrderEvent) GetEvent() isPlaceOrderEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *PlaceOrderEvent) GetMatch() *Order {
	if x, ok := m.GetEvent().(*PlaceOrderEvent_Match); ok {
		return x.Match
	}
	return nil
}

func (m *PlaceOrderEvent) GetSwapSuccess() *SwapSuccess {
	if x, ok := m.GetEvent().(*PlaceOrderEvent_SwapSuccess); ok {
		return x.SwapSuccess
	}
	return nil
}

func (m *PlaceOrderEvent) GetRemainingOrder() *Order {
	if x, ok := m.GetEvent().(*PlaceOrderEvent_RemainingOrder); ok {
		return x.RemainingOrder
	}
	return nil
}

func (m *PlaceOrderEvent) GetSwapFailure() *SwapFailure {
	if x, ok := m.GetEvent().(*PlaceOrderEvent_SwapFailure); ok {
		return x.SwapFailure
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PlaceOrderEvent) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PlaceOrderEvent_Match)(nil),
		(*PlaceOrderEvent_SwapSuccess)(nil),
		(*PlaceOrderEvent_RemainingOrder)(nil),
		(*PlaceOrderEvent_SwapFailure)(nil),
	}
}

type ConnextInfo struct {
	Status               string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Address              string   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Version              string   `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Chain                string   `protobuf:"bytes,5,opt,name=chain,proto3" json:"chain,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConnextInfo) Reset()         { *m = ConnextInfo{} }
func (m *ConnextInfo) String() string { return proto.CompactTextString(m) }
func (*ConnextInfo) ProtoMessage()    {}
func (*ConnextInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{53}
}

func (m *ConnextInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConnextInfo.Unmarshal(m, b)
}
func (m *ConnextInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConnextInfo.Marshal(b, m, deterministic)
}
func (m *ConnextInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnextInfo.Merge(m, src)
}
func (m *ConnextInfo) XXX_Size() int {
	return xxx_messageInfo_ConnextInfo.Size(m)
}
func (m *ConnextInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnextInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ConnextInfo proto.InternalMessageInfo

func (m *ConnextInfo) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ConnextInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ConnextInfo) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ConnextInfo) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

type RemoveCurrencyRequest struct {
	// The ticker symbol for this currency such as BTC, LTC, ETH, etc...
	Currency             string   `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveCurrencyRequest) Reset()         { *m = RemoveCurrencyRequest{} }
func (m *RemoveCurrencyRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveCurrencyRequest) ProtoMessage()    {}
func (*RemoveCurrencyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{54}
}

func (m *RemoveCurrencyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveCurrencyRequest.Unmarshal(m, b)
}
func (m *RemoveCurrencyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveCurrencyRequest.Marshal(b, m, deterministic)
}
func (m *RemoveCurrencyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveCurrencyRequest.Merge(m, src)
}
func (m *RemoveCurrencyRequest) XXX_Size() int {
	return xxx_messageInfo_RemoveCurrencyRequest.Size(m)
}
func (m *RemoveCurrencyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveCurrencyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveCurrencyRequest proto.InternalMessageInfo

func (m *RemoveCurrencyRequest) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

type RemoveCurrencyResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveCurrencyResponse) Reset()         { *m = RemoveCurrencyResponse{} }
func (m *RemoveCurrencyResponse) String() string { return proto.CompactTextString(m) }
func (*RemoveCurrencyResponse) ProtoMessage()    {}
func (*RemoveCurrencyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{55}
}

func (m *RemoveCurrencyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveCurrencyResponse.Unmarshal(m, b)
}
func (m *RemoveCurrencyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveCurrencyResponse.Marshal(b, m, deterministic)
}
func (m *RemoveCurrencyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveCurrencyResponse.Merge(m, src)
}
func (m *RemoveCurrencyResponse) XXX_Size() int {
	return xxx_messageInfo_RemoveCurrencyResponse.Size(m)
}
func (m *RemoveCurrencyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveCurrencyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveCurrencyResponse proto.InternalMessageInfo

type RemoveOrderRequest struct {
	// The local id of the order to remove.
	OrderId string `protobuf:"bytes,1,opt,name=order_id,proto3" json:"order_id,omitempty"`
	// The quantity to remove from the order denominated in satoshis.
	// If zero or unspecified then the entire order is removed.
	Quantity             uint64   `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveOrderRequest) Reset()         { *m = RemoveOrderRequest{} }
func (m *RemoveOrderRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveOrderRequest) ProtoMessage()    {}
func (*RemoveOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{56}
}

func (m *RemoveOrderRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveOrderRequest.Unmarshal(m, b)
}
func (m *RemoveOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveOrderRequest.Marshal(b, m, deterministic)
}
func (m *RemoveOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveOrderRequest.Merge(m, src)
}
func (m *RemoveOrderRequest) XXX_Size() int {
	return xxx_messageInfo_RemoveOrderRequest.Size(m)
}
func (m *RemoveOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveOrderRequest proto.InternalMessageInfo

func (m *RemoveOrderRequest) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *RemoveOrderRequest) GetQuantity() uint64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

type RemoveOrderResponse struct {
	// Any portion of the order that was on hold due to ongoing swaps at the time of the request
	// and could not be removed until after the swaps finish.
	QuantityOnHold uint64 `protobuf:"varint,1,opt,name=quantity_on_hold,json=hold,proto3" json:"quantity_on_hold,omitempty"`
	// Remaining portion of the order if it was a partial removal.
	RemainingQuantity uint64 `protobuf:"varint,2,opt,name=remaining_quantity,proto3" json:"remaining_quantity,omitempty"`
	// Successfully removed portion of the order.
	RemovedQuantity uint64 `protobuf:"varint,3,opt,name=removed_quantity,proto3" json:"removed_quantity,omitempty"`
	// Removed order's pairId. (e.g. ETH/BTC)
	PairId               string   `protobuf:"bytes,4,opt,name=pair_id,proto3" json:"pair_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveOrderResponse) Reset()         { *m = RemoveOrderResponse{} }
func (m *RemoveOrderResponse) String() string { return proto.CompactTextString(m) }
func (*RemoveOrderResponse) ProtoMessage()    {}
func (*RemoveOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{57}
}

func (m *RemoveOrderResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveOrderResponse.Unmarshal(m, b)
}
func (m *RemoveOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveOrderResponse.Marshal(b, m, deterministic)
}
func (m *RemoveOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveOrderResponse.Merge(m, src)
}
func (m *RemoveOrderResponse) XXX_Size() int {
	return xxx_messageInfo_RemoveOrderResponse.Size(m)
}
func (m *RemoveOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveOrderResponse proto.InternalMessageInfo

func (m *RemoveOrderResponse) GetQuantityOnHold() uint64 {
	if m != nil {
		return m.QuantityOnHold
	}
	return 0
}

func (m *RemoveOrderResponse) GetRemainingQuantity() uint64 {
	if m != nil {
		return m.RemainingQuantity
	}
	return 0
}

func (m *RemoveOrderResponse) GetRemovedQuantity() uint64 {
	if m != nil {
		return m.RemovedQuantity
	}
	return 0
}

func (m *RemoveOrderResponse) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

type RemoveAllOrdersRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveAllOrdersRequest) Reset()         { *m = RemoveAllOrdersRequest{} }
func (m *RemoveAllOrdersRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveAllOrdersRequest) ProtoMessage()    {}
func (*RemoveAllOrdersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{58}
}

func (m *RemoveAllOrdersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveAllOrdersRequest.Unmarshal(m, b)
}
func (m *RemoveAllOrdersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveAllOrdersRequest.Marshal(b, m, deterministic)
}
func (m *RemoveAllOrdersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveAllOrdersRequest.Merge(m, src)
}
func (m *RemoveAllOrdersRequest) XXX_Size() int {
	return xxx_messageInfo_RemoveAllOrdersRequest.Size(m)
}
func (m *RemoveAllOrdersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveAllOrdersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveAllOrdersRequest proto.InternalMessageInfo

type RemoveAllOrdersResponse struct {
	// The local order ids that were successfully removed.
	RemovedOrderIds []string `protobuf:"bytes,1,rep,name=removed_order_ids,proto3" json:"removed_order_ids,omitempty"`
	// The local order ids that were on hold and failed to be removed.
	OnHoldOrderIds       []string `protobuf:"bytes,2,rep,name=on_hold_order_ids,proto3" json:"on_hold_order_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveAllOrdersResponse) Reset()         { *m = RemoveAllOrdersResponse{} }
func (m *RemoveAllOrdersResponse) String() string { return proto.CompactTextString(m) }
func (*RemoveAllOrdersResponse) ProtoMessage()    {}
func (*RemoveAllOrdersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{59}
}

func (m *RemoveAllOrdersResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveAllOrdersResponse.Unmarshal(m, b)
}
func (m *RemoveAllOrdersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveAllOrdersResponse.Marshal(b, m, deterministic)
}
func (m *RemoveAllOrdersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveAllOrdersResponse.Merge(m, src)
}
func (m *RemoveAllOrdersResponse) XXX_Size() int {
	return xxx_messageInfo_RemoveAllOrdersResponse.Size(m)
}
func (m *RemoveAllOrdersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveAllOrdersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveAllOrdersResponse proto.InternalMessageInfo

func (m *RemoveAllOrdersResponse) GetRemovedOrderIds() []string {
	if m != nil {
		return m.RemovedOrderIds
	}
	return nil
}

func (m *RemoveAllOrdersResponse) GetOnHoldOrderIds() []string {
	if m != nil {
		return m.OnHoldOrderIds
	}
	return nil
}

type RemovePairRequest struct {
	// The trading pair ticker to remove in a format such as "LTC/BTC".
	PairId               string   `protobuf:"bytes,1,opt,name=pair_id,proto3" json:"pair_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemovePairRequest) Reset()         { *m = RemovePairRequest{} }
func (m *RemovePairRequest) String() string { return proto.CompactTextString(m) }
func (*RemovePairRequest) ProtoMessage()    {}
func (*RemovePairRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{60}
}

func (m *RemovePairRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemovePairRequest.Unmarshal(m, b)
}
func (m *RemovePairRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemovePairRequest.Marshal(b, m, deterministic)
}
func (m *RemovePairRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemovePairRequest.Merge(m, src)
}
func (m *RemovePairRequest) XXX_Size() int {
	return xxx_messageInfo_RemovePairRequest.Size(m)
}
func (m *RemovePairRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemovePairRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemovePairRequest proto.InternalMessageInfo

func (m *RemovePairRequest) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

type RemovePairResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemovePairResponse) Reset()         { *m = RemovePairResponse{} }
func (m *RemovePairResponse) String() string { return proto.CompactTextString(m) }
func (*RemovePairResponse) ProtoMessage()    {}
func (*RemovePairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{61}
}

func (m *RemovePairResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemovePairResponse.Unmarshal(m, b)
}
func (m *RemovePairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemovePairResponse.Marshal(b, m, deterministic)
}
func (m *RemovePairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemovePairResponse.Merge(m, src)
}
func (m *RemovePairResponse) XXX_Size() int {
	return xxx_messageInfo_RemovePairResponse.Size(m)
}
func (m *RemovePairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemovePairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemovePairResponse proto.InternalMessageInfo

type RestoreNodeRequest struct {
	// The 24 word mnemonic to recover the xud identity key and underlying wallets
	SeedMnemonic []string `protobuf:"bytes,1,rep,name=seed_mnemonic,json=seedMnemonic,proto3" json:"seed_mnemonic,omitempty"`
	// The password in utf-8 with which to encrypt the restored xud node key as well
	// as any restored underlying wallets.
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	// A map between the currency of the LND and its multi channel SCB
	LndBackups map[string][]byte `protobuf:"bytes,3,rep,name=lnd_backups,json=lndBackups,proto3" json:"lnd_backups,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The XUD database backup
	XudDatabase          []byte   `protobuf:"bytes,6,opt,name=xud_database,json=xudDatabase,proto3" json:"xud_database,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RestoreNodeRequest) Reset()         { *m = RestoreNodeRequest{} }
func (m *RestoreNodeRequest) String() string { return proto.CompactTextString(m) }
func (*RestoreNodeRequest) ProtoMessage()    {}
func (*RestoreNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{62}
}

func (m *RestoreNodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RestoreNodeRequest.Unmarshal(m, b)
}
func (m *RestoreNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RestoreNodeRequest.Marshal(b, m, deterministic)
}
func (m *RestoreNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestoreNodeRequest.Merge(m, src)
}
func (m *RestoreNodeRequest) XXX_Size() int {
	return xxx_messageInfo_RestoreNodeRequest.Size(m)
}
func (m *RestoreNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RestoreNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RestoreNodeRequest proto.InternalMessageInfo

func (m *RestoreNodeRequest) GetSeedMnemonic() []string {
	if m != nil {
		return m.SeedMnemonic
	}
	return nil
}

func (m *RestoreNodeRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *RestoreNodeRequest) GetLndBackups() map[string][]byte {
	if m != nil {
		return m.LndBackups
	}
	return nil
}

func (m *RestoreNodeRequest) GetXudDatabase() []byte {
	if m != nil {
		return m.XudDatabase
	}
	return nil
}

type RestoreNodeResponse struct {
	// The list of lnd clients that were initialized.
	RestoredLnds []string `protobuf:"bytes,1,rep,name=restored_lnds,json=restoredLnds,proto3" json:"restored_lnds,omitempty"`
	// Whether the connext wallet was initialized.
	RestoredConnext      bool     `protobuf:"varint,2,opt,name=restored_connext,json=restoredConnext,proto3" json:"restored_connext,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RestoreNodeResponse) Reset()         { *m = RestoreNodeResponse{} }
func (m *RestoreNodeResponse) String() string { return proto.CompactTextString(m) }
func (*RestoreNodeResponse) ProtoMessage()    {}
func (*RestoreNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{63}
}

func (m *RestoreNodeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RestoreNodeResponse.Unmarshal(m, b)
}
func (m *RestoreNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RestoreNodeResponse.Marshal(b, m, deterministic)
}
func (m *RestoreNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestoreNodeResponse.Merge(m, src)
}
func (m *RestoreNodeResponse) XXX_Size() int {
	return xxx_messageInfo_RestoreNodeResponse.Size(m)
}
func (m *RestoreNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RestoreNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RestoreNodeResponse proto.InternalMessageInfo

func (m *RestoreNodeResponse) GetRestoredLnds() []string {
	if m != nil {
		return m.RestoredLnds
	}
	return nil
}

func (m *RestoreNodeResponse) GetRestoredConnext() bool {
	if m != nil {
		return m.RestoredConnext
	}
	return false
}

type SetLogLevelRequest struct {
	LogLevel             LogLevel `protobuf:"varint,1,opt,name=log_level,proto3,enum=xudrpc.LogLevel" json:"log_level,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetLogLevelRequest) Reset()         { *m = SetLogLevelRequest{} }
func (m *SetLogLevelRequest) String() string { return proto.CompactTextString(m) }
func (*SetLogLevelRequest) ProtoMessage()    {}
func (*SetLogLevelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{64}
}

func (m *SetLogLevelRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetLogLevelRequest.Unmarshal(m, b)
}
func (m *SetLogLevelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetLogLevelRequest.Marshal(b, m, deterministic)
}
func (m *SetLogLevelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetLogLevelRequest.Merge(m, src)
}
func (m *SetLogLevelRequest) XXX_Size() int {
	return xxx_messageInfo_SetLogLevelRequest.Size(m)
}
func (m *SetLogLevelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetLogLevelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetLogLevelRequest proto.InternalMessageInfo

func (m *SetLogLevelRequest) GetLogLevel() LogLevel {
	if m != nil {
		return m.LogLevel
	}
	return LogLevel_ALERT
}

type SetLogLevelResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetLogLevelResponse) Reset()         { *m = SetLogLevelResponse{} }
func (m *SetLogLevelResponse) String() string { return proto.CompactTextString(m) }
func (*SetLogLevelResponse) ProtoMessage()    {}
func (*SetLogLevelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{65}
}

func (m *SetLogLevelResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetLogLevelResponse.Unmarshal(m, b)
}
func (m *SetLogLevelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetLogLevelResponse.Marshal(b, m, deterministic)
}
func (m *SetLogLevelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetLogLevelResponse.Merge(m, src)
}
func (m *SetLogLevelResponse) XXX_Size() int {
	return xxx_messageInfo_SetLogLevelResponse.Size(m)
}
func (m *SetLogLevelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetLogLevelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetLogLevelResponse proto.InternalMessageInfo

type ShutdownRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShutdownRequest) Reset()         { *m = ShutdownRequest{} }
func (m *ShutdownRequest) String() string { return proto.CompactTextString(m) }
func (*ShutdownRequest) ProtoMessage()    {}
func (*ShutdownRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{66}
}

func (m *ShutdownRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShutdownRequest.Unmarshal(m, b)
}
func (m *ShutdownRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShutdownRequest.Marshal(b, m, deterministic)
}
func (m *ShutdownRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShutdownRequest.Merge(m, src)
}
func (m *ShutdownRequest) XXX_Size() int {
	return xxx_messageInfo_ShutdownRequest.Size(m)
}
func (m *ShutdownRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ShutdownRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ShutdownRequest proto.InternalMessageInfo

type ShutdownResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShutdownResponse) Reset()         { *m = ShutdownResponse{} }
func (m *ShutdownResponse) String() string { return proto.CompactTextString(m) }
func (*ShutdownResponse) ProtoMessage()    {}
func (*ShutdownResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{67}
}

func (m *ShutdownResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShutdownResponse.Unmarshal(m, b)
}
func (m *ShutdownResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShutdownResponse.Marshal(b, m, deterministic)
}
func (m *ShutdownResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShutdownResponse.Merge(m, src)
}
func (m *ShutdownResponse) XXX_Size() int {
	return xxx_messageInfo_ShutdownResponse.Size(m)
}
func (m *ShutdownResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ShutdownResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ShutdownResponse proto.InternalMessageInfo

type SubscribeOrdersRequest struct {
	// Whether to transmit all existing active orders upon establishing the stream.
	Existing             bool     `protobuf:"varint,1,opt,name=existing,proto3" json:"existing,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeOrdersRequest) Reset()         { *m = SubscribeOrdersRequest{} }
func (m *SubscribeOrdersRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeOrdersRequest) ProtoMessage()    {}
func (*SubscribeOrdersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{68}
}

func (m *SubscribeOrdersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeOrdersRequest.Unmarshal(m, b)
}
func (m *SubscribeOrdersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeOrdersRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeOrdersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeOrdersRequest.Merge(m, src)
}
func (m *SubscribeOrdersRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeOrdersRequest.Size(m)
}
func (m *SubscribeOrdersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeOrdersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeOrdersRequest proto.InternalMessageInfo

func (m *SubscribeOrdersRequest) GetExisting() bool {
	if m != nil {
		return m.Existing
	}
	return false
}

type SubscribeSwapsAcceptedRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeSwapsAcceptedRequest) Reset()         { *m = SubscribeSwapsAcceptedRequest{} }
func (m *SubscribeSwapsAcceptedRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeSwapsAcceptedRequest) ProtoMessage()    {}
func (*SubscribeSwapsAcceptedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{69}
}

func (m *SubscribeSwapsAcceptedRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeSwapsAcceptedRequest.Unmarshal(m, b)
}
func (m *SubscribeSwapsAcceptedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeSwapsAcceptedRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeSwapsAcceptedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeSwapsAcceptedRequest.Merge(m, src)
}
func (m *SubscribeSwapsAcceptedRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeSwapsAcceptedRequest.Size(m)
}
func (m *SubscribeSwapsAcceptedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeSwapsAcceptedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeSwapsAcceptedRequest proto.InternalMessageInfo

type SubscribeSwapsRequest struct {
	// Whether to include the results for swaps initiated via the PlaceOrder or ExecuteSwap calls.
	// These swap results are also returned in the responses for the respective calls.
	IncludeTaker         bool     `protobuf:"varint,1,opt,name=include_taker,proto3" json:"include_taker,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeSwapsRequest) Reset()         { *m = SubscribeSwapsRequest{} }
func (m *SubscribeSwapsRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeSwapsRequest) ProtoMessage()    {}
func (*SubscribeSwapsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{70}
}

func (m *SubscribeSwapsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeSwapsRequest.Unmarshal(m, b)
}
func (m *SubscribeSwapsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeSwapsRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeSwapsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeSwapsRequest.Merge(m, src)
}
func (m *SubscribeSwapsRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeSwapsRequest.Size(m)
}
func (m *SubscribeSwapsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeSwapsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeSwapsRequest proto.InternalMessageInfo

func (m *SubscribeSwapsRequest) GetIncludeTaker() bool {
	if m != nil {
		return m.IncludeTaker
	}
	return false
}

type SwapAccepted struct {
	// The global UUID for the order that was accepted to be swapped.
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// The local id for the order that was accepted to be swapped.
	LocalId string `protobuf:"bytes,2,opt,name=local_id,proto3" json:"local_id,omitempty"`
	// The trading pair that the swap is for.
	PairId string `protobuf:"bytes,3,opt,name=pair_id,proto3" json:"pair_id,omitempty"`
	// The order quantity that was accepted to be swapped.
	Quantity uint64 `protobuf:"varint,4,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// The price for the swap.
	Price float64 `protobuf:"fixed64,5,opt,name=price,proto3" json:"price,omitempty"`
	// The node pub key of the peer that executed this order.
	PeerPubKey string `protobuf:"bytes,6,opt,name=peer_pub_key,proto3" json:"peer_pub_key,omitempty"`
	// The hex-encoded payment hash for the swap.
	RHash string `protobuf:"bytes,7,opt,name=r_hash,proto3" json:"r_hash,omitempty"`
	// The amount received denominated in satoshis.
	AmountReceiving uint64 `protobuf:"varint,8,opt,name=amount_receiving,proto3" json:"amount_receiving,omitempty"`
	// The amount sent denominated in satoshis.
	AmountSending uint64 `protobuf:"varint,9,opt,name=amount_sending,proto3" json:"amount_sending,omitempty"`
	// The ticker symbol of the currency received.
	CurrencyReceiving string `protobuf:"bytes,10,opt,name=currency_receiving,proto3" json:"currency_receiving,omitempty"`
	// The ticker symbol of the currency sent.
	CurrencySending      string   `protobuf:"bytes,11,opt,name=currency_sending,proto3" json:"currency_sending,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SwapAccepted) Reset()         { *m = SwapAccepted{} }
func (m *SwapAccepted) String() string { return proto.CompactTextString(m) }
func (*SwapAccepted) ProtoMessage()    {}
func (*SwapAccepted) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{71}
}

func (m *SwapAccepted) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SwapAccepted.Unmarshal(m, b)
}
func (m *SwapAccepted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SwapAccepted.Marshal(b, m, deterministic)
}
func (m *SwapAccepted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwapAccepted.Merge(m, src)
}
func (m *SwapAccepted) XXX_Size() int {
	return xxx_messageInfo_SwapAccepted.Size(m)
}
func (m *SwapAccepted) XXX_DiscardUnknown() {
	xxx_messageInfo_SwapAccepted.DiscardUnknown(m)
}

var xxx_messageInfo_SwapAccepted proto.InternalMessageInfo

func (m *SwapAccepted) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *SwapAccepted) GetLocalId() string {
	if m != nil {
		return m.LocalId
	}
	return ""
}

func (m *SwapAccepted) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

func (m *SwapAccepted) GetQuantity() uint64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *SwapAccepted) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *SwapAccepted) GetPeerPubKey() string {
	if m != nil {
		return m.PeerPubKey
	}
	return ""
}

func (m *SwapAccepted) GetRHash() string {
	if m != nil {
		return m.RHash
	}
	return ""
}

func (m *SwapAccepted) GetAmountReceiving() uint64 {
	if m != nil {
		return m.AmountReceiving
	}
	return 0
}

func (m *SwapAccepted) GetAmountSending() uint64 {
	if m != nil {
		return m.AmountSending
	}
	return 0
}

func (m *SwapAccepted) GetCurrencyReceiving() string {
	if m != nil {
		return m.CurrencyReceiving
	}
	return ""
}

func (m *SwapAccepted) GetCurrencySending() string {
	if m != nil {
		return m.CurrencySending
	}
	return ""
}

type SwapFailure struct {
	// The global UUID for the order that failed the swap.
	OrderId string `protobuf:"bytes,1,opt,name=order_id,proto3" json:"order_id,omitempty"`
	// The trading pair that the swap is for.
	PairId string `protobuf:"bytes,2,opt,name=pair_id,proto3" json:"pair_id,omitempty"`
	// The order quantity that was attempted to be swapped.
	Quantity uint64 `protobuf:"varint,3,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// The node pub key of the peer that we attempted to swap with.
	PeerPubKey string `protobuf:"bytes,4,opt,name=peer_pub_key,proto3" json:"peer_pub_key,omitempty"`
	// The reason why the swap failed.
	FailureReason        string   `protobuf:"bytes,5,opt,name=failure_reason,proto3" json:"failure_reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SwapFailure) Reset()         { *m = SwapFailure{} }
func (m *SwapFailure) String() string { return proto.CompactTextString(m) }
func (*SwapFailure) ProtoMessage()    {}
func (*SwapFailure) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{72}
}

func (m *SwapFailure) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SwapFailure.Unmarshal(m, b)
}
func (m *SwapFailure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SwapFailure.Marshal(b, m, deterministic)
}
func (m *SwapFailure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwapFailure.Merge(m, src)
}
func (m *SwapFailure) XXX_Size() int {
	return xxx_messageInfo_SwapFailure.Size(m)
}
func (m *SwapFailure) XXX_DiscardUnknown() {
	xxx_messageInfo_SwapFailure.DiscardUnknown(m)
}

var xxx_messageInfo_SwapFailure proto.InternalMessageInfo

func (m *SwapFailure) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *SwapFailure) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

func (m *SwapFailure) GetQuantity() uint64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *SwapFailure) GetPeerPubKey() string {
	if m != nil {
		return m.PeerPubKey
	}
	return ""
}

func (m *SwapFailure) GetFailureReason() string {
	if m != nil {
		return m.FailureReason
	}
	return ""
}

type SwapSuccess struct {
	// The global UUID for the order that was swapped.
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// The local id for the order that was swapped.
	LocalId string `protobuf:"bytes,2,opt,name=local_id,proto3" json:"local_id,omitempty"`
	// The trading pair that the swap is for.
	PairId string `protobuf:"bytes,3,opt,name=pair_id,proto3" json:"pair_id,omitempty"`
	// The order quantity that was swapped.
	Quantity uint64 `protobuf:"varint,4,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// The hex-encoded payment hash for the swap.
	RHash string `protobuf:"bytes,5,opt,name=r_hash,proto3" json:"r_hash,omitempty"`
	// The amount received denominated in satoshis.
	AmountReceived uint64 `protobuf:"varint,8,opt,name=amount_received,proto3" json:"amount_received,omitempty"`
	// The amount sent denominated in satoshis.
	AmountSent uint64 `protobuf:"varint,9,opt,name=amount_sent,proto3" json:"amount_sent,omitempty"`
	// The node pub key of the peer that executed this order.
	PeerPubKey string `protobuf:"bytes,10,opt,name=peer_pub_key,proto3" json:"peer_pub_key,omitempty"`
	// Our role in the swap, either MAKER or TAKER.
	Role Role `protobuf:"varint,11,opt,name=role,proto3,enum=xudrpc.Role" json:"role,omitempty"`
	// The ticker symbol of the currency received.
	CurrencyReceived string `protobuf:"bytes,12,opt,name=currency_received,proto3" json:"currency_received,omitempty"`
	// The ticker symbol of the currency sent.
	CurrencySent string `protobuf:"bytes,13,opt,name=currency_sent,proto3" json:"currency_sent,omitempty"`
	// The hex-encoded preimage.
	RPreimage string `protobuf:"bytes,14,opt,name=r_preimage,proto3" json:"r_preimage,omitempty"`
	// The price used for the swap.
	Price                float64  `protobuf:"fixed64,15,opt,name=price,proto3" json:"price,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SwapSuccess) Reset()         { *m = SwapSuccess{} }
func (m *SwapSuccess) String() string { return proto.CompactTextString(m) }
func (*SwapSuccess) ProtoMessage()    {}
func (*SwapSuccess) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{73}
}

func (m *SwapSuccess) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SwapSuccess.Unmarshal(m, b)
}
func (m *SwapSuccess) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SwapSuccess.Marshal(b, m, deterministic)
}
func (m *SwapSuccess) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwapSuccess.Merge(m, src)
}
func (m *SwapSuccess) XXX_Size() int {
	return xxx_messageInfo_SwapSuccess.Size(m)
}
func (m *SwapSuccess) XXX_DiscardUnknown() {
	xxx_messageInfo_SwapSuccess.DiscardUnknown(m)
}

var xxx_messageInfo_SwapSuccess proto.InternalMessageInfo

func (m *SwapSuccess) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *SwapSuccess) GetLocalId() string {
	if m != nil {
		return m.LocalId
	}
	return ""
}

func (m *SwapSuccess) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

func (m *SwapSuccess) GetQuantity() uint64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *SwapSuccess) GetRHash() string {
	if m != nil {
		return m.RHash
	}
	return ""
}

func (m *SwapSuccess) GetAmountReceived() uint64 {
	if m != nil {
		return m.AmountReceived
	}
	return 0
}

func (m *SwapSuccess) GetAmountSent() uint64 {
	if m != nil {
		return m.AmountSent
	}
	return 0
}

func (m *SwapSuccess) GetPeerPubKey() string {
	if m != nil {
		return m.PeerPubKey
	}
	return ""
}

func (m *SwapSuccess) GetRole() Role {
	if m != nil {
		return m.Role
	}
	return Role_TAKER
}

func (m *SwapSuccess) GetCurrencyReceived() string {
	if m != nil {
		return m.CurrencyReceived
	}
	return ""
}

func (m *SwapSuccess) GetCurrencySent() string {
	if m != nil {
		return m.CurrencySent
	}
	return ""
}

func (m *SwapSuccess) GetRPreimage() string {
	if m != nil {
		return m.RPreimage
	}
	return ""
}

func (m *SwapSuccess) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

type Trade struct {
	// The maker order involved in this trade.
	MakerOrder *Order `protobuf:"bytes,1,opt,name=maker_order,proto3" json:"maker_order,omitempty"`
	// The taker order involved in this trade. Note that when a trade occurs from
	// a remote peer filling one of our orders, we do not receive the order (only a
	// swap request) and this field will be empty.
	TakerOrder *Order `protobuf:"bytes,2,opt,name=taker_order,proto3" json:"taker_order,omitempty"`
	// The payment hash involved in this trade.
	RHash string `protobuf:"bytes,3,opt,name=r_hash,proto3" json:"r_hash,omitempty"`
	// The quantity transacted in this trade.
	Quantity uint64 `protobuf:"varint,4,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// The trading pair for this trade.
	PairId string `protobuf:"bytes,5,opt,name=pair_id,proto3" json:"pair_id,omitempty"`
	// The price used for the trade.
	Price float64 `protobuf:"fixed64,6,opt,name=price,proto3" json:"price,omitempty"`
	// Our role in the trade.
	Role Role `protobuf:"varint,7,opt,name=role,proto3,enum=xudrpc.Role" json:"role,omitempty"`
	// The epoch time in milliseconds that this trade was executed
	ExecutedAt uint64 `protobuf:"varint,8,opt,name=executed_at,proto3" json:"executed_at,omitempty"`
	// Whether this node was on the buy or sell side of the trade - or both in case of internal trades.
	Side OrderSide `protobuf:"varint,9,opt,name=side,proto3,enum=xudrpc.OrderSide" json:"side,omitempty"`
	// The counterparty to this trade, if applicable.
	Counterparty         *NodeIdentifier `protobuf:"bytes,10,opt,name=counterparty,proto3" json:"counterparty,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Trade) Reset()         { *m = Trade{} }
func (m *Trade) String() string { return proto.CompactTextString(m) }
func (*Trade) ProtoMessage()    {}
func (*Trade) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{74}
}

func (m *Trade) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Trade.Unmarshal(m, b)
}
func (m *Trade) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Trade.Marshal(b, m, deterministic)
}
func (m *Trade) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trade.Merge(m, src)
}
func (m *Trade) XXX_Size() int {
	return xxx_messageInfo_Trade.Size(m)
}
func (m *Trade) XXX_DiscardUnknown() {
	xxx_messageInfo_Trade.DiscardUnknown(m)
}

var xxx_messageInfo_Trade proto.InternalMessageInfo

func (m *Trade) GetMakerOrder() *Order {
	if m != nil {
		return m.MakerOrder
	}
	return nil
}

func (m *Trade) GetTakerOrder() *Order {
	if m != nil {
		return m.TakerOrder
	}
	return nil
}

func (m *Trade) GetRHash() string {
	if m != nil {
		return m.RHash
	}
	return ""
}

func (m *Trade) GetQuantity() uint64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *Trade) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

func (m *Trade) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Trade) GetRole() Role {
	if m != nil {
		return m.Role
	}
	return Role_TAKER
}

func (m *Trade) GetExecutedAt() uint64 {
	if m != nil {
		return m.ExecutedAt
	}
	return 0
}

func (m *Trade) GetSide() OrderSide {
	if m != nil {
		return m.Side
	}
	return OrderSide_BUY
}

func (m *Trade) GetCounterparty() *NodeIdentifier {
	if m != nil {
		return m.Counterparty
	}
	return nil
}

type TradeHistoryRequest struct {
	// The maximum number of trades to return
	Limit                uint32   `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TradeHistoryRequest) Reset()         { *m = TradeHistoryRequest{} }
func (m *TradeHistoryRequest) String() string { return proto.CompactTextString(m) }
func (*TradeHistoryRequest) ProtoMessage()    {}
func (*TradeHistoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{75}
}

func (m *TradeHistoryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradeHistoryRequest.Unmarshal(m, b)
}
func (m *TradeHistoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradeHistoryRequest.Marshal(b, m, deterministic)
}
func (m *TradeHistoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradeHistoryRequest.Merge(m, src)
}
func (m *TradeHistoryRequest) XXX_Size() int {
	return xxx_messageInfo_TradeHistoryRequest.Size(m)
}
func (m *TradeHistoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TradeHistoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TradeHistoryRequest proto.InternalMessageInfo

func (m *TradeHistoryRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type TradeHistoryResponse struct {
	Trades               []*Trade `protobuf:"bytes,1,rep,name=trades,proto3" json:"trades,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TradeHistoryResponse) Reset()         { *m = TradeHistoryResponse{} }
func (m *TradeHistoryResponse) String() string { return proto.CompactTextString(m) }
func (*TradeHistoryResponse) ProtoMessage()    {}
func (*TradeHistoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{76}
}

func (m *TradeHistoryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradeHistoryResponse.Unmarshal(m, b)
}
func (m *TradeHistoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradeHistoryResponse.Marshal(b, m, deterministic)
}
func (m *TradeHistoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradeHistoryResponse.Merge(m, src)
}
func (m *TradeHistoryResponse) XXX_Size() int {
	return xxx_messageInfo_TradeHistoryResponse.Size(m)
}
func (m *TradeHistoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TradeHistoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TradeHistoryResponse proto.InternalMessageInfo

func (m *TradeHistoryResponse) GetTrades() []*Trade {
	if m != nil {
		return m.Trades
	}
	return nil
}

type TradingLimits struct {
	// Maximum outbound limit for a sell order denominated in satoshis.
	MaxSell uint64 `protobuf:"varint,1,opt,name=max_sell,proto3" json:"max_sell,omitempty"`
	// Maximum inbound limit for a buy order denominated in satoshis.
	MaxBuy uint64 `protobuf:"varint,2,opt,name=max_buy,proto3" json:"max_buy,omitempty"`
	// The outbound amount reserved for open sell orders.
	ReservedSell uint64 `protobuf:"varint,3,opt,name=reserved_sell,proto3" json:"reserved_sell,omitempty"`
	// The inbound amount reserved for open buy orders.
	ReservedBuy          uint64   `protobuf:"varint,4,opt,name=reserved_buy,proto3" json:"reserved_buy,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TradingLimits) Reset()         { *m = TradingLimits{} }
func (m *TradingLimits) String() string { return proto.CompactTextString(m) }
func (*TradingLimits) ProtoMessage()    {}
func (*TradingLimits) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{77}
}

func (m *TradingLimits) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradingLimits.Unmarshal(m, b)
}
func (m *TradingLimits) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradingLimits.Marshal(b, m, deterministic)
}
func (m *TradingLimits) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradingLimits.Merge(m, src)
}
func (m *TradingLimits) XXX_Size() int {
	return xxx_messageInfo_TradingLimits.Size(m)
}
func (m *TradingLimits) XXX_DiscardUnknown() {
	xxx_messageInfo_TradingLimits.DiscardUnknown(m)
}

var xxx_messageInfo_TradingLimits proto.InternalMessageInfo

func (m *TradingLimits) GetMaxSell() uint64 {
	if m != nil {
		return m.MaxSell
	}
	return 0
}

func (m *TradingLimits) GetMaxBuy() uint64 {
	if m != nil {
		return m.MaxBuy
	}
	return 0
}

func (m *TradingLimits) GetReservedSell() uint64 {
	if m != nil {
		return m.ReservedSell
	}
	return 0
}

func (m *TradingLimits) GetReservedBuy() uint64 {
	if m != nil {
		return m.ReservedBuy
	}
	return 0
}

type TradingLimitsRequest struct {
	// The ticker symbol of the currency to query for, if unspecified then trading limits for all supported
	// currencies are queried.
	Currency             string   `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TradingLimitsRequest) Reset()         { *m = TradingLimitsRequest{} }
func (m *TradingLimitsRequest) String() string { return proto.CompactTextString(m) }
func (*TradingLimitsRequest) ProtoMessage()    {}
func (*TradingLimitsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{78}
}

func (m *TradingLimitsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradingLimitsRequest.Unmarshal(m, b)
}
func (m *TradingLimitsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradingLimitsRequest.Marshal(b, m, deterministic)
}
func (m *TradingLimitsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradingLimitsRequest.Merge(m, src)
}
func (m *TradingLimitsRequest) XXX_Size() int {
	return xxx_messageInfo_TradingLimitsRequest.Size(m)
}
func (m *TradingLimitsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TradingLimitsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TradingLimitsRequest proto.InternalMessageInfo

func (m *TradingLimitsRequest) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

type TradingLimitsResponse struct {
	// A map between currency ticker symbols and their trading limits.
	Limits               map[string]*TradingLimits `protobuf:"bytes,1,rep,name=limits,proto3" json:"limits,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *TradingLimitsResponse) Reset()         { *m = TradingLimitsResponse{} }
func (m *TradingLimitsResponse) String() string { return proto.CompactTextString(m) }
func (*TradingLimitsResponse) ProtoMessage()    {}
func (*TradingLimitsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{79}
}

func (m *TradingLimitsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradingLimitsResponse.Unmarshal(m, b)
}
func (m *TradingLimitsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradingLimitsResponse.Marshal(b, m, deterministic)
}
func (m *TradingLimitsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradingLimitsResponse.Merge(m, src)
}
func (m *TradingLimitsResponse) XXX_Size() int {
	return xxx_messageInfo_TradingLimitsResponse.Size(m)
}
func (m *TradingLimitsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TradingLimitsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TradingLimitsResponse proto.InternalMessageInfo

func (m *TradingLimitsResponse) GetLimits() map[string]*TradingLimits {
	if m != nil {
		return m.Limits
	}
	return nil
}

type UnbanRequest struct {
	// The node pub key or alias of the peer to unban.
	NodeIdentifier string `protobuf:"bytes,1,opt,name=node_identifier,proto3" json:"node_identifier,omitempty"`
	// Whether to attempt to connect to the peer after it is unbanned.
	Reconnect            bool     `protobuf:"varint,2,opt,name=reconnect,proto3" json:"reconnect,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnbanRequest) Reset()         { *m = UnbanRequest{} }
func (m *UnbanRequest) String() string { return proto.CompactTextString(m) }
func (*UnbanRequest) ProtoMessage()    {}
func (*UnbanRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{80}
}

func (m *UnbanRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnbanRequest.Unmarshal(m, b)
}
func (m *UnbanRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnbanRequest.Marshal(b, m, deterministic)
}
func (m *UnbanRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnbanRequest.Merge(m, src)
}
func (m *UnbanRequest) XXX_Size() int {
	return xxx_messageInfo_UnbanRequest.Size(m)
}
func (m *UnbanRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnbanRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnbanRequest proto.InternalMessageInfo

func (m *UnbanRequest) GetNodeIdentifier() string {
	if m != nil {
		return m.NodeIdentifier
	}
	return ""
}

func (m *UnbanRequest) GetReconnect() bool {
	if m != nil {
		return m.Reconnect
	}
	return false
}

type UnbanResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnbanResponse) Reset()         { *m = UnbanResponse{} }
func (m *UnbanResponse) String() string { return proto.CompactTextString(m) }
func (*UnbanResponse) ProtoMessage()    {}
func (*UnbanResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{81}
}

func (m *UnbanResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnbanResponse.Unmarshal(m, b)
}
func (m *UnbanResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnbanResponse.Marshal(b, m, deterministic)
}
func (m *UnbanResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnbanResponse.Merge(m, src)
}
func (m *UnbanResponse) XXX_Size() int {
	return xxx_messageInfo_UnbanResponse.Size(m)
}
func (m *UnbanResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UnbanResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UnbanResponse proto.InternalMessageInfo

type UnlockNodeRequest struct {
	// The password in utf-8 with which to unlock an existing xud node key as
	// well as underlying client wallets such as lnd.
	Password             string   `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnlockNodeRequest) Reset()         { *m = UnlockNodeRequest{} }
func (m *UnlockNodeRequest) String() string { return proto.CompactTextString(m) }
func (*UnlockNodeRequest) ProtoMessage()    {}
func (*UnlockNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{82}
}

func (m *UnlockNodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnlockNodeRequest.Unmarshal(m, b)
}
func (m *UnlockNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnlockNodeRequest.Marshal(b, m, deterministic)
}
func (m *UnlockNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnlockNodeRequest.Merge(m, src)
}
func (m *UnlockNodeRequest) XXX_Size() int {
	return xxx_messageInfo_UnlockNodeRequest.Size(m)
}
func (m *UnlockNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnlockNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnlockNodeRequest proto.InternalMessageInfo

func (m *UnlockNodeRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type UnlockNodeResponse struct {
	// The list of lnd clients that were unlocked.
	UnlockedLnds []string `protobuf:"bytes,1,rep,name=unlocked_lnds,json=unlockedLnds,proto3" json:"unlocked_lnds,omitempty"`
	// The list of lnd clients that could not be unlocked.
	LockedLnds           []string `protobuf:"bytes,3,rep,name=locked_lnds,json=lockedLnds,proto3" json:"locked_lnds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnlockNodeResponse) Reset()         { *m = UnlockNodeResponse{} }
func (m *UnlockNodeResponse) String() string { return proto.CompactTextString(m) }
func (*UnlockNodeResponse) ProtoMessage()    {}
func (*UnlockNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{83}
}

func (m *UnlockNodeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnlockNodeResponse.Unmarshal(m, b)
}
func (m *UnlockNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnlockNodeResponse.Marshal(b, m, deterministic)
}
func (m *UnlockNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnlockNodeResponse.Merge(m, src)
}
func (m *UnlockNodeResponse) XXX_Size() int {
	return xxx_messageInfo_UnlockNodeResponse.Size(m)
}
func (m *UnlockNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UnlockNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UnlockNodeResponse proto.InternalMessageInfo

func (m *UnlockNodeResponse) GetUnlockedLnds() []string {
	if m != nil {
		return m.UnlockedLnds
	}
	return nil
}

func (m *UnlockNodeResponse) GetLockedLnds() []string {
	if m != nil {
		return m.LockedLnds
	}
	return nil
}

type WithdrawRequest struct {
	// The ticker symbol of the currency to withdraw.
	Currency string `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`
	// The address to withdraw funds to.
	Destination string `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	// The amount to withdraw denominated in satoshis
	Amount uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// Whether to withdraw all available funds for this currency.
	// If true, the amount field is ignored.
	All bool `protobuf:"varint,4,opt,name=all,proto3" json:"all,omitempty"`
	// The fee to use for the withdrawal transaction denominated in satoshis per byte.
	Fee                  uint32   `protobuf:"varint,5,opt,name=fee,proto3" json:"fee,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WithdrawRequest) Reset()         { *m = WithdrawRequest{} }
func (m *WithdrawRequest) String() string { return proto.CompactTextString(m) }
func (*WithdrawRequest) ProtoMessage()    {}
func (*WithdrawRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{84}
}

func (m *WithdrawRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WithdrawRequest.Unmarshal(m, b)
}
func (m *WithdrawRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WithdrawRequest.Marshal(b, m, deterministic)
}
func (m *WithdrawRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawRequest.Merge(m, src)
}
func (m *WithdrawRequest) XXX_Size() int {
	return xxx_messageInfo_WithdrawRequest.Size(m)
}
func (m *WithdrawRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawRequest proto.InternalMessageInfo

func (m *WithdrawRequest) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *WithdrawRequest) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *WithdrawRequest) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *WithdrawRequest) GetAll() bool {
	if m != nil {
		return m.All
	}
	return false
}

func (m *WithdrawRequest) GetFee() uint32 {
	if m != nil {
		return m.Fee
	}
	return 0
}

type WithdrawResponse struct {
	// The id of the withdrawal transaction.
	TransactionId        string   `protobuf:"bytes,1,opt,name=transaction_id,proto3" json:"transaction_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WithdrawResponse) Reset()         { *m = WithdrawResponse{} }
func (m *WithdrawResponse) String() string { return proto.CompactTextString(m) }
func (*WithdrawResponse) ProtoMessage()    {}
func (*WithdrawResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6960a02cc0a63cf6, []int{85}
}

func (m *WithdrawResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WithdrawResponse.Unmarshal(m, b)
}
func (m *WithdrawResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WithdrawResponse.Marshal(b, m, deterministic)
}
func (m *WithdrawResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawResponse.Merge(m, src)
}
func (m *WithdrawResponse) XXX_Size() int {
	return xxx_messageInfo_WithdrawResponse.Size(m)
}
func (m *WithdrawResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawResponse proto.InternalMessageInfo

func (m *WithdrawResponse) GetTransactionId() string {
	if m != nil {
		return m.TransactionId
	}
	return ""
}

func init() {
	proto.RegisterEnum("xudrpc.OrderSide", OrderSide_name, OrderSide_value)
	proto.RegisterEnum("xudrpc.Role", Role_name, Role_value)
	proto.RegisterEnum("xudrpc.LogLevel", LogLevel_name, LogLevel_value)
	proto.RegisterEnum("xudrpc.Currency_SwapClient", Currency_SwapClient_name, Currency_SwapClient_value)
	proto.RegisterEnum("xudrpc.ListOrdersRequest_Owner", ListOrdersRequest_Owner_name, ListOrdersRequest_Owner_value)
	proto.RegisterType((*AddCurrencyResponse)(nil), "xudrpc.AddCurrencyResponse")
	proto.RegisterType((*AddPairRequest)(nil), "xudrpc.AddPairRequest")
	proto.RegisterType((*AddPairResponse)(nil), "xudrpc.AddPairResponse")
	proto.RegisterType((*Balance)(nil), "xudrpc.Balance")
	proto.RegisterType((*BanRequest)(nil), "xudrpc.BanRequest")
	proto.RegisterType((*BanResponse)(nil), "xudrpc.BanResponse")
	proto.RegisterType((*Chain)(nil), "xudrpc.Chain")
	proto.RegisterType((*Channels)(nil), "xudrpc.Channels")
	proto.RegisterType((*ChangePasswordRequest)(nil), "xudrpc.ChangePasswordRequest")
	proto.RegisterType((*ChangePasswordResponse)(nil), "xudrpc.ChangePasswordResponse")
	proto.RegisterType((*CloseChannelRequest)(nil), "xudrpc.CloseChannelRequest")
	proto.RegisterType((*CloseChannelResponse)(nil), "xudrpc.CloseChannelResponse")
	proto.RegisterType((*ConnectRequest)(nil), "xudrpc.ConnectRequest")
	proto.RegisterType((*ConnectResponse)(nil), "xudrpc.ConnectResponse")
	proto.RegisterType((*CreateNodeRequest)(nil), "xudrpc.CreateNodeRequest")
	proto.RegisterType((*CreateNodeResponse)(nil), "xudrpc.CreateNodeResponse")
	proto.RegisterType((*Currency)(nil), "xudrpc.Currency")
	proto.RegisterType((*DepositRequest)(nil), "xudrpc.DepositRequest")
	proto.RegisterType((*DepositResponse)(nil), "xudrpc.DepositResponse")
	proto.RegisterType((*DiscoverNodesRequest)(nil), "xudrpc.DiscoverNodesRequest")
	proto.RegisterType((*DiscoverNodesResponse)(nil), "xudrpc.DiscoverNodesResponse")
	proto.RegisterType((*ExecuteSwapRequest)(nil), "xudrpc.ExecuteSwapRequest")
	proto.RegisterType((*GetBalanceRequest)(nil), "xudrpc.GetBalanceRequest")
	proto.RegisterType((*GetBalanceResponse)(nil), "xudrpc.GetBalanceResponse")
	proto.RegisterMapType((map[string]*Balance)(nil), "xudrpc.GetBalanceResponse.BalancesEntry")
	proto.RegisterType((*GetInfoRequest)(nil), "xudrpc.GetInfoRequest")
	proto.RegisterType((*GetInfoResponse)(nil), "xudrpc.GetInfoResponse")
	proto.RegisterMapType((map[string]*LndInfo)(nil), "xudrpc.GetInfoResponse.LndEntry")
	proto.RegisterType((*GetMnemonicRequest)(nil), "xudrpc.GetMnemonicRequest")
	proto.RegisterType((*GetMnemonicResponse)(nil), "xudrpc.GetMnemonicResponse")
	proto.RegisterType((*GetNodeInfoRequest)(nil), "xudrpc.GetNodeInfoRequest")
	proto.RegisterType((*GetNodeInfoResponse)(nil), "xudrpc.GetNodeInfoResponse")
	proto.RegisterType((*ListCurrenciesRequest)(nil), "xudrpc.ListCurrenciesRequest")
	proto.RegisterType((*ListCurrenciesResponse)(nil), "xudrpc.ListCurrenciesResponse")
	proto.RegisterType((*ListOrdersRequest)(nil), "xudrpc.ListOrdersRequest")
	proto.RegisterType((*ListOrdersResponse)(nil), "xudrpc.ListOrdersResponse")
	proto.RegisterMapType((map[string]*Orders)(nil), "xudrpc.ListOrdersResponse.OrdersEntry")
	proto.RegisterType((*ListPairsRequest)(nil), "xudrpc.ListPairsRequest")
	proto.RegisterType((*ListPairsResponse)(nil), "xudrpc.ListPairsResponse")
	proto.RegisterType((*ListPeersRequest)(nil), "xudrpc.ListPeersRequest")
	proto.RegisterType((*ListPeersResponse)(nil), "xudrpc.ListPeersResponse")
	proto.RegisterType((*LndInfo)(nil), "xudrpc.LndInfo")
	proto.RegisterType((*NodeIdentifier)(nil), "xudrpc.NodeIdentifier")
	proto.RegisterType((*OpenChannelRequest)(nil), "xudrpc.OpenChannelRequest")
	proto.RegisterType((*OpenChannelResponse)(nil), "xudrpc.OpenChannelResponse")
	proto.RegisterType((*Order)(nil), "xudrpc.Order")
	proto.RegisterType((*OrderBookRequest)(nil), "xudrpc.OrderBookRequest")
	proto.RegisterType((*OrderBookResponse)(nil), "xudrpc.OrderBookResponse")
	proto.RegisterMapType((map[string]*OrderBookResponse_Buckets)(nil), "xudrpc.OrderBookResponse.BucketsEntry")
	proto.RegisterType((*OrderBookResponse_Bucket)(nil), "xudrpc.OrderBookResponse.Bucket")
	proto.RegisterType((*OrderBookResponse_Buckets)(nil), "xudrpc.OrderBookResponse.Buckets")
	proto.RegisterType((*OrderRemoval)(nil), "xudrpc.OrderRemoval")
	proto.RegisterType((*Orders)(nil), "xudrpc.Orders")
	proto.RegisterType((*OrdersCount)(nil), "xudrpc.OrdersCount")
	proto.RegisterType((*OrderUpdate)(nil), "xudrpc.OrderUpdate")
	proto.RegisterType((*Peer)(nil), "xudrpc.Peer")
	proto.RegisterMapType((map[string]string)(nil), "xudrpc.Peer.LndPubKeysEntry")
	proto.RegisterType((*Peer_LndUris)(nil), "xudrpc.Peer.LndUris")
	proto.RegisterType((*PlaceOrderRequest)(nil), "xudrpc.PlaceOrderRequest")
	proto.RegisterType((*PlaceOrderResponse)(nil), "xudrpc.PlaceOrderResponse")
	proto.RegisterType((*PlaceOrderEvent)(nil), "xudrpc.PlaceOrderEvent")
	proto.RegisterType((*ConnextInfo)(nil), "xudrpc.ConnextInfo")
	proto.RegisterType((*RemoveCurrencyRequest)(nil), "xudrpc.RemoveCurrencyRequest")
	proto.RegisterType((*RemoveCurrencyResponse)(nil), "xudrpc.RemoveCurrencyResponse")
	proto.RegisterType((*RemoveOrderRequest)(nil), "xudrpc.RemoveOrderRequest")
	proto.RegisterType((*RemoveOrderResponse)(nil), "xudrpc.RemoveOrderResponse")
	proto.RegisterType((*RemoveAllOrdersRequest)(nil), "xudrpc.RemoveAllOrdersRequest")
	proto.RegisterType((*RemoveAllOrdersResponse)(nil), "xudrpc.RemoveAllOrdersResponse")
	proto.RegisterType((*RemovePairRequest)(nil), "xudrpc.RemovePairRequest")
	proto.RegisterType((*RemovePairResponse)(nil), "xudrpc.RemovePairResponse")
	proto.RegisterType((*RestoreNodeRequest)(nil), "xudrpc.RestoreNodeRequest")
	proto.RegisterMapType((map[string][]byte)(nil), "xudrpc.RestoreNodeRequest.LndBackupsEntry")
	proto.RegisterType((*RestoreNodeResponse)(nil), "xudrpc.RestoreNodeResponse")
	proto.RegisterType((*SetLogLevelRequest)(nil), "xudrpc.SetLogLevelRequest")
	proto.RegisterType((*SetLogLevelResponse)(nil), "xudrpc.SetLogLevelResponse")
	proto.RegisterType((*ShutdownRequest)(nil), "xudrpc.ShutdownRequest")
	proto.RegisterType((*ShutdownResponse)(nil), "xudrpc.ShutdownResponse")
	proto.RegisterType((*SubscribeOrdersRequest)(nil), "xudrpc.SubscribeOrdersRequest")
	proto.RegisterType((*SubscribeSwapsAcceptedRequest)(nil), "xudrpc.SubscribeSwapsAcceptedRequest")
	proto.RegisterType((*SubscribeSwapsRequest)(nil), "xudrpc.SubscribeSwapsRequest")
	proto.RegisterType((*SwapAccepted)(nil), "xudrpc.SwapAccepted")
	proto.RegisterType((*SwapFailure)(nil), "xudrpc.SwapFailure")
	proto.RegisterType((*SwapSuccess)(nil), "xudrpc.SwapSuccess")
	proto.RegisterType((*Trade)(nil), "xudrpc.Trade")
	proto.RegisterType((*TradeHistoryRequest)(nil), "xudrpc.TradeHistoryRequest")
	proto.RegisterType((*TradeHistoryResponse)(nil), "xudrpc.TradeHistoryResponse")
	proto.RegisterType((*TradingLimits)(nil), "xudrpc.TradingLimits")
	proto.RegisterType((*TradingLimitsRequest)(nil), "xudrpc.TradingLimitsRequest")
	proto.RegisterType((*TradingLimitsResponse)(nil), "xudrpc.TradingLimitsResponse")
	proto.RegisterMapType((map[string]*TradingLimits)(nil), "xudrpc.TradingLimitsResponse.LimitsEntry")
	proto.RegisterType((*UnbanRequest)(nil), "xudrpc.UnbanRequest")
	proto.RegisterType((*UnbanResponse)(nil), "xudrpc.UnbanResponse")
	proto.RegisterType((*UnlockNodeRequest)(nil), "xudrpc.UnlockNodeRequest")
	proto.RegisterType((*UnlockNodeResponse)(nil), "xudrpc.UnlockNodeResponse")
	proto.RegisterType((*WithdrawRequest)(nil), "xudrpc.WithdrawRequest")
	proto.RegisterType((*WithdrawResponse)(nil), "xudrpc.WithdrawResponse")
}

func init() { proto.RegisterFile("xudrpc.proto", fileDescriptor_6960a02cc0a63cf6) }

var fileDescriptor_6960a02cc0a63cf6 = []byte{
	// 4380 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x3b, 0x4d, 0x6f, 0x1d, 0xc9,
	0x56, 0xee, 0x7b, 0x7d, 0x7d, 0xaf, 0xcf, 0xfd, 0xf0, 0x75, 0xf9, 0x23, 0x4e, 0x27, 0x93, 0xc9,
	0x14, 0x93, 0x28, 0x93, 0x99, 0x71, 0x42, 0x86, 0x47, 0xde, 0xe4, 0x91, 0xd1, 0xd8, 0x8e, 0xdf,
	0x24, 0x33, 0x7e, 0x49, 0xd4, 0x4e, 0x26, 0x61, 0xc4, 0x7b, 0xad, 0xbe, 0xdd, 0x15, 0xbb, 0x71,
	0xbb, 0xfb, 0x4e, 0x7f, 0xd8, 0x31, 0x6c, 0xd0, 0xd3, 0x2c, 0x10, 0x2c, 0x10, 0x42, 0xac, 0x61,
	0x85, 0x90, 0x40, 0x6c, 0x59, 0x21, 0xb1, 0x66, 0xcb, 0x02, 0x09, 0xb1, 0x41, 0xe2, 0x17, 0x20,
	0xc4, 0x0e, 0x09, 0xd5, 0x57, 0x57, 0x55, 0x77, 0x5f, 0x4f, 0x32, 0x82, 0xb7, 0xbb, 0x75, 0xea,
	0xf4, 0x39, 0x55, 0xe7, 0xab, 0x4e, 0x9d, 0x3a, 0x17, 0x06, 0xaf, 0x8b, 0x20, 0x9d, 0xfa, 0x9b,
	0xd3, 0x34, 0xc9, 0x13, 0xb4, 0xc0, 0x47, 0xf6, 0xb2, 0x17, 0xc7, 0x49, 0xee, 0xe5, 0x61, 0x12,
	0x67, 0x7c, 0x0a, 0xaf, 0xc1, 0xca, 0x56, 0x10, 0xec, 0x14, 0x69, 0x4a, 0x62, 0xff, 0xcc, 0x21,
	0xd9, 0x34, 0x89, 0x33, 0x82, 0x7f, 0x01, 0xa3, 0xad, 0x20, 0x78, 0xea, 0x85, 0xa9, 0x43, 0xbe,
	0x2d, 0x48, 0x96, 0xa3, 0xf7, 0x61, 0x38, 0xf1, 0x32, 0xe2, 0xfa, 0x02, 0x75, 0xc3, 0xba, 0x6a,
	0xdd, 0x58, 0x74, 0x4c, 0x20, 0xba, 0x0e, 0xa3, 0x6f, 0x8b, 0x24, 0xd7, 0xd0, 0x5a, 0x0c, 0xad,
	0x02, 0xc5, 0xcb, 0xb0, 0x54, 0xd2, 0x17, 0x2c, 0xff, 0xbe, 0x05, 0xdd, 0x6d, 0x2f, 0xf2, 0x62,
	0x9f, 0x50, 0x66, 0x79, 0x92, 0x7b, 0x91, 0x3b, 0xe1, 0x00, 0xc6, 0x6c, 0xde, 0x31, 0x81, 0xe8,
	0x06, 0x2c, 0xf9, 0x87, 0x5e, 0x1c, 0x13, 0x85, 0xd7, 0x62, 0x78, 0x55, 0x30, 0xfa, 0x31, 0x5c,
	0x98, 0x92, 0x38, 0x08, 0xe3, 0x03, 0xb7, 0xfa, 0x45, 0x9b, 0x7d, 0x31, 0x6b, 0x1a, 0xdd, 0x83,
	0x8d, 0x30, 0xf6, 0xfc, 0x3c, 0x3c, 0x21, 0xb5, 0x4f, 0xe7, 0xd9, 0xa7, 0x33, 0xe7, 0xa9, 0x30,
	0x4e, 0xbd, 0x28, 0x22, 0x79, 0xf9, 0x45, 0x87, 0x7d, 0x51, 0x81, 0xa2, 0xcf, 0xc0, 0x2e, 0x62,
	0x3f, 0x89, 0x5f, 0x85, 0xe9, 0x31, 0x09, 0xdc, 0xca, 0x37, 0x0b, 0xec, 0x9b, 0x73, 0x30, 0xf0,
	0x6f, 0x02, 0x6c, 0x7b, 0xb1, 0x54, 0xd4, 0x0d, 0x58, 0x8a, 0x93, 0x80, 0xb8, 0x61, 0x40, 0xe2,
	0x3c, 0x7c, 0x15, 0x92, 0x54, 0xa8, 0xaa, 0x0a, 0xc6, 0x43, 0xe8, 0xb3, 0xef, 0x84, 0x02, 0xee,
	0x42, 0x67, 0xe7, 0xd0, 0x0b, 0x63, 0xb4, 0x0a, 0x1d, 0x9f, 0xfe, 0x10, 0xdf, 0xf1, 0x01, 0xda,
	0x80, 0x6e, 0x4c, 0xf2, 0xd3, 0x24, 0x3d, 0x12, 0x3a, 0x95, 0x43, 0x3c, 0x85, 0xde, 0x0e, 0xdf,
	0x7a, 0x86, 0xd6, 0x61, 0x81, 0x4b, 0x83, 0x7d, 0x3c, 0x74, 0xc4, 0x08, 0xd9, 0xd0, 0x93, 0x72,
	0x62, 0x9f, 0x0f, 0x9d, 0x72, 0x4c, 0x29, 0x0b, 0xf1, 0x33, 0x6d, 0x0c, 0x1d, 0x39, 0xa4, 0xd4,
	0xfc, 0x28, 0xc9, 0x48, 0xc0, 0x64, 0x3d, 0x74, 0xc4, 0x08, 0xbb, 0xb0, 0x46, 0x39, 0x1e, 0x90,
	0xa7, 0x5e, 0x96, 0x9d, 0x26, 0x69, 0x20, 0x37, 0x8f, 0x61, 0x10, 0x93, 0x53, 0x77, 0x2a, 0xc0,
	0x62, 0x07, 0x06, 0x8c, 0xe2, 0x24, 0x51, 0xa0, 0x70, 0xf8, 0x6e, 0x0c, 0x18, 0xde, 0x80, 0xf5,
	0x2a, 0x03, 0x21, 0xa5, 0x7f, 0xb0, 0x60, 0x65, 0x87, 0xae, 0x42, 0x6c, 0xf9, 0xad, 0xc5, 0x4e,
	0x45, 0x51, 0xf1, 0x8e, 0x72, 0x4c, 0x45, 0xff, 0x2a, 0x49, 0x85, 0x59, 0xf6, 0x1c, 0x3e, 0x40,
	0x57, 0xa1, 0x1f, 0x90, 0x2c, 0x0f, 0x63, 0xe6, 0xba, 0x4c, 0x16, 0x8b, 0x8e, 0x0e, 0x62, 0x62,
	0x3f, 0x4e, 0x8a, 0x38, 0x17, 0x26, 0x26, 0x46, 0x68, 0x0c, 0xed, 0x57, 0x44, 0xda, 0x10, 0xfd,
	0x89, 0x3f, 0x87, 0x55, 0x73, 0xf9, 0x7c, 0x5f, 0x74, 0xfd, 0x79, 0xea, 0xc5, 0x19, 0xd5, 0x49,
	0x12, 0xbb, 0x61, 0x90, 0x6d, 0x58, 0x57, 0xdb, 0x74, 0xfd, 0x15, 0x30, 0xfe, 0x08, 0x46, 0x3b,
	0x49, 0x1c, 0x13, 0x3f, 0x97, 0x7b, 0xb7, 0xa1, 0xc7, 0x36, 0x59, 0xa4, 0xa1, 0xd8, 0x74, 0x39,
	0xa6, 0x9e, 0x5e, 0x62, 0x0b, 0x11, 0xde, 0x82, 0xe5, 0x9d, 0x94, 0x78, 0x39, 0x79, 0x9c, 0x04,
	0x44, 0xa3, 0x51, 0xd1, 0x5a, 0x39, 0xc6, 0x7f, 0x6e, 0x01, 0xd2, 0xbf, 0x10, 0x4b, 0xfe, 0x35,
	0x18, 0x66, 0x84, 0x04, 0xee, 0x71, 0x4c, 0x8e, 0x93, 0x38, 0xf4, 0xc5, 0x82, 0x07, 0x14, 0xf8,
	0x33, 0x01, 0x43, 0x1f, 0xc0, 0x38, 0x8c, 0xc3, 0x3c, 0xf4, 0xa2, 0xf0, 0xf7, 0x48, 0xe0, 0x46,
	0x71, 0x90, 0x6d, 0xb4, 0xf8, 0xc6, 0x34, 0xf8, 0x5e, 0x1c, 0x64, 0xe8, 0x16, 0xac, 0xe8, 0xa8,
	0x3e, 0x5d, 0xf6, 0xeb, 0x5c, 0xa8, 0x02, 0x69, 0x53, 0x3b, 0x7c, 0x06, 0xff, 0x8b, 0x05, 0x3d,
	0x19, 0x3a, 0x0d, 0xb5, 0x5a, 0x15, 0xb5, 0xde, 0x87, 0x7e, 0x76, 0xea, 0x4d, 0x5d, 0x3f, 0x0a,
	0x49, 0x9c, 0x33, 0xad, 0x8f, 0xee, 0x5c, 0xda, 0x14, 0x41, 0x5a, 0x92, 0xd8, 0xdc, 0x3f, 0xf5,
	0xa6, 0x3b, 0x0c, 0xc5, 0xd1, 0xf1, 0x79, 0x38, 0x3c, 0x22, 0xb1, 0xeb, 0x05, 0x41, 0x4a, 0xb2,
	0x8c, 0x2d, 0x69, 0xd1, 0x31, 0x81, 0x34, 0xdc, 0x04, 0xc4, 0x0f, 0x8f, 0xbd, 0xc8, 0x9d, 0x46,
	0x9e, 0x4f, 0x32, 0xe1, 0x34, 0x15, 0x28, 0xc6, 0x00, 0x8a, 0x11, 0xea, 0x42, 0x7b, 0xef, 0xf1,
	0x83, 0xf1, 0x1c, 0xea, 0x43, 0x77, 0xe7, 0xc9, 0xe3, 0xc7, 0xbb, 0x2f, 0x9f, 0x8d, 0x5b, 0x54,
	0xc7, 0x0f, 0xc8, 0x34, 0xc9, 0x42, 0x5d, 0xc7, 0xb3, 0xb6, 0x87, 0x3f, 0x84, 0xa5, 0x12, 0x5b,
	0xe8, 0x66, 0x03, 0xba, 0x72, 0xb1, 0x1c, 0x5b, 0x0e, 0xa9, 0x01, 0x3e, 0x08, 0x33, 0x3f, 0x39,
	0x21, 0x29, 0xd5, 0x66, 0xf6, 0xf6, 0x71, 0xeb, 0x47, 0xb0, 0x56, 0xa1, 0x20, 0x98, 0x5e, 0x86,
	0xc5, 0xb8, 0x38, 0x76, 0x29, 0x7e, 0x26, 0xe2, 0x8f, 0x02, 0xe0, 0x3f, 0xb2, 0x00, 0xed, 0xbe,
	0x26, 0x7e, 0x91, 0x13, 0xba, 0x7f, 0x6d, 0x63, 0x49, 0x1a, 0x90, 0xd4, 0x0d, 0x4b, 0xc3, 0x93,
	0x63, 0x16, 0x99, 0xbc, 0x90, 0x4d, 0x89, 0x98, 0x27, 0x86, 0x34, 0x88, 0x4c, 0x09, 0x49, 0xdd,
	0x69, 0x31, 0x71, 0x8f, 0xc8, 0x99, 0xd0, 0x88, 0x01, 0xa3, 0x94, 0xbf, 0x2d, 0xbc, 0x38, 0x0f,
	0xf3, 0x33, 0x71, 0x56, 0x94, 0x63, 0xea, 0x03, 0x5f, 0x90, 0x5c, 0x9c, 0x77, 0x6f, 0x22, 0xe3,
	0xbf, 0xb6, 0x00, 0xe9, 0x5f, 0x88, 0x2d, 0x3f, 0x80, 0x9e, 0x38, 0x06, 0xb8, 0xbf, 0xf6, 0xef,
	0xdc, 0x90, 0x66, 0x55, 0xc7, 0xde, 0x14, 0xe3, 0x6c, 0x37, 0xce, 0xd3, 0x33, 0xa7, 0xfc, 0xd2,
	0xde, 0x83, 0xa1, 0x31, 0x45, 0xe3, 0x06, 0xdd, 0x15, 0x5f, 0x04, 0xfd, 0x89, 0xae, 0x41, 0xe7,
	0xc4, 0x8b, 0x0a, 0x1e, 0xbd, 0xfb, 0x77, 0x96, 0x24, 0x17, 0xc9, 0x82, 0xcf, 0xde, 0x6b, 0xfd,
	0xd8, 0xc2, 0x63, 0x18, 0x7d, 0x41, 0xf2, 0x47, 0xf1, 0xab, 0x44, 0x6c, 0x0c, 0xff, 0x6b, 0x1b,
	0x96, 0x4a, 0x90, 0xb2, 0x90, 0x13, 0x92, 0x66, 0x34, 0xa0, 0x09, 0x0b, 0x11, 0x43, 0x16, 0xc4,
	0xa9, 0xca, 0xa5, 0x6c, 0x45, 0x80, 0xd6, 0x61, 0x08, 0xc1, 0x7c, 0x91, 0x86, 0xd4, 0x13, 0xa8,
	0x2b, 0xb3, 0xdf, 0x52, 0xfd, 0x54, 0x07, 0xd2, 0xf6, 0x15, 0xa0, 0x9c, 0xf5, 0xc2, 0x34, 0x63,
	0x51, 0x52, 0xce, 0x52, 0x00, 0xfa, 0x10, 0x16, 0x98, 0xd6, 0x33, 0x16, 0x2b, 0xfb, 0x77, 0x56,
	0xe4, 0xfe, 0x9e, 0x30, 0xe8, 0x0e, 0x8d, 0xa6, 0x8e, 0x40, 0x41, 0x77, 0xa0, 0x1d, 0xc5, 0xc1,
	0x46, 0x97, 0xc9, 0xfb, 0xaa, 0x26, 0x6f, 0x7d, 0x83, 0x9b, 0x7b, 0x71, 0xc0, 0xe5, 0x4c, 0x91,
	0x69, 0x64, 0xf7, 0xa2, 0xd0, 0xcb, 0x36, 0x16, 0xf9, 0xa1, 0xca, 0x06, 0xfa, 0xa1, 0x0a, 0xc6,
	0xa1, 0x8a, 0x6e, 0xc3, 0x8a, 0xcc, 0x49, 0x58, 0x28, 0x38, 0xf4, 0xb2, 0x43, 0x92, 0x6d, 0xf4,
	0xd9, 0x7e, 0x9b, 0xa6, 0xd0, 0xc7, 0xd0, 0x95, 0x21, 0x6b, 0x60, 0xee, 0x41, 0xc4, 0x2b, 0xb6,
	0x3a, 0x89, 0x63, 0x7f, 0x01, 0x3d, 0xb9, 0xc2, 0xb7, 0x50, 0xf7, 0x5e, 0x1c, 0x30, 0x32, 0x9a,
	0xba, 0x57, 0x99, 0x61, 0xca, 0x80, 0x2b, 0x55, 0xfe, 0x13, 0x58, 0x31, 0xa0, 0x42, 0xeb, 0xef,
	0x37, 0xc7, 0x6c, 0x13, 0x88, 0x3f, 0x63, 0x24, 0xa9, 0x73, 0x6b, 0x56, 0xf4, 0x16, 0x11, 0xc2,
	0x61, 0xcc, 0xd5, 0xf7, 0xe5, 0x81, 0xb1, 0x94, 0x92, 0x69, 0xc1, 0x33, 0xe0, 0x7d, 0x3f, 0x49,
	0x79, 0x96, 0xb2, 0xec, 0x80, 0x02, 0xd3, 0xa3, 0x74, 0x42, 0x8f, 0x46, 0xee, 0xf2, 0x3d, 0x47,
	0x8c, 0xf0, 0x05, 0x58, 0xdb, 0x0b, 0xb3, 0x5c, 0x04, 0xeb, 0xb0, 0x0c, 0x5c, 0xf8, 0x4b, 0x58,
	0xaf, 0x4e, 0x08, 0x7e, 0xb7, 0x01, 0xfc, 0x12, 0x2a, 0xdc, 0x73, 0x5c, 0x8d, 0xfa, 0x8e, 0x86,
	0x83, 0xff, 0xc9, 0x82, 0x65, 0x4a, 0x8c, 0x5b, 0x9d, 0xdc, 0xb8, 0x16, 0x86, 0x2c, 0x33, 0x0c,
	0xfd, 0x08, 0x3a, 0xc9, 0x69, 0x4c, 0x52, 0x71, 0xa4, 0xbc, 0x5b, 0xaa, 0xa9, 0x4a, 0x63, 0xf3,
	0x09, 0x45, 0x73, 0x38, 0x36, 0x35, 0xc6, 0x28, 0x3c, 0x0e, 0x73, 0x91, 0x6f, 0xf1, 0x01, 0x95,
	0x6f, 0x18, 0xfb, 0x51, 0x11, 0x10, 0x97, 0x59, 0xa7, 0x38, 0x41, 0x7a, 0x4e, 0x15, 0x8c, 0xdf,
	0x87, 0x0e, 0xa3, 0x87, 0x7a, 0x30, 0xbf, 0xfd, 0xe4, 0xd9, 0xc3, 0xf1, 0x1c, 0x3d, 0x47, 0x9e,
	0xbc, 0x78, 0x3c, 0xb6, 0x28, 0xe8, 0xe9, 0xee, 0xae, 0x33, 0x6e, 0xe1, 0xbf, 0xb0, 0x00, 0xe9,
	0x0b, 0x11, 0x52, 0xf9, 0xac, 0x74, 0x35, 0x2e, 0x91, 0xeb, 0x4d, 0x8b, 0x16, 0x3e, 0xc4, 0x87,
	0xdc, 0x8d, 0xc4, 0x57, 0xf6, 0x23, 0xe8, 0x6b, 0xe0, 0x06, 0xdb, 0x7d, 0xdf, 0xb4, 0xdd, 0x91,
	0xe9, 0xca, 0xba, 0xe9, 0x22, 0x18, 0x53, 0xa6, 0xf4, 0x1e, 0x52, 0xaa, 0xf3, 0x03, 0xae, 0x01,
	0x01, 0x13, 0x6b, 0x5e, 0x85, 0x0e, 0x0f, 0x1c, 0xdc, 0x5c, 0xf9, 0xa0, 0xfc, 0x9c, 0x28, 0x39,
	0xe3, 0xbb, 0xe2, 0x73, 0xa2, 0x6f, 0x19, 0x43, 0x87, 0x47, 0x25, 0xbe, 0xe3, 0x81, 0x5c, 0x11,
	0xc5, 0x72, 0xf8, 0x14, 0xfe, 0x37, 0x0b, 0xba, 0xc2, 0xbb, 0xa8, 0x0d, 0x66, 0xb9, 0x97, 0x17,
	0xf2, 0xf0, 0x14, 0x23, 0xf4, 0x11, 0xf4, 0xc4, 0x25, 0x23, 0x13, 0x9b, 0x53, 0xe6, 0x24, 0xe0,
	0x4e, 0x89, 0x81, 0xae, 0xc1, 0x02, 0x4b, 0xdd, 0x79, 0x94, 0xec, 0xdf, 0x19, 0x6a, 0xb8, 0x61,
	0xec, 0x88, 0x49, 0x9a, 0x5d, 0x4e, 0xa2, 0xc4, 0x3f, 0x3a, 0x24, 0xe1, 0xc1, 0x61, 0x2e, 0x02,
	0xa7, 0x0e, 0x2a, 0x83, 0x6d, 0x47, 0x0b, 0xb6, 0x5a, 0xf8, 0x5e, 0x30, 0xc3, 0x77, 0x19, 0xe9,
	0xba, 0x5a, 0xa4, 0xc3, 0x5f, 0xc2, 0x88, 0xf9, 0xa3, 0xca, 0x83, 0xab, 0x61, 0xde, 0x6a, 0x08,
	0xf3, 0x25, 0xad, 0x96, 0x4e, 0xeb, 0xaf, 0x2c, 0x40, 0x4f, 0xa6, 0x24, 0xfe, 0x7f, 0x49, 0xc1,
	0x55, 0x2a, 0xdd, 0x36, 0x52, 0xe9, 0xab, 0xd0, 0x9f, 0x16, 0xd9, 0xa1, 0x2b, 0x26, 0xf9, 0x81,
	0xae, 0x83, 0x64, 0xb2, 0xdd, 0x51, 0xc9, 0xf6, 0x7d, 0x58, 0x31, 0xd6, 0x29, 0xcc, 0xe1, 0x3a,
	0x8c, 0xcc, 0xa4, 0x5a, 0xac, 0xb3, 0x02, 0xc5, 0xff, 0xd8, 0x82, 0x0e, 0x33, 0x5a, 0x66, 0x7f,
	0x69, 0x28, 0x2e, 0xc2, 0x96, 0xc3, 0x07, 0x46, 0x82, 0xd1, 0x32, 0x13, 0x0c, 0x3d, 0x66, 0xb4,
	0xcd, 0x98, 0x31, 0x82, 0x56, 0x18, 0x88, 0x4b, 0x44, 0x2b, 0x0c, 0xd0, 0xe7, 0x75, 0xb1, 0x75,
	0x98, 0x6d, 0xad, 0x4b, 0x7b, 0x31, 0x15, 0xd7, 0x28, 0xce, 0x28, 0xf1, 0xbd, 0x88, 0x32, 0xe3,
	0xc6, 0x50, 0x8e, 0xd1, 0x15, 0x00, 0x9f, 0xa5, 0xee, 0x81, 0xeb, 0xe5, 0xcc, 0x24, 0xe6, 0x1d,
	0x0d, 0x82, 0xae, 0xc1, 0x7c, 0x16, 0x06, 0x64, 0xa3, 0xc7, 0x02, 0xd8, 0xb2, 0xe1, 0xab, 0xfb,
	0x61, 0x40, 0x1c, 0x36, 0x4d, 0x8d, 0x25, 0xcc, 0xdc, 0xe4, 0x34, 0x76, 0x59, 0x14, 0x60, 0xa7,
	0x68, 0xcf, 0x31, 0x60, 0xd4, 0x4c, 0x0f, 0x93, 0x28, 0x60, 0x27, 0xe9, 0xbc, 0xc3, 0x7e, 0x63,
	0x17, 0xc6, 0x8c, 0xd4, 0x76, 0x92, 0x1c, 0x49, 0x3b, 0xb9, 0x50, 0x0d, 0xa7, 0x0b, 0x74, 0xf8,
	0x28, 0xa0, 0x29, 0xc2, 0x34, 0x25, 0x7e, 0xc8, 0xac, 0x9a, 0x0a, 0xb4, 0xe3, 0x28, 0x40, 0x73,
	0xd0, 0xc4, 0xdf, 0xb5, 0x61, 0x59, 0xe3, 0x20, 0x34, 0xfc, 0x39, 0x74, 0x27, 0x85, 0x7f, 0x44,
	0xf2, 0x5a, 0x90, 0xab, 0xe1, 0x6e, 0x6e, 0x73, 0x44, 0x1e, 0xe4, 0xe4, 0x67, 0xf6, 0x3d, 0x58,
	0xe0, 0x13, 0x6f, 0xaf, 0x7b, 0xfb, 0x4f, 0x2d, 0xe8, 0x0a, 0xaa, 0x68, 0x07, 0x06, 0x19, 0x89,
	0x22, 0xd7, 0x5c, 0xce, 0xd5, 0xef, 0x5b, 0x8e, 0xd3, 0xa7, 0x5f, 0x49, 0x22, 0x5b, 0xd0, 0x9f,
	0x14, 0x67, 0x25, 0x8d, 0xd6, 0x1b, 0xd2, 0x80, 0x49, 0x71, 0x26, 0x48, 0xd8, 0x3f, 0x87, 0x81,
	0xbe, 0xd1, 0x86, 0xb0, 0x7d, 0xd7, 0x0c, 0xdb, 0xef, 0x7d, 0xaf, 0xc4, 0xf4, 0x48, 0xfe, 0x97,
	0x16, 0x0c, 0x18, 0xa2, 0x43, 0x8e, 0x93, 0x13, 0x2f, 0x32, 0xe4, 0x63, 0xcd, 0xf6, 0x8d, 0x4a,
	0x5a, 0xaf, 0x5f, 0x06, 0xda, 0x95, 0xcb, 0x80, 0x6e, 0xe5, 0xf3, 0x15, 0x2b, 0xaf, 0x9a, 0x67,
	0xa7, 0x6e, 0x9e, 0xf8, 0x10, 0x16, 0xf8, 0x09, 0x84, 0x3e, 0x06, 0x2a, 0x19, 0xd7, 0x38, 0x05,
	0x87, 0xc6, 0x76, 0x1d, 0x0d, 0x01, 0xdd, 0x02, 0xa6, 0x0c, 0x89, 0xdf, 0x6a, 0xc2, 0xd7, 0x31,
	0xf0, 0x27, 0xf2, 0x84, 0x64, 0x69, 0x2b, 0xf5, 0x0b, 0x7a, 0xc4, 0x88, 0x1b, 0x11, 0xfb, 0x4d,
	0xc5, 0x9f, 0x9c, 0xc6, 0xa2, 0x14, 0x43, 0x7f, 0xe2, 0x5f, 0x5a, 0xe2, 0xab, 0xe7, 0xd3, 0xc0,
	0xcb, 0x09, 0xcd, 0x00, 0xf9, 0x5e, 0x2c, 0xa6, 0x0e, 0x93, 0xdf, 0xc3, 0x39, 0x87, 0xcf, 0xa2,
	0xdf, 0x82, 0x21, 0x97, 0x50, 0xca, 0x05, 0x2f, 0xb4, 0xb7, 0x6a, 0x2e, 0x8f, 0xcf, 0x3d, 0x9c,
	0x73, 0x4c, 0xe4, 0xed, 0x11, 0x0c, 0x38, 0xa0, 0x60, 0x4c, 0xf1, 0x7f, 0xb7, 0x61, 0x9e, 0x1e,
	0x8a, 0xb3, 0xef, 0x8f, 0x6f, 0x74, 0x3b, 0xf8, 0x1c, 0x06, 0x51, 0x1c, 0xc8, 0xa1, 0x3c, 0xff,
	0x2e, 0xeb, 0xc7, 0x2e, 0xcd, 0x64, 0x9f, 0x16, 0x93, 0xaf, 0xc8, 0x99, 0xf0, 0x3c, 0xe3, 0x0b,
	0xca, 0x3f, 0x8c, 0x27, 0x49, 0x11, 0x07, 0x22, 0x07, 0x92, 0x43, 0x95, 0x0a, 0x74, 0xb4, 0x54,
	0x80, 0x9e, 0x0e, 0xaf, 0x8b, 0xc0, 0x35, 0x8f, 0x44, 0x1d, 0x84, 0x3e, 0x82, 0xe5, 0x8c, 0xf8,
	0x49, 0x1c, 0x64, 0xbc, 0xb2, 0xe0, 0xe7, 0x24, 0x60, 0xf1, 0x70, 0xe8, 0xd4, 0x27, 0x66, 0x5c,
	0x17, 0x6e, 0x43, 0x8f, 0xae, 0x92, 0x1d, 0xc6, 0xc0, 0xf6, 0xb4, 0x5a, 0xdd, 0xd3, 0xf3, 0x34,
	0xcc, 0x9c, 0x12, 0x0b, 0x6d, 0x02, 0x12, 0x09, 0xbf, 0x1e, 0xdf, 0xfb, 0x8c, 0x68, 0xc3, 0x8c,
	0x7d, 0x1f, 0x96, 0x2a, 0x82, 0x69, 0xf0, 0xd4, 0x55, 0xdd, 0x53, 0x17, 0x35, 0x37, 0xb4, 0xef,
	0xb2, 0x1c, 0x86, 0xae, 0xe1, 0xdc, 0x7a, 0xc8, 0x18, 0xda, 0x45, 0x1a, 0x8a, 0x3a, 0x0c, 0xfd,
	0x89, 0xff, 0xa0, 0x05, 0xcb, 0x4f, 0x23, 0xcf, 0x27, 0xc2, 0x5e, 0x78, 0xa4, 0xfe, 0xbf, 0x3c,
	0xf6, 0x74, 0xd7, 0x9e, 0xaf, 0xb8, 0xb6, 0x3c, 0x84, 0x3a, 0xe7, 0x1f, 0x42, 0x37, 0x61, 0x9c,
	0x12, 0x56, 0x45, 0x71, 0x4b, 0x52, 0x5c, 0xd3, 0x35, 0x38, 0xbd, 0xbf, 0x85, 0xc7, 0xc7, 0x24,
	0x08, 0xbd, 0x9c, 0x42, 0x5d, 0x9f, 0xde, 0x92, 0x23, 0xa6, 0xf0, 0x9e, 0xd3, 0x34, 0x45, 0x45,
	0x80, 0x74, 0x11, 0x88, 0xa3, 0xe4, 0x53, 0x18, 0x87, 0x71, 0x4e, 0xd2, 0xd8, 0x8b, 0xdc, 0x63,
	0x2f, 0xf7, 0x0f, 0xc9, 0x8c, 0x90, 0x51, 0x43, 0x43, 0x3f, 0x81, 0x11, 0xbb, 0x20, 0x66, 0x85,
	0xef, 0x93, 0x8c, 0xe6, 0xf3, 0x3c, 0x76, 0x94, 0x17, 0xc3, 0xfd, 0x53, 0x6f, 0xba, 0xcf, 0x27,
	0x9d, 0x0a, 0x2a, 0xba, 0x4b, 0x2f, 0x4b, 0xc7, 0x5e, 0x18, 0xd3, 0x7b, 0x26, 0x8f, 0x04, 0xed,
	0x86, 0x48, 0xe0, 0x54, 0xb1, 0xd0, 0xa7, 0x30, 0x64, 0xa4, 0x5e, 0x79, 0x61, 0x54, 0xa4, 0xec,
	0x12, 0x51, 0x63, 0xfa, 0x53, 0x3e, 0xe7, 0x98, 0x98, 0xf8, 0x3f, 0x2d, 0x58, 0x52, 0x22, 0xd8,
	0x3d, 0x21, 0x31, 0x4d, 0x10, 0x3a, 0x6c, 0x3f, 0x33, 0xe3, 0x10, 0x9b, 0x45, 0x9f, 0xc2, 0x40,
	0xdf, 0x80, 0x08, 0x43, 0x4d, 0x3b, 0x7d, 0x38, 0xe7, 0x18, 0xa8, 0xe8, 0xd3, 0x37, 0xdb, 0xe9,
	0xc3, 0xb9, 0xa6, 0xbd, 0x0e, 0xf4, 0x1d, 0x30, 0xc3, 0x6a, 0xde, 0x6a, 0xc9, 0x55, 0xa0, 0x6e,
	0x77, 0xa1, 0x43, 0xe8, 0x06, 0x71, 0x02, 0x7d, 0xed, 0x82, 0x3e, 0x33, 0xf7, 0xd7, 0x22, 0x62,
	0xcb, 0x8c, 0x88, 0x5a, 0x2a, 0x3e, 0x5f, 0x4b, 0xc5, 0x79, 0x25, 0xbf, 0xa3, 0x55, 0xf2, 0xf1,
	0x27, 0xb0, 0xc6, 0x02, 0x32, 0x51, 0xcf, 0x3e, 0xdf, 0x5f, 0x7f, 0xda, 0x80, 0xf5, 0xea, 0x47,
	0xa2, 0x9c, 0xbb, 0x07, 0x88, 0xcf, 0x18, 0xae, 0x7b, 0x5e, 0x59, 0xed, 0x1c, 0x07, 0xc6, 0x7f,
	0x63, 0xc1, 0x8a, 0x41, 0x4e, 0xb8, 0xc1, 0x15, 0x18, 0x4b, 0x1c, 0x37, 0x89, 0x5d, 0x96, 0xe8,
	0x59, 0x2a, 0xd1, 0xa3, 0x81, 0x4e, 0x29, 0xa7, 0x42, 0xbd, 0x61, 0x86, 0xfb, 0x32, 0x65, 0x13,
	0x28, 0x6c, 0x9e, 0xf0, 0xd7, 0xe0, 0x7a, 0x50, 0x99, 0x37, 0x82, 0x8a, 0x92, 0xca, 0x56, 0x14,
	0x19, 0xf7, 0x6d, 0x5c, 0xc0, 0x85, 0xda, 0x8c, 0xd8, 0xca, 0x47, 0xb0, 0x2c, 0x59, 0x48, 0x91,
	0xc8, 0x8b, 0x65, 0x7d, 0x82, 0x62, 0x8b, 0xfd, 0x6a, 0xd8, 0x3c, 0x72, 0xd6, 0x27, 0xf0, 0xc7,
	0xb0, 0xcc, 0xd9, 0xea, 0x6f, 0x77, 0x33, 0xeb, 0x07, 0x78, 0x55, 0xea, 0xce, 0x78, 0x8a, 0xfb,
	0xae, 0x45, 0xc1, 0x59, 0x9e, 0xa4, 0x46, 0x89, 0xfe, 0x8d, 0xea, 0xed, 0x7a, 0x1d, 0xbf, 0x65,
	0xd6, 0xf1, 0xd1, 0x57, 0xd0, 0xa7, 0x07, 0xd3, 0xc4, 0xf3, 0x8f, 0x8a, 0xa9, 0x3c, 0x95, 0x6f,
	0x4a, 0x67, 0xa9, 0x73, 0xa4, 0xe7, 0xd9, 0x36, 0x47, 0xe6, 0x67, 0x34, 0x44, 0x25, 0x00, 0xbd,
	0xc7, 0x1e, 0x39, 0xdd, 0xc0, 0xcb, 0xbd, 0x89, 0x97, 0xf1, 0x37, 0x8e, 0x01, 0x3b, 0x72, 0x1f,
	0x08, 0x90, 0x38, 0xcc, 0x74, 0x0a, 0xdf, 0x77, 0x98, 0x0d, 0xf4, 0x9c, 0x92, 0x50, 0x4b, 0xd4,
	0xd6, 0xa4, 0x9e, 0x1d, 0x52, 0x0e, 0x16, 0xcf, 0x09, 0x42, 0x0c, 0x12, 0xc8, 0xde, 0x12, 0x3e,
	0xa0, 0xe6, 0x25, 0x90, 0x64, 0x55, 0x8e, 0xd7, 0x93, 0x96, 0x24, 0x5c, 0xbe, 0x22, 0x3c, 0x00,
	0xb4, 0x4f, 0xf2, 0xbd, 0xe4, 0x60, 0x8f, 0x9c, 0xa8, 0xcb, 0xec, 0x26, 0x2c, 0x46, 0xc9, 0x81,
	0x1b, 0x51, 0x18, 0x5b, 0xee, 0x48, 0xdd, 0xf5, 0x4b, 0x5c, 0x85, 0x82, 0xd7, 0x60, 0xc5, 0xa0,
	0x22, 0x54, 0xb9, 0x0c, 0x4b, 0xfb, 0x87, 0x45, 0x1e, 0x24, 0xa7, 0xf2, 0x81, 0x10, 0x23, 0x18,
	0x2b, 0x90, 0x40, 0xfb, 0x0d, 0x58, 0xdf, 0x2f, 0x26, 0x99, 0x9f, 0x86, 0x13, 0x62, 0xd6, 0x9e,
	0x6c, 0xe8, 0x91, 0xd7, 0x61, 0x96, 0x87, 0xf1, 0x01, 0x5b, 0x46, 0xcf, 0x29, 0xc7, 0xf8, 0x5d,
	0x78, 0xa7, 0xfc, 0x8a, 0x86, 0xba, 0x6c, 0xcb, 0xf7, 0xc9, 0x34, 0x27, 0xf2, 0x39, 0x0e, 0xdf,
	0x87, 0x35, 0x13, 0x41, 0x7b, 0x4d, 0x96, 0x35, 0xa5, 0xdc, 0x3b, 0x12, 0x49, 0x66, 0xcf, 0x31,
	0x81, 0xf8, 0x7f, 0x5a, 0x30, 0xa0, 0x9f, 0x49, 0xb2, 0xe8, 0x62, 0x2d, 0xa8, 0x74, 0xd9, 0xf8,
	0x91, 0x99, 0x9d, 0xb7, 0x2a, 0xd9, 0xf9, 0xb9, 0x49, 0xc1, 0xac, 0x12, 0xbd, 0x4a, 0x3e, 0x3a,
	0x7a, 0xf2, 0x51, 0x2d, 0xfc, 0x2f, 0x34, 0x14, 0xfe, 0xd7, 0x61, 0x21, 0x65, 0x55, 0x59, 0x51,
	0x02, 0x11, 0x23, 0x1a, 0x73, 0x78, 0xa9, 0xc0, 0x4d, 0x89, 0x4f, 0xc2, 0x13, 0x2a, 0xd3, 0x1e,
	0x8f, 0x39, 0x55, 0x38, 0xba, 0x0e, 0x23, 0x01, 0xcb, 0xc4, 0xdb, 0xe8, 0x22, 0x7f, 0x3c, 0x36,
	0xa1, 0x2c, 0xc1, 0x13, 0x11, 0x59, 0xa3, 0x0a, 0x22, 0xc1, 0xab, 0xcd, 0xd0, 0x35, 0x94, 0x50,
	0x49, 0x99, 0xa7, 0x83, 0x35, 0x38, 0x8d, 0xc5, 0x7d, 0xed, 0x08, 0xfb, 0x81, 0x4f, 0x25, 0xba,
	0x8c, 0xdb, 0x15, 0x19, 0x57, 0xa5, 0x39, 0xdf, 0x20, 0xcd, 0xeb, 0x30, 0x12, 0x67, 0xa6, 0x9b,
	0x12, 0x2f, 0x4b, 0xe4, 0x69, 0x56, 0x81, 0xe2, 0xbf, 0x6b, 0xf3, 0xd5, 0x8a, 0x63, 0xfe, 0x57,
	0x6b, 0x2c, 0x4a, 0xe5, 0x1d, 0x43, 0xe5, 0x37, 0x60, 0xc9, 0x50, 0x2d, 0x09, 0x84, 0xc6, 0xab,
	0x60, 0x7a, 0x83, 0x50, 0xaa, 0xcd, 0x85, 0xb6, 0x75, 0x50, 0x4d, 0x58, 0xd0, 0x20, 0xac, 0xab,
	0x30, 0x9f, 0x26, 0x11, 0x61, 0x2a, 0x1d, 0xa9, 0x42, 0xa3, 0x93, 0x44, 0xc4, 0x61, 0x33, 0xf4,
	0x3c, 0xa9, 0x98, 0x05, 0x09, 0xd8, 0x83, 0xc1, 0xa2, 0x53, 0x9f, 0xa0, 0x8e, 0xaa, 0x9b, 0x45,
	0xbe, 0x31, 0xe4, 0x4f, 0x8f, 0x06, 0x10, 0x5d, 0x01, 0x48, 0xdd, 0x69, 0x4a, 0xc2, 0x63, 0xef,
	0x80, 0x6c, 0x8c, 0x18, 0x8a, 0x06, 0x51, 0xae, 0xb4, 0xa4, 0xb9, 0x12, 0xfe, 0xaf, 0x16, 0x74,
	0x9e, 0xa5, 0x5e, 0x40, 0xe8, 0x0d, 0xf7, 0x98, 0x7a, 0xbc, 0x3b, 0xfb, 0xc6, 0xe9, 0xe8, 0x18,
	0xf4, 0x83, 0x5c, 0xfb, 0xa0, 0xd5, 0xf8, 0x81, 0x86, 0xa1, 0xe9, 0xa7, 0x6d, 0xe8, 0xe7, 0x3c,
	0x9d, 0x6a, 0x96, 0xd0, 0x31, 0x2d, 0xa1, 0xdc, 0xcf, 0x82, 0x1e, 0x1a, 0xa4, 0xec, 0xbb, 0x33,
	0x65, 0x7f, 0x15, 0xfa, 0x84, 0xbf, 0x40, 0xb2, 0x6a, 0x18, 0xb7, 0x04, 0x1d, 0x54, 0xde, 0x44,
	0x16, 0xcf, 0xbf, 0x89, 0xdc, 0x83, 0x81, 0x4f, 0x0d, 0x83, 0xa4, 0x53, 0x2f, 0xcd, 0xb9, 0x29,
	0xcc, 0x2e, 0xd8, 0x19, 0xb8, 0xf8, 0x43, 0x58, 0x61, 0x52, 0x7f, 0x18, 0xd2, 0x73, 0xe8, 0x4c,
	0xbb, 0x6b, 0xf1, 0xf2, 0x96, 0xa5, 0x97, 0xb7, 0xee, 0xc3, 0xaa, 0x89, 0x2c, 0x0e, 0xc1, 0x6b,
	0xb0, 0x90, 0x53, 0x78, 0xed, 0x2e, 0xc2, 0xb0, 0x1d, 0x31, 0x89, 0xff, 0xc4, 0x82, 0x21, 0x85,
	0x84, 0xf1, 0xc1, 0x1e, 0xa5, 0xc7, 0xae, 0x85, 0xc7, 0xde, 0x6b, 0x37, 0x23, 0x51, 0x24, 0xeb,
	0x32, 0x72, 0x4c, 0x05, 0x4e, 0x7f, 0x4f, 0x0a, 0x99, 0xb8, 0xc9, 0x21, 0x35, 0xc3, 0x94, 0x64,
	0x24, 0xa5, 0xa9, 0x11, 0xfb, 0x94, 0x07, 0x12, 0x13, 0x48, 0x1d, 0xa4, 0x04, 0x50, 0x22, 0x5c,
	0xa1, 0x06, 0x0c, 0xdf, 0xe1, 0x1b, 0x2a, 0x17, 0xf4, 0x26, 0xb9, 0xef, 0xdf, 0x5a, 0xb0, 0x56,
	0xf9, 0x48, 0x88, 0x61, 0x0b, 0x16, 0x98, 0x9c, 0xa4, 0x18, 0x3e, 0xd0, 0xc5, 0x50, 0x43, 0xdf,
	0xe4, 0x43, 0xf1, 0x9c, 0xc1, 0x3f, 0xb4, 0x9f, 0x42, 0x5f, 0x03, 0x37, 0x24, 0x28, 0x1f, 0x9a,
	0x75, 0xb1, 0xb5, 0x66, 0x16, 0x5a, 0xde, 0xf2, 0x35, 0x0c, 0x9e, 0xc7, 0x93, 0x1f, 0xd0, 0x11,
	0x84, 0x2e, 0xc3, 0x62, 0x4a, 0x44, 0x11, 0x42, 0xa4, 0x2b, 0x0a, 0x80, 0x97, 0x60, 0x28, 0xe8,
	0xaa, 0x46, 0x8e, 0xe7, 0x71, 0x94, 0xf8, 0x47, 0x6f, 0xda, 0xc8, 0xf1, 0x0d, 0x20, 0xfd, 0x03,
	0x95, 0x50, 0x15, 0x0c, 0x5a, 0x49, 0xa8, 0x24, 0x90, 0x25, 0x54, 0xef, 0x42, 0x5f, 0x47, 0xe1,
	0xef, 0xbe, 0xa0, 0x10, 0xf0, 0x1f, 0x5b, 0xb0, 0xf4, 0x22, 0xcc, 0x0f, 0x83, 0xd4, 0x3b, 0x7d,
	0x03, 0xa5, 0x56, 0x9b, 0x6a, 0x5a, 0xe7, 0x35, 0xd5, 0xb4, 0xab, 0x4d, 0x35, 0x5e, 0x14, 0x89,
	0xba, 0x10, 0xfd, 0xa9, 0x57, 0xfe, 0x87, 0xbc, 0xf2, 0x7f, 0x0f, 0xc6, 0x6a, 0x31, 0x6f, 0x57,
	0xf6, 0xbf, 0x79, 0x03, 0x16, 0x4b, 0x7f, 0x47, 0x5d, 0x68, 0x6f, 0x3f, 0xff, 0xed, 0xf1, 0x1c,
	0xea, 0xc1, 0xfc, 0xfe, 0xee, 0xde, 0x1e, 0x7f, 0x61, 0x63, 0x8f, 0x6e, 0xad, 0x9b, 0x37, 0x61,
	0x9e, 0x46, 0x17, 0xb4, 0x08, 0x9d, 0x67, 0x5b, 0x5f, 0xed, 0x3a, 0xe3, 0x39, 0xfa, 0xf3, 0x67,
	0xec, 0xa7, 0x85, 0x06, 0xd0, 0x7b, 0xf4, 0xf8, 0xd9, 0xae, 0xf3, 0x78, 0x6b, 0x6f, 0xdc, 0xba,
	0xf9, 0x02, 0x7a, 0x32, 0x3b, 0xa4, 0x48, 0x5b, 0x7b, 0xbb, 0xce, 0x33, 0x8e, 0xbf, 0xeb, 0x38,
	0x4f, 0x1c, 0x4e, 0xf7, 0xc5, 0x96, 0xf3, 0x78, 0xdc, 0xa2, 0xbf, 0x1e, 0x3d, 0xfe, 0xe9, 0x93,
	0x71, 0x1b, 0xf5, 0xa1, 0xfb, 0xf5, 0xae, 0xb3, 0xfd, 0x64, 0x7f, 0x77, 0x3c, 0x4f, 0x71, 0x1f,
	0xec, 0x6e, 0x3f, 0xff, 0x62, 0xdc, 0x61, 0x1c, 0x9d, 0xad, 0x9d, 0xdd, 0xf1, 0xc2, 0x9d, 0x7f,
	0xb7, 0xa0, 0xfb, 0xb2, 0x08, 0x1e, 0xc5, 0x61, 0x8e, 0x76, 0x01, 0x54, 0xa3, 0x0e, 0xba, 0x58,
	0x3e, 0x38, 0x55, 0xdb, 0x7d, 0x6c, 0xbb, 0x69, 0x4a, 0x98, 0xd5, 0x1c, 0x7a, 0x08, 0x7d, 0x2d,
	0xf3, 0x46, 0xf6, 0xec, 0x2b, 0x82, 0x7d, 0xa9, 0x71, 0xae, 0xa4, 0xb4, 0x0b, 0xa0, 0x2c, 0x4e,
	0x2d, 0xa8, 0x66, 0xb6, 0x6a, 0x41, 0x75, 0x03, 0xc5, 0x73, 0x77, 0xfe, 0xf0, 0x12, 0xb4, 0x5f,
	0x16, 0x01, 0x7a, 0x09, 0x7d, 0xad, 0x5d, 0x12, 0xd5, 0x1e, 0x73, 0xd5, 0x72, 0x9a, 0xba, 0x2a,
	0xed, 0x5f, 0xfe, 0xf3, 0x7f, 0xfc, 0x59, 0x6b, 0x15, 0x2f, 0xdd, 0x3a, 0xf9, 0xf5, 0x5b, 0x5e,
	0x10, 0x48, 0x5b, 0xbc, 0x67, 0xdd, 0x44, 0x0e, 0x74, 0x45, 0x47, 0x24, 0x5a, 0xd7, 0x68, 0x68,
	0xd7, 0x38, 0xfb, 0x42, 0x0d, 0x2e, 0xe8, 0xae, 0x33, 0xba, 0x63, 0xdc, 0x17, 0x74, 0xe9, 0x31,
	0x45, 0x69, 0x6e, 0x43, 0x7b, 0xdb, 0x8b, 0x11, 0x52, 0xbd, 0x1a, 0x32, 0x26, 0xd8, 0x2b, 0x06,
	0x4c, 0xd0, 0x41, 0x8c, 0xce, 0x00, 0x77, 0x29, 0x9d, 0x89, 0x17, 0x53, 0x1a, 0x07, 0x30, 0x32,
	0x3b, 0xe1, 0xd0, 0x3b, 0xfa, 0x93, 0x63, 0xad, 0x05, 0xcf, 0xbe, 0x32, 0x6b, 0xba, 0xb2, 0xd8,
	0x11, 0x65, 0xe2, 0x33, 0x1c, 0x1a, 0x1f, 0x90, 0x0f, 0x03, 0xbd, 0x31, 0x0d, 0xa9, 0xf6, 0xa8,
	0x7a, 0xb7, 0x9d, 0x7d, 0xb9, 0x79, 0x52, 0xb0, 0xd8, 0x60, 0x2c, 0x10, 0x1e, 0x33, 0x16, 0x14,
	0x43, 0xbc, 0x89, 0x52, 0x29, 0x8b, 0x6e, 0x34, 0x25, 0x65, 0xb3, 0x99, 0x4d, 0x49, 0xb9, 0xda,
	0xb6, 0x66, 0x48, 0x59, 0xc4, 0x44, 0x2a, 0xa1, 0x5f, 0xc0, 0xf0, 0x05, 0x6b, 0xc8, 0x14, 0x3d,
	0x50, 0x8a, 0xb2, 0xd9, 0x42, 0xa5, 0x28, 0x57, 0x9a, 0xa5, 0xf0, 0x65, 0x46, 0x79, 0x1d, 0x2f,
	0x53, 0xca, 0xbc, 0xb9, 0x33, 0xe0, 0x28, 0xc2, 0x32, 0x7e, 0x30, 0x65, 0x63, 0xcd, 0x1a, 0xcd,
	0xdf, 0x85, 0xa1, 0xd1, 0x42, 0x85, 0x4a, 0x81, 0x36, 0xf5, 0x66, 0xd9, 0xef, 0xcc, 0x98, 0x6d,
	0x5a, 0x7f, 0x20, 0x50, 0x58, 0xd3, 0x15, 0xe5, 0xf5, 0x12, 0x40, 0xb5, 0x22, 0x29, 0x17, 0xac,
	0xb5, 0x3f, 0x29, 0x17, 0xac, 0x77, 0x2e, 0xe1, 0x15, 0xc6, 0x62, 0x88, 0xfa, 0xdc, 0x34, 0x39,
	0xad, 0x3d, 0xe8, 0x8a, 0xa6, 0x1b, 0x25, 0x19, 0xb3, 0xf3, 0x48, 0x49, 0xa6, 0xd2, 0x9d, 0x83,
	0xc7, 0x8c, 0x20, 0xa0, 0x1e, 0x25, 0x18, 0x52, 0x12, 0xbf, 0x03, 0x7d, 0xad, 0x63, 0x05, 0xe9,
	0xab, 0xa9, 0x34, 0xb7, 0x28, 0x2f, 0x6f, 0x68, 0x71, 0xc1, 0xab, 0x8c, 0xf2, 0x08, 0x0d, 0x28,
	0x65, 0x59, 0x2b, 0x11, 0xd4, 0x65, 0x4b, 0x8a, 0x41, 0xbd, 0xd2, 0xe7, 0x62, 0x50, 0xaf, 0xf6,
	0xb0, 0x98, 0xd4, 0xa9, 0x8c, 0xd9, 0xda, 0x5f, 0x00, 0xa8, 0xee, 0x09, 0x25, 0xe3, 0x5a, 0x1b,
	0x88, 0x92, 0x71, 0xbd, 0xd9, 0x42, 0xba, 0x3f, 0x02, 0x4a, 0x5a, 0xbc, 0x3d, 0x1d, 0xc0, 0xc8,
	0x6c, 0x6e, 0x51, 0xee, 0xdf, 0xd8, 0x0d, 0xa3, 0xdc, 0xbf, 0xb9, 0x27, 0x46, 0x5a, 0x24, 0xe2,
	0xee, 0xaf, 0xc8, 0xee, 0xc3, 0x62, 0xd9, 0x76, 0x81, 0x36, 0x74, 0x22, 0x7a, 0x77, 0x86, 0x7d,
	0xb1, 0x61, 0x46, 0x96, 0x3a, 0x18, 0xe5, 0x3e, 0x5a, 0xa4, 0x94, 0xf9, 0xab, 0x8c, 0x24, 0xca,
	0x1a, 0xc0, 0x4c, 0xa2, 0x5a, 0xcf, 0x46, 0x85, 0xa8, 0xde, 0xb9, 0x51, 0x21, 0xca, 0xe8, 0xb8,
	0xd0, 0xd7, 0x1e, 0xf5, 0x95, 0x26, 0xeb, 0x1d, 0x09, 0x4a, 0x93, 0x0d, 0x5d, 0x00, 0xf8, 0x02,
	0x23, 0xbd, 0xcc, 0x4f, 0x83, 0x64, 0x4a, 0x62, 0x19, 0xa4, 0xbe, 0x11, 0xe7, 0xff, 0x76, 0x92,
	0x1c, 0xa9, 0x55, 0x57, 0x9f, 0xb1, 0xd5, 0xaa, 0x6b, 0x0f, 0xa4, 0x65, 0x00, 0x1c, 0x96, 0x9a,
	0x9c, 0x24, 0xc9, 0x11, 0x75, 0xc6, 0x9f, 0x03, 0xa8, 0x02, 0xbb, 0x32, 0x94, 0xda, 0xd3, 0x8b,
	0x72, 0x9c, 0x4a, 0x3d, 0x1e, 0x5f, 0x64, 0xb4, 0x57, 0x78, 0xfc, 0x66, 0x8f, 0x1e, 0x8c, 0xc1,
	0x3d, 0xeb, 0xe6, 0x6d, 0x0b, 0xbd, 0x82, 0x91, 0xc2, 0xdf, 0x3f, 0x8b, 0xfd, 0xf3, 0x58, 0xd8,
	0x4d, 0x53, 0x62, 0x07, 0xef, 0x30, 0x2e, 0x17, 0x30, 0x32, 0xb9, 0x64, 0x67, 0xb1, 0x4f, 0xb7,
	0xf1, 0x0d, 0xf4, 0xb5, 0x56, 0x4e, 0xa5, 0x83, 0x7a, 0x7f, 0xa7, 0xdd, 0xf4, 0x04, 0x60, 0x9e,
	0xc4, 0xe2, 0xfe, 0x95, 0x9d, 0x7a, 0x53, 0x4a, 0x3b, 0x86, 0x91, 0x59, 0xe9, 0x56, 0x26, 0xdf,
	0x58, 0x36, 0x57, 0x26, 0x3f, 0xa3, 0x40, 0x6e, 0xec, 0x85, 0x17, 0x78, 0xf5, 0x93, 0x7f, 0x42,
	0x93, 0x9d, 0xb2, 0xe0, 0xad, 0x27, 0x3b, 0xd5, 0xa2, 0xba, 0x9e, 0xec, 0xd4, 0x2a, 0xe4, 0xe6,
	0x9e, 0x38, 0x1b, 0xa9, 0x19, 0x94, 0xc2, 0x52, 0xa5, 0x1a, 0x8d, 0x2a, 0xab, 0xae, 0x16, 0xb0,
	0xed, 0x77, 0x67, 0xce, 0x0b, 0x7e, 0x57, 0x18, 0xbf, 0x0d, 0xbc, 0xa2, 0xf8, 0x79, 0x51, 0xc4,
	0xd5, 0xc4, 0xcf, 0x45, 0x50, 0xb5, 0x65, 0x65, 0x07, 0xb5, 0xf2, 0xb4, 0x6d, 0x37, 0x4d, 0x09,
	0x26, 0x86, 0xb5, 0x71, 0x26, 0x32, 0xbb, 0x99, 0x40, 0x5f, 0xab, 0x78, 0x2a, 0xb9, 0xd5, 0x8b,
	0xa9, 0x4a, 0x6e, 0x4d, 0x25, 0x52, 0x43, 0x6e, 0x19, 0xc9, 0xa3, 0xe4, 0x80, 0x95, 0x54, 0x29,
	0x8f, 0xaf, 0xa1, 0x27, 0x6b, 0xa5, 0xa8, 0xf4, 0x88, 0x4a, 0x41, 0xd5, 0xde, 0xa8, 0x4f, 0x54,
	0x5c, 0x9c, 0x05, 0xeb, 0x4c, 0xcc, 0x52, 0xba, 0x04, 0x96, 0x2a, 0xf5, 0x56, 0xa5, 0x8f, 0xe6,
	0x42, 0xac, 0x6d, 0x76, 0xa4, 0xf2, 0x47, 0x7a, 0x7c, 0x89, 0x31, 0x58, 0x43, 0x4c, 0x07, 0x99,
	0xfc, 0x90, 0xeb, 0xe0, 0xb6, 0x85, 0xa6, 0x95, 0xfa, 0xab, 0x28, 0xe4, 0x69, 0x41, 0xbc, 0xb1,
	0x3c, 0x6b, 0x37, 0x3d, 0x60, 0xe1, 0xf7, 0x18, 0xaf, 0x4b, 0xe8, 0xa2, 0xc1, 0x8b, 0x7a, 0x8d,
	0x7c, 0xbf, 0xbb, 0x6d, 0xa1, 0x09, 0x8c, 0x4c, 0x92, 0x6f, 0xc5, 0xaa, 0xe2, 0x9e, 0x08, 0xd5,
	0x58, 0x51, 0x1e, 0xbf, 0xaf, 0x15, 0xab, 0x8d, 0xb2, 0x33, 0xba, 0xd6, 0xcc, 0xab, 0x52, 0x96,
	0xb6, 0x57, 0x75, 0x9e, 0x72, 0x12, 0x63, 0xc6, 0xf4, 0x32, 0xb2, 0xeb, 0x4c, 0x3d, 0x81, 0xc3,
	0x22, 0xdc, 0x40, 0x2f, 0x88, 0xa8, 0x34, 0xb5, 0xa1, 0xa6, 0xa2, 0xd2, 0xd4, 0xa6, 0x1a, 0x8a,
	0x54, 0x1e, 0x4f, 0x53, 0x59, 0xc1, 0xe4, 0x90, 0x63, 0xf0, 0xbc, 0xbb, 0x52, 0x38, 0xb9, 0x3c,
	0xa3, 0xb4, 0x50, 0xc9, 0xd0, 0x1a, 0x0b, 0x0f, 0xd2, 0x8d, 0xd0, 0xb2, 0x64, 0x15, 0xc6, 0x07,
	0xbc, 0xfe, 0x80, 0xbe, 0x84, 0x0e, 0xbb, 0xd5, 0xa3, 0x55, 0x75, 0x03, 0x52, 0xc5, 0x03, 0x7b,
	0xad, 0x02, 0x35, 0xd3, 0x10, 0xcc, 0xce, 0xc5, 0x22, 0x16, 0x97, 0x85, 0x09, 0x8c, 0x78, 0x2a,
	0x2c, 0xef, 0xbe, 0xca, 0x69, 0x2a, 0x57, 0x73, 0xe5, 0x34, 0xd5, 0x6b, 0xb2, 0x19, 0x2e, 0x79,
	0x36, 0x7c, 0x2a, 0x70, 0xee, 0x59, 0x37, 0x27, 0x0b, 0xec, 0x8f, 0x6b, 0x9f, 0xfc, 0x6f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x83, 0x88, 0x9e, 0xa8, 0xe3, 0x36, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// XudInitClient is the client API for XudInit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type XudInitClient interface {
	// Creates an xud identity node key and underlying wallets. The node key and
	// wallets are derived from a single seed and encrypted using a single
	// password provided as a parameter to the call.
	// shell: xucli create
	CreateNode(ctx context.Context, in *CreateNodeRequest, opts ...grpc.CallOption) (*CreateNodeResponse, error)
	// Restores an xud instance and underlying wallets from a seed.
	// shell: xucli restore [backup_directory]
	RestoreNode(ctx context.Context, in *RestoreNodeRequest, opts ...grpc.CallOption) (*RestoreNodeResponse, error)
	// Unlocks and decrypts the xud node key and any underlying wallets.
	// shell: xucli unlock
	UnlockNode(ctx context.Context, in *UnlockNodeRequest, opts ...grpc.CallOption) (*UnlockNodeResponse, error)
}

type xudInitClient struct {
	cc *grpc.ClientConn
}

func NewXudInitClient(cc *grpc.ClientConn) XudInitClient {
	return &xudInitClient{cc}
}

func (c *xudInitClient) CreateNode(ctx context.Context, in *CreateNodeRequest, opts ...grpc.CallOption) (*CreateNodeResponse, error) {
	out := new(CreateNodeResponse)
	err := c.cc.Invoke(ctx, "/xudrpc.XudInit/CreateNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xudInitClient) RestoreNode(ctx context.Context, in *RestoreNodeRequest, opts ...grpc.CallOption) (*RestoreNodeResponse, error) {
	out := new(RestoreNodeResponse)
	err := c.cc.Invoke(ctx, "/xudrpc.XudInit/RestoreNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xudInitClient) UnlockNode(ctx context.Context, in *UnlockNodeRequest, opts ...grpc.CallOption) (*UnlockNodeResponse, error) {
	out := new(UnlockNodeResponse)
	err := c.cc.Invoke(ctx, "/xudrpc.XudInit/UnlockNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// XudInitServer is the server API for XudInit service.
type XudInitServer interface {
	// Creates an xud identity node key and underlying wallets. The node key and
	// wallets are derived from a single seed and encrypted using a single
	// password provided as a parameter to the call.
	// shell: xucli create
	CreateNode(context.Context, *CreateNodeRequest) (*CreateNodeResponse, error)
	// Restores an xud instance and underlying wallets from a seed.
	// shell: xucli restore [backup_directory]
	RestoreNode(context.Context, *RestoreNodeRequest) (*RestoreNodeResponse, error)
	// Unlocks and decrypts the xud node key and any underlying wallets.
	// shell: xucli unlock
	UnlockNode(context.Context, *UnlockNodeRequest) (*UnlockNodeResponse, error)
}

func RegisterXudInitServer(s *grpc.Server, srv XudInitServer) {
	s.RegisterService(&_XudInit_serviceDesc, srv)
}

func _XudInit_CreateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XudInitServer).CreateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xudrpc.XudInit/CreateNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XudInitServer).CreateNode(ctx, req.(*CreateNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _XudInit_RestoreNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XudInitServer).RestoreNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xudrpc.XudInit/RestoreNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XudInitServer).RestoreNode(ctx, req.(*RestoreNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _XudInit_UnlockNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XudInitServer).UnlockNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xudrpc.XudInit/UnlockNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XudInitServer).UnlockNode(ctx, req.(*UnlockNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _XudInit_serviceDesc = grpc.ServiceDesc{
	ServiceName: "xudrpc.XudInit",
	HandlerType: (*XudInitServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNode",
			Handler:    _XudInit_CreateNode_Handler,
		},
		{
			MethodName: "RestoreNode",
			Handler:    _XudInit_RestoreNode_Handler,
		},
		{
			MethodName: "UnlockNode",
			Handler:    _XudInit_UnlockNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "xudrpc.proto",
}

// XudClient is the client API for Xud service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type XudClient interface {
	// Adds a currency to the list of supported currencies. Once added, the currency may be used for
	// new trading pairs.
	// shell: xucli addcurrency <currency> <swap_client> [decimal_places] [token_address]
	AddCurrency(ctx context.Context, in *Currency, opts ...grpc.CallOption) (*AddCurrencyResponse, error)
	// Adds a trading pair to the list of supported trading pairs. The newly supported pair is
	// advertised to peers so they may begin sending orders for it.
	// shell: xucli addpair <base_currency> <quote_currency>
	AddPair(ctx context.Context, in *AddPairRequest, opts ...grpc.CallOption) (*AddPairResponse, error)
	// Bans a node and immediately disconnects from it. This can be used to prevent any connections
	// to a specific node.
	// shell: xucli ban <node_identifier>
	Ban(ctx context.Context, in *BanRequest, opts ...grpc.CallOption) (*BanResponse, error)
	// Changes the xud master password, including the wallet passwords for any underlying clients.
	// shell: xucli changepass
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error)
	// Closes any existing payment channels with a peer for the specified currency.
	// shell: xucli closechannel <currency> [node_identifier ] [--force]
	CloseChannel(ctx context.Context, in *CloseChannelRequest, opts ...grpc.CallOption) (*CloseChannelResponse, error)
	// Attempts to connect to a node. Once connected, the node is added to the list of peers and
	// becomes available for swaps and trading. A handshake exchanges information about the peer's
	// supported trading and swap clients. Orders will be shared with the peer upon connection and
	// upon new order placements.
	// shell: xucli connect <node_uri>
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error)
	// Gets an address to deposit a given currency into the xud wallets.
	// shell: xucli walletdeposit <currency>
	WalletDeposit(ctx context.Context, in *DepositRequest, opts ...grpc.CallOption) (*DepositResponse, error)
	// Gets an address to deposit a given currency directly into a channel.
	// shell: xucli deposit <currency>
	Deposit(ctx context.Context, in *DepositRequest, opts ...grpc.CallOption) (*DepositResponse, error)
	// Discover nodes from a specific peer and apply new connections
	DiscoverNodes(ctx context.Context, in *DiscoverNodesRequest, opts ...grpc.CallOption) (*DiscoverNodesResponse, error)
	// Gets the total balance available across all payment channels and wallets for one or all currencies.
	// shell: xucli getbalance [currency]
	GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error)
	// Gets general information about this node.
	// shell: xucli getinfo
	GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error)
	// Gets the master seed mnemonic .
	// shell: xucli getnemonic
	GetMnemonic(ctx context.Context, in *GetMnemonicRequest, opts ...grpc.CallOption) (*GetMnemonicResponse, error)
	// Gets general information about a node.
	// shell: xucli getnodeinfo <node_identifier>
	GetNodeInfo(ctx context.Context, in *GetNodeInfoRequest, opts ...grpc.CallOption) (*GetNodeInfoResponse, error)
	// Gets orders from the order book. This call returns the state of the order book at a given point
	// in time, although it is not guaranteed to still be vaild by the time a response is received
	// and processed by a client. It accepts an optional trading pair id parameter. If specified, only
	// orders for that particular trading pair are returned. Otherwise, all orders are returned. Orders
	// are separated into buys and sells for each trading pair, but unsorted.
	// shell: xucli listorders [pair_id] [include_own_orders] [limit]
	ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error)
	// Gets a list of this node's supported currencies.
	// shell: xucli listcurrencies
	ListCurrencies(ctx context.Context, in *ListCurrenciesRequest, opts ...grpc.CallOption) (*ListCurrenciesResponse, error)
	// Gets a list of this nodes suported trading pairs.
	// shell: xucli listpairs
	ListPairs(ctx context.Context, in *ListPairsRequest, opts ...grpc.CallOption) (*ListPairsResponse, error)
	// Gets a list of connected peers.
	// shell: xucli listpeers
	ListPeers(ctx context.Context, in *ListPeersRequest, opts ...grpc.CallOption) (*ListPeersResponse, error)
	// Opens a payment channel to a peer for the specified amount and currency.
	// shell: xucli openchannel <currency> <amount> [node_identifier] [push_amount]
	OpenChannel(ctx context.Context, in *OpenChannelRequest, opts ...grpc.CallOption) (*OpenChannelResponse, error)
	// Gets an order book depth chart where orders are grouped into "buckets"
	// according to their price rounded to a given level of precision.
	// shell: xucli orderbook [pair_id] [precision]
	OrderBook(ctx context.Context, in *OrderBookRequest, opts ...grpc.CallOption) (*OrderBookResponse, error)
	// Adds an order to the order book.
	// If price is zero or unspecified a market order will get added.
	PlaceOrder(ctx context.Context, in *PlaceOrderRequest, opts ...grpc.CallOption) (Xud_PlaceOrderClient, error)
	// The synchronous, non-streaming version of PlaceOrder.
	// shell: xucli buy <quantity> <pair_id> <price> [order_id] [stream]
	// shell: xucli sell <quantity> <pair_id> <price> [order_id] [stream]
	PlaceOrderSync(ctx context.Context, in *PlaceOrderRequest, opts ...grpc.CallOption) (*PlaceOrderResponse, error)
	// Executes a swap on a maker peer order.
	ExecuteSwap(ctx context.Context, in *ExecuteSwapRequest, opts ...grpc.CallOption) (*SwapSuccess, error)
	// Removes a currency from the list of supported currencies. Only currencies that are not in use
	// for any currently supported trading pairs may be removed. Once removed, the currency can no
	// longer be used for any supported trading pairs.
	// shell: xucli removecurrency <currency>
	RemoveCurrency(ctx context.Context, in *RemoveCurrencyRequest, opts ...grpc.CallOption) (*RemoveCurrencyResponse, error)
	// Removes an order from the order book by its local id. This should be called when an order is
	// canceled or filled outside of xud. Removed orders become immediately unavailable for swaps,
	// and peers are notified that the order is no longer valid. Any portion of the order that is
	// on hold due to ongoing swaps will not be removed until after the swap attempts complete.
	// shell: xucli removeorder <order_id> [quantity]
	RemoveOrder(ctx context.Context, in *RemoveOrderRequest, opts ...grpc.CallOption) (*RemoveOrderResponse, error)
	// Removes all orders from the order book. Removed orders become immediately unavailable for swaps,
	// and peers are notified that the orders are no longer valid. Any portion of the orders that is
	// on hold due to ongoing swaps will not be removed until after the swap attempts complete.
	// shell: xucli removeallorders
	RemoveAllOrders(ctx context.Context, in *RemoveAllOrdersRequest, opts ...grpc.CallOption) (*RemoveAllOrdersResponse, error)
	// Removes a trading pair from the list of currently supported trading pair. This call will
	// effectively cancel any standing orders for that trading pair. Peers are informed when a pair
	// is no longer supported so that they will know to stop sending orders for it.
	// shell: xucli removepair <pair_id>
	RemovePair(ctx context.Context, in *RemovePairRequest, opts ...grpc.CallOption) (*RemovePairResponse, error)
	// Set the logging level.
	// shell: xucli loglevel <level>
	SetLogLevel(ctx context.Context, in *SetLogLevelRequest, opts ...grpc.CallOption) (*SetLogLevelResponse, error)
	// Begin gracefully shutting down xud.
	// shell: xucli shutdown
	Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error)
	// Subscribes to orders being added to and removed from the order book. This call allows the client
	// to maintain an up-to-date view of the order book. For example, an exchange that wants to show
	// its users a real time view of the orders available to them would subscribe to this streaming
	// call to be alerted as new orders are added and expired orders are removed.
	SubscribeOrders(ctx context.Context, in *SubscribeOrdersRequest, opts ...grpc.CallOption) (Xud_SubscribeOrdersClient, error)
	// Subscribes to failed swaps. By default, only swaps that are initiated by a remote peer are
	// transmitted unless a flag is set to include swaps initiated by the local node. This call allows
	// the client to get real-time notifications when swap attempts are failing. It can be used for
	// status monitoring, debugging, and testing purposes.
	SubscribeSwapFailures(ctx context.Context, in *SubscribeSwapsRequest, opts ...grpc.CallOption) (Xud_SubscribeSwapFailuresClient, error)
	// Subscribes to completed swaps. By default, only swaps that are initiated by a remote peer are
	// transmitted unless a flag is set to include swaps initiated by the local node. This call allows
	// the client to get real-time notifications when its orders are filled by a peer. It can be used
	// for tracking order executions, updating balances, and informing a trader when one of their orders
	// is settled through the Exchange Union network.
	SubscribeSwaps(ctx context.Context, in *SubscribeSwapsRequest, opts ...grpc.CallOption) (Xud_SubscribeSwapsClient, error)
	// Subscribes to accepted swaps. This stream emits a message when the local xud node
	// accepts a swap request from a peer, but before the swap has actually succeeded.
	SubscribeSwapsAccepted(ctx context.Context, in *SubscribeSwapsAcceptedRequest, opts ...grpc.CallOption) (Xud_SubscribeSwapsAcceptedClient, error)
	// Gets a list of completed trades.
	// shell: xucli tradehistory [limit]
	TradeHistory(ctx context.Context, in *TradeHistoryRequest, opts ...grpc.CallOption) (*TradeHistoryResponse, error)
	// Gets the trading limits for one or all currencies.
	// shell: xucli tradinglimits [currency]
	TradingLimits(ctx context.Context, in *TradingLimitsRequest, opts ...grpc.CallOption) (*TradingLimitsResponse, error)
	// Removes a ban from a node manually and, optionally, attempts to connect to it.
	// shell: xucli unban <node_identifier> [reconnect]
	Unban(ctx context.Context, in *UnbanRequest, opts ...grpc.CallOption) (*UnbanResponse, error)
	// Withdraws a given currency from the xud wallets to a specified address.
	// shell: xucli withdraw [amount] [currency] <destination> [fee]
	WalletWithdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawResponse, error)
}

type xudClient struct {
	cc *grpc.ClientConn
}

func NewXudClient(cc *grpc.ClientConn) XudClient {
	return &xudClient{cc}
}

func (c *xudClient) AddCurrency(ctx context.Context, in *Currency, opts ...grpc.CallOption) (*AddCurrencyResponse, error) {
	out := new(AddCurrencyResponse)
	err := c.cc.Invoke(ctx, "/xudrpc.Xud/AddCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xudClient) AddPair(ctx context.Context, in *AddPairRequest, opts ...grpc.CallOption) (*AddPairResponse, error) {
	out := new(AddPairResponse)
	err := c.cc.Invoke(ctx, "/xudrpc.Xud/AddPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xudClient) Ban(ctx context.Context, in *BanRequest, opts ...grpc.CallOption) (*BanResponse, error) {
	out := new(BanResponse)
	err := c.cc.Invoke(ctx, "/xudrpc.Xud/Ban", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xudClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error) {
	out := new(ChangePasswordResponse)
	err := c.cc.Invoke(ctx, "/xudrpc.Xud/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xudClient) CloseChannel(ctx context.Context, in *CloseChannelRequest, opts ...grpc.CallOption) (*CloseChannelResponse, error) {
	out := new(CloseChannelResponse)
	err := c.cc.Invoke(ctx, "/xudrpc.Xud/CloseChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xudClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error) {
	out := new(ConnectResponse)
	err := c.cc.Invoke(ctx, "/xudrpc.Xud/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xudClient) WalletDeposit(ctx context.Context, in *DepositRequest, opts ...grpc.CallOption) (*DepositResponse, error) {
	out := new(DepositResponse)
	err := c.cc.Invoke(ctx, "/xudrpc.Xud/WalletDeposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xudClient) Deposit(ctx context.Context, in *DepositRequest, opts ...grpc.CallOption) (*DepositResponse, error) {
	out := new(DepositResponse)
	err := c.cc.Invoke(ctx, "/xudrpc.Xud/Deposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xudClient) DiscoverNodes(ctx context.Context, in *DiscoverNodesRequest, opts ...grpc.CallOption) (*DiscoverNodesResponse, error) {
	out := new(DiscoverNodesResponse)
	err := c.cc.Invoke(ctx, "/xudrpc.Xud/DiscoverNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xudClient) GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error) {
	out := new(GetBalanceResponse)
	err := c.cc.Invoke(ctx, "/xudrpc.Xud/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xudClient) GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error) {
	out := new(GetInfoResponse)
	err := c.cc.Invoke(ctx, "/xudrpc.Xud/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xudClient) GetMnemonic(ctx context.Context, in *GetMnemonicRequest, opts ...grpc.CallOption) (*GetMnemonicResponse, error) {
	out := new(GetMnemonicResponse)
	err := c.cc.Invoke(ctx, "/xudrpc.Xud/GetMnemonic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xudClient) GetNodeInfo(ctx context.Context, in *GetNodeInfoRequest, opts ...grpc.CallOption) (*GetNodeInfoResponse, error) {
	out := new(GetNodeInfoResponse)
	err := c.cc.Invoke(ctx, "/xudrpc.Xud/GetNodeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xudClient) ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error) {
	out := new(ListOrdersResponse)
	err := c.cc.Invoke(ctx, "/xudrpc.Xud/ListOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xudClient) ListCurrencies(ctx context.Context, in *ListCurrenciesRequest, opts ...grpc.CallOption) (*ListCurrenciesResponse, error) {
	out := new(ListCurrenciesResponse)
	err := c.cc.Invoke(ctx, "/xudrpc.Xud/ListCurrencies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xudClient) ListPairs(ctx context.Context, in *ListPairsRequest, opts ...grpc.CallOption) (*ListPairsResponse, error) {
	out := new(ListPairsResponse)
	err := c.cc.Invoke(ctx, "/xudrpc.Xud/ListPairs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xudClient) ListPeers(ctx context.Context, in *ListPeersRequest, opts ...grpc.CallOption) (*ListPeersResponse, error) {
	out := new(ListPeersResponse)
	err := c.cc.Invoke(ctx, "/xudrpc.Xud/ListPeers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xudClient) OpenChannel(ctx context.Context, in *OpenChannelRequest, opts ...grpc.CallOption) (*OpenChannelResponse, error) {
	out := new(OpenChannelResponse)
	err := c.cc.Invoke(ctx, "/xudrpc.Xud/OpenChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xudClient) OrderBook(ctx context.Context, in *OrderBookRequest, opts ...grpc.CallOption) (*OrderBookResponse, error) {
	out := new(OrderBookResponse)
	err := c.cc.Invoke(ctx, "/xudrpc.Xud/OrderBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xudClient) PlaceOrder(ctx context.Context, in *PlaceOrderRequest, opts ...grpc.CallOption) (Xud_PlaceOrderClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Xud_serviceDesc.Streams[0], "/xudrpc.Xud/PlaceOrder", opts...)
	if err != nil {
		return nil, err
	}
	x := &xudPlaceOrderClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Xud_PlaceOrderClient interface {
	Recv() (*PlaceOrderEvent, error)
	grpc.ClientStream
}

type xudPlaceOrderClient struct {
	grpc.ClientStream
}

func (x *xudPlaceOrderClient) Recv() (*PlaceOrderEvent, error) {
	m := new(PlaceOrderEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *xudClient) PlaceOrderSync(ctx context.Context, in *PlaceOrderRequest, opts ...grpc.CallOption) (*PlaceOrderResponse, error) {
	out := new(PlaceOrderResponse)
	err := c.cc.Invoke(ctx, "/xudrpc.Xud/PlaceOrderSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xudClient) ExecuteSwap(ctx context.Context, in *ExecuteSwapRequest, opts ...grpc.CallOption) (*SwapSuccess, error) {
	out := new(SwapSuccess)
	err := c.cc.Invoke(ctx, "/xudrpc.Xud/ExecuteSwap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xudClient) RemoveCurrency(ctx context.Context, in *RemoveCurrencyRequest, opts ...grpc.CallOption) (*RemoveCurrencyResponse, error) {
	out := new(RemoveCurrencyResponse)
	err := c.cc.Invoke(ctx, "/xudrpc.Xud/RemoveCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xudClient) RemoveOrder(ctx context.Context, in *RemoveOrderRequest, opts ...grpc.CallOption) (*RemoveOrderResponse, error) {
	out := new(RemoveOrderResponse)
	err := c.cc.Invoke(ctx, "/xudrpc.Xud/RemoveOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xudClient) RemoveAllOrders(ctx context.Context, in *RemoveAllOrdersRequest, opts ...grpc.CallOption) (*RemoveAllOrdersResponse, error) {
	out := new(RemoveAllOrdersResponse)
	err := c.cc.Invoke(ctx, "/xudrpc.Xud/RemoveAllOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xudClient) RemovePair(ctx context.Context, in *RemovePairRequest, opts ...grpc.CallOption) (*RemovePairResponse, error) {
	out := new(RemovePairResponse)
	err := c.cc.Invoke(ctx, "/xudrpc.Xud/RemovePair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xudClient) SetLogLevel(ctx context.Context, in *SetLogLevelRequest, opts ...grpc.CallOption) (*SetLogLevelResponse, error) {
	out := new(SetLogLevelResponse)
	err := c.cc.Invoke(ctx, "/xudrpc.Xud/SetLogLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xudClient) Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error) {
	out := new(ShutdownResponse)
	err := c.cc.Invoke(ctx, "/xudrpc.Xud/Shutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xudClient) SubscribeOrders(ctx context.Context, in *SubscribeOrdersRequest, opts ...grpc.CallOption) (Xud_SubscribeOrdersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Xud_serviceDesc.Streams[1], "/xudrpc.Xud/SubscribeOrders", opts...)
	if err != nil {
		return nil, err
	}
	x := &xudSubscribeOrdersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Xud_SubscribeOrdersClient interface {
	Recv() (*OrderUpdate, error)
	grpc.ClientStream
}

type xudSubscribeOrdersClient struct {
	grpc.ClientStream
}

func (x *xudSubscribeOrdersClient) Recv() (*OrderUpdate, error) {
	m := new(OrderUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *xudClient) SubscribeSwapFailures(ctx context.Context, in *SubscribeSwapsRequest, opts ...grpc.CallOption) (Xud_SubscribeSwapFailuresClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Xud_serviceDesc.Streams[2], "/xudrpc.Xud/SubscribeSwapFailures", opts...)
	if err != nil {
		return nil, err
	}
	x := &xudSubscribeSwapFailuresClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Xud_SubscribeSwapFailuresClient interface {
	Recv() (*SwapFailure, error)
	grpc.ClientStream
}

type xudSubscribeSwapFailuresClient struct {
	grpc.ClientStream
}

func (x *xudSubscribeSwapFailuresClient) Recv() (*SwapFailure, error) {
	m := new(SwapFailure)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *xudClient) SubscribeSwaps(ctx context.Context, in *SubscribeSwapsRequest, opts ...grpc.CallOption) (Xud_SubscribeSwapsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Xud_serviceDesc.Streams[3], "/xudrpc.Xud/SubscribeSwaps", opts...)
	if err != nil {
		return nil, err
	}
	x := &xudSubscribeSwapsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Xud_SubscribeSwapsClient interface {
	Recv() (*SwapSuccess, error)
	grpc.ClientStream
}

type xudSubscribeSwapsClient struct {
	grpc.ClientStream
}

func (x *xudSubscribeSwapsClient) Recv() (*SwapSuccess, error) {
	m := new(SwapSuccess)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *xudClient) SubscribeSwapsAccepted(ctx context.Context, in *SubscribeSwapsAcceptedRequest, opts ...grpc.CallOption) (Xud_SubscribeSwapsAcceptedClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Xud_serviceDesc.Streams[4], "/xudrpc.Xud/SubscribeSwapsAccepted", opts...)
	if err != nil {
		return nil, err
	}
	x := &xudSubscribeSwapsAcceptedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Xud_SubscribeSwapsAcceptedClient interface {
	Recv() (*SwapAccepted, error)
	grpc.ClientStream
}

type xudSubscribeSwapsAcceptedClient struct {
	grpc.ClientStream
}

func (x *xudSubscribeSwapsAcceptedClient) Recv() (*SwapAccepted, error) {
	m := new(SwapAccepted)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *xudClient) TradeHistory(ctx context.Context, in *TradeHistoryRequest, opts ...grpc.CallOption) (*TradeHistoryResponse, error) {
	out := new(TradeHistoryResponse)
	err := c.cc.Invoke(ctx, "/xudrpc.Xud/TradeHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xudClient) TradingLimits(ctx context.Context, in *TradingLimitsRequest, opts ...grpc.CallOption) (*TradingLimitsResponse, error) {
	out := new(TradingLimitsResponse)
	err := c.cc.Invoke(ctx, "/xudrpc.Xud/TradingLimits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xudClient) Unban(ctx context.Context, in *UnbanRequest, opts ...grpc.CallOption) (*UnbanResponse, error) {
	out := new(UnbanResponse)
	err := c.cc.Invoke(ctx, "/xudrpc.Xud/Unban", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xudClient) WalletWithdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawResponse, error) {
	out := new(WithdrawResponse)
	err := c.cc.Invoke(ctx, "/xudrpc.Xud/WalletWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// XudServer is the server API for Xud service.
type XudServer interface {
	// Adds a currency to the list of supported currencies. Once added, the currency may be used for
	// new trading pairs.
	// shell: xucli addcurrency <currency> <swap_client> [decimal_places] [token_address]
	AddCurrency(context.Context, *Currency) (*AddCurrencyResponse, error)
	// Adds a trading pair to the list of supported trading pairs. The newly supported pair is
	// advertised to peers so they may begin sending orders for it.
	// shell: xucli addpair <base_currency> <quote_currency>
	AddPair(context.Context, *AddPairRequest) (*AddPairResponse, error)
	// Bans a node and immediately disconnects from it. This can be used to prevent any connections
	// to a specific node.
	// shell: xucli ban <node_identifier>
	Ban(context.Context, *BanRequest) (*BanResponse, error)
	// Changes the xud master password, including the wallet passwords for any underlying clients.
	// shell: xucli changepass
	ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordResponse, error)
	// Closes any existing payment channels with a peer for the specified currency.
	// shell: xucli closechannel <currency> [node_identifier ] [--force]
	CloseChannel(context.Context, *CloseChannelRequest) (*CloseChannelResponse, error)
	// Attempts to connect to a node. Once connected, the node is added to the list of peers and
	// becomes available for swaps and trading. A handshake exchanges information about the peer's
	// supported trading and swap clients. Orders will be shared with the peer upon connection and
	// upon new order placements.
	// shell: xucli connect <node_uri>
	Connect(context.Context, *ConnectRequest) (*ConnectResponse, error)
	// Gets an address to deposit a given currency into the xud wallets.
	// shell: xucli walletdeposit <currency>
	WalletDeposit(context.Context, *DepositRequest) (*DepositResponse, error)
	// Gets an address to deposit a given currency directly into a channel.
	// shell: xucli deposit <currency>
	Deposit(context.Context, *DepositRequest) (*DepositResponse, error)
	// Discover nodes from a specific peer and apply new connections
	DiscoverNodes(context.Context, *DiscoverNodesRequest) (*DiscoverNodesResponse, error)
	// Gets the total balance available across all payment channels and wallets for one or all currencies.
	// shell: xucli getbalance [currency]
	GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error)
	// Gets general information about this node.
	// shell: xucli getinfo
	GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error)
	// Gets the master seed mnemonic .
	// shell: xucli getnemonic
	GetMnemonic(context.Context, *GetMnemonicRequest) (*GetMnemonicResponse, error)
	// Gets general information about a node.
	// shell: xucli getnodeinfo <node_identifier>
	GetNodeInfo(context.Context, *GetNodeInfoRequest) (*GetNodeInfoResponse, error)
	// Gets orders from the order book. This call returns the state of the order book at a given point
	// in time, although it is not guaranteed to still be vaild by the time a response is received
	// and processed by a client. It accepts an optional trading pair id parameter. If specified, only
	// orders for that particular trading pair are returned. Otherwise, all orders are returned. Orders
	// are separated into buys and sells for each trading pair, but unsorted.
	// shell: xucli listorders [pair_id] [include_own_orders] [limit]
	ListOrders(context.Context, *ListOrdersRequest) (*ListOrdersResponse, error)
	// Gets a list of this node's supported currencies.
	// shell: xucli listcurrencies
	ListCurrencies(context.Context, *ListCurrenciesRequest) (*ListCurrenciesResponse, error)
	// Gets a list of this nodes suported trading pairs.
	// shell: xucli listpairs
	ListPairs(context.Context, *ListPairsRequest) (*ListPairsResponse, error)
	// Gets a list of connected peers.
	// shell: xucli listpeers
	ListPeers(context.Context, *ListPeersRequest) (*ListPeersResponse, error)
	// Opens a payment channel to a peer for the specified amount and currency.
	// shell: xucli openchannel <currency> <amount> [node_identifier] [push_amount]
	OpenChannel(context.Context, *OpenChannelRequest) (*OpenChannelResponse, error)
	// Gets an order book depth chart where orders are grouped into "buckets"
	// according to their price rounded to a given level of precision.
	// shell: xucli orderbook [pair_id] [precision]
	OrderBook(context.Context, *OrderBookRequest) (*OrderBookResponse, error)
	// Adds an order to the order book.
	// If price is zero or unspecified a market order will get added.
	PlaceOrder(*PlaceOrderRequest, Xud_PlaceOrderServer) error
	// The synchronous, non-streaming version of PlaceOrder.
	// shell: xucli buy <quantity> <pair_id> <price> [order_id] [stream]
	// shell: xucli sell <quantity> <pair_id> <price> [order_id] [stream]
	PlaceOrderSync(context.Context, *PlaceOrderRequest) (*PlaceOrderResponse, error)
	// Executes a swap on a maker peer order.
	ExecuteSwap(context.Context, *ExecuteSwapRequest) (*SwapSuccess, error)
	// Removes a currency from the list of supported currencies. Only currencies that are not in use
	// for any currently supported trading pairs may be removed. Once removed, the currency can no
	// longer be used for any supported trading pairs.
	// shell: xucli removecurrency <currency>
	RemoveCurrency(context.Context, *RemoveCurrencyRequest) (*RemoveCurrencyResponse, error)
	// Removes an order from the order book by its local id. This should be called when an order is
	// canceled or filled outside of xud. Removed orders become immediately unavailable for swaps,
	// and peers are notified that the order is no longer valid. Any portion of the order that is
	// on hold due to ongoing swaps will not be removed until after the swap attempts complete.
	// shell: xucli removeorder <order_id> [quantity]
	RemoveOrder(context.Context, *RemoveOrderRequest) (*RemoveOrderResponse, error)
	// Removes all orders from the order book. Removed orders become immediately unavailable for swaps,
	// and peers are notified that the orders are no longer valid. Any portion of the orders that is
	// on hold due to ongoing swaps will not be removed until after the swap attempts complete.
	// shell: xucli removeallorders
	RemoveAllOrders(context.Context, *RemoveAllOrdersRequest) (*RemoveAllOrdersResponse, error)
	// Removes a trading pair from the list of currently supported trading pair. This call will
	// effectively cancel any standing orders for that trading pair. Peers are informed when a pair
	// is no longer supported so that they will know to stop sending orders for it.
	// shell: xucli removepair <pair_id>
	RemovePair(context.Context, *RemovePairRequest) (*RemovePairResponse, error)
	// Set the logging level.
	// shell: xucli loglevel <level>
	SetLogLevel(context.Context, *SetLogLevelRequest) (*SetLogLevelResponse, error)
	// Begin gracefully shutting down xud.
	// shell: xucli shutdown
	Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error)
	// Subscribes to orders being added to and removed from the order book. This call allows the client
	// to maintain an up-to-date view of the order book. For example, an exchange that wants to show
	// its users a real time view of the orders available to them would subscribe to this streaming
	// call to be alerted as new orders are added and expired orders are removed.
	SubscribeOrders(*SubscribeOrdersRequest, Xud_SubscribeOrdersServer) error
	// Subscribes to failed swaps. By default, only swaps that are initiated by a remote peer are
	// transmitted unless a flag is set to include swaps initiated by the local node. This call allows
	// the client to get real-time notifications when swap attempts are failing. It can be used for
	// status monitoring, debugging, and testing purposes.
	SubscribeSwapFailures(*SubscribeSwapsRequest, Xud_SubscribeSwapFailuresServer) error
	// Subscribes to completed swaps. By default, only swaps that are initiated by a remote peer are
	// transmitted unless a flag is set to include swaps initiated by the local node. This call allows
	// the client to get real-time notifications when its orders are filled by a peer. It can be used
	// for tracking order executions, updating balances, and informing a trader when one of their orders
	// is settled through the Exchange Union network.
	SubscribeSwaps(*SubscribeSwapsRequest, Xud_SubscribeSwapsServer) error
	// Subscribes to accepted swaps. This stream emits a message when the local xud node
	// accepts a swap request from a peer, but before the swap has actually succeeded.
	SubscribeSwapsAccepted(*SubscribeSwapsAcceptedRequest, Xud_SubscribeSwapsAcceptedServer) error
	// Gets a list of completed trades.
	// shell: xucli tradehistory [limit]
	TradeHistory(context.Context, *TradeHistoryRequest) (*TradeHistoryResponse, error)
	// Gets the trading limits for one or all currencies.
	// shell: xucli tradinglimits [currency]
	TradingLimits(context.Context, *TradingLimitsRequest) (*TradingLimitsResponse, error)
	// Removes a ban from a node manually and, optionally, attempts to connect to it.
	// shell: xucli unban <node_identifier> [reconnect]
	Unban(context.Context, *UnbanRequest) (*UnbanResponse, error)
	// Withdraws a given currency from the xud wallets to a specified address.
	// shell: xucli withdraw [amount] [currency] <destination> [fee]
	WalletWithdraw(context.Context, *WithdrawRequest) (*WithdrawResponse, error)
}

func RegisterXudServer(s *grpc.Server, srv XudServer) {
	s.RegisterService(&_Xud_serviceDesc, srv)
}

func _Xud_AddCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Currency)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XudServer).AddCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xudrpc.Xud/AddCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XudServer).AddCurrency(ctx, req.(*Currency))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xud_AddPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XudServer).AddPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xudrpc.Xud/AddPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XudServer).AddPair(ctx, req.(*AddPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xud_Ban_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XudServer).Ban(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xudrpc.Xud/Ban",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XudServer).Ban(ctx, req.(*BanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xud_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XudServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xudrpc.Xud/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XudServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xud_CloseChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XudServer).CloseChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xudrpc.Xud/CloseChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XudServer).CloseChannel(ctx, req.(*CloseChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xud_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XudServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xudrpc.Xud/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XudServer).Connect(ctx, req.(*ConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xud_WalletDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XudServer).WalletDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xudrpc.Xud/WalletDeposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XudServer).WalletDeposit(ctx, req.(*DepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xud_Deposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XudServer).Deposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xudrpc.Xud/Deposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XudServer).Deposit(ctx, req.(*DepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xud_DiscoverNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XudServer).DiscoverNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xudrpc.Xud/DiscoverNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XudServer).DiscoverNodes(ctx, req.(*DiscoverNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xud_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XudServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xudrpc.Xud/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XudServer).GetBalance(ctx, req.(*GetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xud_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XudServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xudrpc.Xud/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XudServer).GetInfo(ctx, req.(*GetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xud_GetMnemonic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMnemonicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XudServer).GetMnemonic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xudrpc.Xud/GetMnemonic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XudServer).GetMnemonic(ctx, req.(*GetMnemonicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xud_GetNodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XudServer).GetNodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xudrpc.Xud/GetNodeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XudServer).GetNodeInfo(ctx, req.(*GetNodeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xud_ListOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XudServer).ListOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xudrpc.Xud/ListOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XudServer).ListOrders(ctx, req.(*ListOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xud_ListCurrencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCurrenciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XudServer).ListCurrencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xudrpc.Xud/ListCurrencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XudServer).ListCurrencies(ctx, req.(*ListCurrenciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xud_ListPairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPairsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XudServer).ListPairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xudrpc.Xud/ListPairs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XudServer).ListPairs(ctx, req.(*ListPairsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xud_ListPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XudServer).ListPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xudrpc.Xud/ListPeers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XudServer).ListPeers(ctx, req.(*ListPeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xud_OpenChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XudServer).OpenChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xudrpc.Xud/OpenChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XudServer).OpenChannel(ctx, req.(*OpenChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xud_OrderBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XudServer).OrderBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xudrpc.Xud/OrderBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XudServer).OrderBook(ctx, req.(*OrderBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xud_PlaceOrder_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PlaceOrderRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(XudServer).PlaceOrder(m, &xudPlaceOrderServer{stream})
}

type Xud_PlaceOrderServer interface {
	Send(*PlaceOrderEvent) error
	grpc.ServerStream
}

type xudPlaceOrderServer struct {
	grpc.ServerStream
}

func (x *xudPlaceOrderServer) Send(m *PlaceOrderEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _Xud_PlaceOrderSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XudServer).PlaceOrderSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xudrpc.Xud/PlaceOrderSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XudServer).PlaceOrderSync(ctx, req.(*PlaceOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xud_ExecuteSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XudServer).ExecuteSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xudrpc.Xud/ExecuteSwap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XudServer).ExecuteSwap(ctx, req.(*ExecuteSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xud_RemoveCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XudServer).RemoveCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xudrpc.Xud/RemoveCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XudServer).RemoveCurrency(ctx, req.(*RemoveCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xud_RemoveOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XudServer).RemoveOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xudrpc.Xud/RemoveOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XudServer).RemoveOrder(ctx, req.(*RemoveOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xud_RemoveAllOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAllOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XudServer).RemoveAllOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xudrpc.Xud/RemoveAllOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XudServer).RemoveAllOrders(ctx, req.(*RemoveAllOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xud_RemovePair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XudServer).RemovePair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xudrpc.Xud/RemovePair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XudServer).RemovePair(ctx, req.(*RemovePairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xud_SetLogLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLogLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XudServer).SetLogLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xudrpc.Xud/SetLogLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XudServer).SetLogLevel(ctx, req.(*SetLogLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xud_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XudServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xudrpc.Xud/Shutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XudServer).Shutdown(ctx, req.(*ShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xud_SubscribeOrders_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeOrdersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(XudServer).SubscribeOrders(m, &xudSubscribeOrdersServer{stream})
}

type Xud_SubscribeOrdersServer interface {
	Send(*OrderUpdate) error
	grpc.ServerStream
}

type xudSubscribeOrdersServer struct {
	grpc.ServerStream
}

func (x *xudSubscribeOrdersServer) Send(m *OrderUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _Xud_SubscribeSwapFailures_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeSwapsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(XudServer).SubscribeSwapFailures(m, &xudSubscribeSwapFailuresServer{stream})
}

type Xud_SubscribeSwapFailuresServer interface {
	Send(*SwapFailure) error
	grpc.ServerStream
}

type xudSubscribeSwapFailuresServer struct {
	grpc.ServerStream
}

func (x *xudSubscribeSwapFailuresServer) Send(m *SwapFailure) error {
	return x.ServerStream.SendMsg(m)
}

func _Xud_SubscribeSwaps_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeSwapsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(XudServer).SubscribeSwaps(m, &xudSubscribeSwapsServer{stream})
}

type Xud_SubscribeSwapsServer interface {
	Send(*SwapSuccess) error
	grpc.ServerStream
}

type xudSubscribeSwapsServer struct {
	grpc.ServerStream
}

func (x *xudSubscribeSwapsServer) Send(m *SwapSuccess) error {
	return x.ServerStream.SendMsg(m)
}

func _Xud_SubscribeSwapsAccepted_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeSwapsAcceptedRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(XudServer).SubscribeSwapsAccepted(m, &xudSubscribeSwapsAcceptedServer{stream})
}

type Xud_SubscribeSwapsAcceptedServer interface {
	Send(*SwapAccepted) error
	grpc.ServerStream
}

type xudSubscribeSwapsAcceptedServer struct {
	grpc.ServerStream
}

func (x *xudSubscribeSwapsAcceptedServer) Send(m *SwapAccepted) error {
	return x.ServerStream.SendMsg(m)
}

func _Xud_TradeHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradeHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XudServer).TradeHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xudrpc.Xud/TradeHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XudServer).TradeHistory(ctx, req.(*TradeHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xud_TradingLimits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradingLimitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XudServer).TradingLimits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xudrpc.Xud/TradingLimits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XudServer).TradingLimits(ctx, req.(*TradingLimitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xud_Unban_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XudServer).Unban(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xudrpc.Xud/Unban",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XudServer).Unban(ctx, req.(*UnbanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xud_WalletWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XudServer).WalletWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xudrpc.Xud/WalletWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XudServer).WalletWithdraw(ctx, req.(*WithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Xud_serviceDesc = grpc.ServiceDesc{
	ServiceName: "xudrpc.Xud",
	HandlerType: (*XudServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCurrency",
			Handler:    _Xud_AddCurrency_Handler,
		},
		{
			MethodName: "AddPair",
			Handler:    _Xud_AddPair_Handler,
		},
		{
			MethodName: "Ban",
			Handler:    _Xud_Ban_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _Xud_ChangePassword_Handler,
		},
		{
			MethodName: "CloseChannel",
			Handler:    _Xud_CloseChannel_Handler,
		},
		{
			MethodName: "Connect",
			Handler:    _Xud_Connect_Handler,
		},
		{
			MethodName: "WalletDeposit",
			Handler:    _Xud_WalletDeposit_Handler,
		},
		{
			MethodName: "Deposit",
			Handler:    _Xud_Deposit_Handler,
		},
		{
			MethodName: "DiscoverNodes",
			Handler:    _Xud_DiscoverNodes_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _Xud_GetBalance_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _Xud_GetInfo_Handler,
		},
		{
			MethodName: "GetMnemonic",
			Handler:    _Xud_GetMnemonic_Handler,
		},
		{
			MethodName: "GetNodeInfo",
			Handler:    _Xud_GetNodeInfo_Handler,
		},
		{
			MethodName: "ListOrders",
			Handler:    _Xud_ListOrders_Handler,
		},
		{
			MethodName: "ListCurrencies",
			Handler:    _Xud_ListCurrencies_Handler,
		},
		{
			MethodName: "ListPairs",
			Handler:    _Xud_ListPairs_Handler,
		},
		{
			MethodName: "ListPeers",
			Handler:    _Xud_ListPeers_Handler,
		},
		{
			MethodName: "OpenChannel",
			Handler:    _Xud_OpenChannel_Handler,
		},
		{
			MethodName: "OrderBook",
			Handler:    _Xud_OrderBook_Handler,
		},
		{
			MethodName: "PlaceOrderSync",
			Handler:    _Xud_PlaceOrderSync_Handler,
		},
		{
			MethodName: "ExecuteSwap",
			Handler:    _Xud_ExecuteSwap_Handler,
		},
		{
			MethodName: "RemoveCurrency",
			Handler:    _Xud_RemoveCurrency_Handler,
		},
		{
			MethodName: "RemoveOrder",
			Handler:    _Xud_RemoveOrder_Handler,
		},
		{
			MethodName: "RemoveAllOrders",
			Handler:    _Xud_RemoveAllOrders_Handler,
		},
		{
			MethodName: "RemovePair",
			Handler:    _Xud_RemovePair_Handler,
		},
		{
			MethodName: "SetLogLevel",
			Handler:    _Xud_SetLogLevel_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _Xud_Shutdown_Handler,
		},
		{
			MethodName: "TradeHistory",
			Handler:    _Xud_TradeHistory_Handler,
		},
		{
			MethodName: "TradingLimits",
			Handler:    _Xud_TradingLimits_Handler,
		},
		{
			MethodName: "Unban",
			Handler:    _Xud_Unban_Handler,
		},
		{
			MethodName: "WalletWithdraw",
			Handler:    _Xud_WalletWithdraw_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PlaceOrder",
			Handler:       _Xud_PlaceOrder_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeOrders",
			Handler:       _Xud_SubscribeOrders_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeSwapFailures",
			Handler:       _Xud_SubscribeSwapFailures_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeSwaps",
			Handler:       _Xud_SubscribeSwaps_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeSwapsAccepted",
			Handler:       _Xud_SubscribeSwapsAccepted_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "xudrpc.proto",
}
