// Code generated by protoc-gen-go. DO NOT EDIT.
// source: xudrpc.proto

package xudrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type OrderSide int32

const (
	OrderSide_BUY  OrderSide = 0
	OrderSide_SELL OrderSide = 1
)

var OrderSide_name = map[int32]string{
	0: "BUY",
	1: "SELL",
}
var OrderSide_value = map[string]int32{
	"BUY":  0,
	"SELL": 1,
}

func (x OrderSide) String() string {
	return proto.EnumName(OrderSide_name, int32(x))
}
func (OrderSide) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_xudrpc_360445fb04f04f0d, []int{0}
}

type AddCurrencyRequest_SwapClient int32

const (
	AddCurrencyRequest_LND    AddCurrencyRequest_SwapClient = 0
	AddCurrencyRequest_RAIDEN AddCurrencyRequest_SwapClient = 1
)

var AddCurrencyRequest_SwapClient_name = map[int32]string{
	0: "LND",
	1: "RAIDEN",
}
var AddCurrencyRequest_SwapClient_value = map[string]int32{
	"LND":    0,
	"RAIDEN": 1,
}

func (x AddCurrencyRequest_SwapClient) String() string {
	return proto.EnumName(AddCurrencyRequest_SwapClient_name, int32(x))
}
func (AddCurrencyRequest_SwapClient) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_xudrpc_360445fb04f04f0d, []int{0, 0}
}

type SwapSuccess_Role int32

const (
	SwapSuccess_TAKER SwapSuccess_Role = 0
	SwapSuccess_MAKER SwapSuccess_Role = 1
)

var SwapSuccess_Role_name = map[int32]string{
	0: "TAKER",
	1: "MAKER",
}
var SwapSuccess_Role_value = map[string]int32{
	"TAKER": 0,
	"MAKER": 1,
}

func (x SwapSuccess_Role) String() string {
	return proto.EnumName(SwapSuccess_Role_name, int32(x))
}
func (SwapSuccess_Role) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_xudrpc_360445fb04f04f0d, []int{47, 0}
}

type AddCurrencyRequest struct {
	// The ticker symbol for this currency such as BTC, LTC, ETH, etc...
	Currency string `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`
	// The payment channel network client to use for executing swaps.
	SwapClient AddCurrencyRequest_SwapClient `protobuf:"varint,2,opt,name=swap_client,proto3,enum=xudrpc.AddCurrencyRequest_SwapClient" json:"swap_client,omitempty"`
	// The contract address for layered tokens such as ERC20.
	TokenAddress string `protobuf:"bytes,3,opt,name=token_address,proto3" json:"token_address,omitempty"`
	// The number of places to the right of the decimal point of the smallest subunit of the currency.
	// For example, BTC, LTC, and others where the smallest subunits (satoshis) are 0.00000001 full
	// units (bitcoins) have 8 decimal places. ETH has 18. This can be thought of as the base 10
	// exponent of the smallest subunit expressed as a positive integer. A default value of 8 is
	// used if unspecified.
	DecimalPlaces        uint32   `protobuf:"varint,4,opt,name=decimal_places,proto3" json:"decimal_places,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddCurrencyRequest) Reset()         { *m = AddCurrencyRequest{} }
func (m *AddCurrencyRequest) String() string { return proto.CompactTextString(m) }
func (*AddCurrencyRequest) ProtoMessage()    {}
func (*AddCurrencyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_xudrpc_360445fb04f04f0d, []int{0}
}
func (m *AddCurrencyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddCurrencyRequest.Unmarshal(m, b)
}
func (m *AddCurrencyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddCurrencyRequest.Marshal(b, m, deterministic)
}
func (dst *AddCurrencyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddCurrencyRequest.Merge(dst, src)
}
func (m *AddCurrencyRequest) XXX_Size() int {
	return xxx_messageInfo_AddCurrencyRequest.Size(m)
}
func (m *AddCurrencyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddCurrencyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddCurrencyRequest proto.InternalMessageInfo

func (m *AddCurrencyRequest) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *AddCurrencyRequest) GetSwapClient() AddCurrencyRequest_SwapClient {
	if m != nil {
		return m.SwapClient
	}
	return AddCurrencyRequest_LND
}

func (m *AddCurrencyRequest) GetTokenAddress() string {
	if m != nil {
		return m.TokenAddress
	}
	return ""
}

func (m *AddCurrencyRequest) GetDecimalPlaces() uint32 {
	if m != nil {
		return m.DecimalPlaces
	}
	return 0
}

type AddCurrencyResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddCurrencyResponse) Reset()         { *m = AddCurrencyResponse{} }
func (m *AddCurrencyResponse) String() string { return proto.CompactTextString(m) }
func (*AddCurrencyResponse) ProtoMessage()    {}
func (*AddCurrencyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_xudrpc_360445fb04f04f0d, []int{1}
}
func (m *AddCurrencyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddCurrencyResponse.Unmarshal(m, b)
}
func (m *AddCurrencyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddCurrencyResponse.Marshal(b, m, deterministic)
}
func (dst *AddCurrencyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddCurrencyResponse.Merge(dst, src)
}
func (m *AddCurrencyResponse) XXX_Size() int {
	return xxx_messageInfo_AddCurrencyResponse.Size(m)
}
func (m *AddCurrencyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddCurrencyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddCurrencyResponse proto.InternalMessageInfo

type AddPairRequest struct {
	// The base currency that is bought and sold for this trading pair.
	BaseCurrency string `protobuf:"bytes,1,opt,name=base_currency,proto3" json:"base_currency,omitempty"`
	// The currency used to quote a price for the base currency.
	QuoteCurrency        string   `protobuf:"bytes,2,opt,name=quote_currency,proto3" json:"quote_currency,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddPairRequest) Reset()         { *m = AddPairRequest{} }
func (m *AddPairRequest) String() string { return proto.CompactTextString(m) }
func (*AddPairRequest) ProtoMessage()    {}
func (*AddPairRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_xudrpc_360445fb04f04f0d, []int{2}
}
func (m *AddPairRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddPairRequest.Unmarshal(m, b)
}
func (m *AddPairRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddPairRequest.Marshal(b, m, deterministic)
}
func (dst *AddPairRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPairRequest.Merge(dst, src)
}
func (m *AddPairRequest) XXX_Size() int {
	return xxx_messageInfo_AddPairRequest.Size(m)
}
func (m *AddPairRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPairRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddPairRequest proto.InternalMessageInfo

func (m *AddPairRequest) GetBaseCurrency() string {
	if m != nil {
		return m.BaseCurrency
	}
	return ""
}

func (m *AddPairRequest) GetQuoteCurrency() string {
	if m != nil {
		return m.QuoteCurrency
	}
	return ""
}

type AddPairResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddPairResponse) Reset()         { *m = AddPairResponse{} }
func (m *AddPairResponse) String() string { return proto.CompactTextString(m) }
func (*AddPairResponse) ProtoMessage()    {}
func (*AddPairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_xudrpc_360445fb04f04f0d, []int{3}
}
func (m *AddPairResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddPairResponse.Unmarshal(m, b)
}
func (m *AddPairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddPairResponse.Marshal(b, m, deterministic)
}
func (dst *AddPairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPairResponse.Merge(dst, src)
}
func (m *AddPairResponse) XXX_Size() int {
	return xxx_messageInfo_AddPairResponse.Size(m)
}
func (m *AddPairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddPairResponse proto.InternalMessageInfo

type BanRequest struct {
	// The node pub key of the node to ban.
	NodePubKey           string   `protobuf:"bytes,1,opt,name=node_pub_key,proto3" json:"node_pub_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BanRequest) Reset()         { *m = BanRequest{} }
func (m *BanRequest) String() string { return proto.CompactTextString(m) }
func (*BanRequest) ProtoMessage()    {}
func (*BanRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_xudrpc_360445fb04f04f0d, []int{4}
}
func (m *BanRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BanRequest.Unmarshal(m, b)
}
func (m *BanRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BanRequest.Marshal(b, m, deterministic)
}
func (dst *BanRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BanRequest.Merge(dst, src)
}
func (m *BanRequest) XXX_Size() int {
	return xxx_messageInfo_BanRequest.Size(m)
}
func (m *BanRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BanRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BanRequest proto.InternalMessageInfo

func (m *BanRequest) GetNodePubKey() string {
	if m != nil {
		return m.NodePubKey
	}
	return ""
}

type BanResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BanResponse) Reset()         { *m = BanResponse{} }
func (m *BanResponse) String() string { return proto.CompactTextString(m) }
func (*BanResponse) ProtoMessage()    {}
func (*BanResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_xudrpc_360445fb04f04f0d, []int{5}
}
func (m *BanResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BanResponse.Unmarshal(m, b)
}
func (m *BanResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BanResponse.Marshal(b, m, deterministic)
}
func (dst *BanResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BanResponse.Merge(dst, src)
}
func (m *BanResponse) XXX_Size() int {
	return xxx_messageInfo_BanResponse.Size(m)
}
func (m *BanResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BanResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BanResponse proto.InternalMessageInfo

type ChannelBalance struct {
	// Sum of channels balances denominated in satoshis or equivalent.
	Balance int64 `protobuf:"varint,1,opt,name=balance,proto3" json:"balance,omitempty"`
	// Sum of channels pending balances denominated in satoshis or equivalent.
	PendingOpenBalance   int64    `protobuf:"varint,2,opt,name=pending_open_balance,proto3" json:"pending_open_balance,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelBalance) Reset()         { *m = ChannelBalance{} }
func (m *ChannelBalance) String() string { return proto.CompactTextString(m) }
func (*ChannelBalance) ProtoMessage()    {}
func (*ChannelBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_xudrpc_360445fb04f04f0d, []int{6}
}
func (m *ChannelBalance) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelBalance.Unmarshal(m, b)
}
func (m *ChannelBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelBalance.Marshal(b, m, deterministic)
}
func (dst *ChannelBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelBalance.Merge(dst, src)
}
func (m *ChannelBalance) XXX_Size() int {
	return xxx_messageInfo_ChannelBalance.Size(m)
}
func (m *ChannelBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelBalance.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelBalance proto.InternalMessageInfo

func (m *ChannelBalance) GetBalance() int64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *ChannelBalance) GetPendingOpenBalance() int64 {
	if m != nil {
		return m.PendingOpenBalance
	}
	return 0
}

type ChannelBalanceRequest struct {
	// The ticker symbol of the currency to query for, if unspecified then balances for all supported
	// currencies are queried.
	Currency             string   `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelBalanceRequest) Reset()         { *m = ChannelBalanceRequest{} }
func (m *ChannelBalanceRequest) String() string { return proto.CompactTextString(m) }
func (*ChannelBalanceRequest) ProtoMessage()    {}
func (*ChannelBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_xudrpc_360445fb04f04f0d, []int{7}
}
func (m *ChannelBalanceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelBalanceRequest.Unmarshal(m, b)
}
func (m *ChannelBalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelBalanceRequest.Marshal(b, m, deterministic)
}
func (dst *ChannelBalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelBalanceRequest.Merge(dst, src)
}
func (m *ChannelBalanceRequest) XXX_Size() int {
	return xxx_messageInfo_ChannelBalanceRequest.Size(m)
}
func (m *ChannelBalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelBalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelBalanceRequest proto.InternalMessageInfo

func (m *ChannelBalanceRequest) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

type ChannelBalanceResponse struct {
	// A map between currency ticker symbols and their channel balances.
	Balances             map[string]*ChannelBalance `protobuf:"bytes,1,rep,name=balances,json=orders,proto3" json:"balances,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *ChannelBalanceResponse) Reset()         { *m = ChannelBalanceResponse{} }
func (m *ChannelBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*ChannelBalanceResponse) ProtoMessage()    {}
func (*ChannelBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_xudrpc_360445fb04f04f0d, []int{8}
}
func (m *ChannelBalanceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelBalanceResponse.Unmarshal(m, b)
}
func (m *ChannelBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelBalanceResponse.Marshal(b, m, deterministic)
}
func (dst *ChannelBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelBalanceResponse.Merge(dst, src)
}
func (m *ChannelBalanceResponse) XXX_Size() int {
	return xxx_messageInfo_ChannelBalanceResponse.Size(m)
}
func (m *ChannelBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelBalanceResponse proto.InternalMessageInfo

func (m *ChannelBalanceResponse) GetBalances() map[string]*ChannelBalance {
	if m != nil {
		return m.Balances
	}
	return nil
}

type ConnectRequest struct {
	// The uri of the node to connect to in "[nodePubKey]@[host]:[port]" format.
	NodeUri              string   `protobuf:"bytes,1,opt,name=node_uri,proto3" json:"node_uri,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConnectRequest) Reset()         { *m = ConnectRequest{} }
func (m *ConnectRequest) String() string { return proto.CompactTextString(m) }
func (*ConnectRequest) ProtoMessage()    {}
func (*ConnectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_xudrpc_360445fb04f04f0d, []int{9}
}
func (m *ConnectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConnectRequest.Unmarshal(m, b)
}
func (m *ConnectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConnectRequest.Marshal(b, m, deterministic)
}
func (dst *ConnectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectRequest.Merge(dst, src)
}
func (m *ConnectRequest) XXX_Size() int {
	return xxx_messageInfo_ConnectRequest.Size(m)
}
func (m *ConnectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectRequest proto.InternalMessageInfo

func (m *ConnectRequest) GetNodeUri() string {
	if m != nil {
		return m.NodeUri
	}
	return ""
}

type ConnectResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConnectResponse) Reset()         { *m = ConnectResponse{} }
func (m *ConnectResponse) String() string { return proto.CompactTextString(m) }
func (*ConnectResponse) ProtoMessage()    {}
func (*ConnectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_xudrpc_360445fb04f04f0d, []int{10}
}
func (m *ConnectResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConnectResponse.Unmarshal(m, b)
}
func (m *ConnectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConnectResponse.Marshal(b, m, deterministic)
}
func (dst *ConnectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectResponse.Merge(dst, src)
}
func (m *ConnectResponse) XXX_Size() int {
	return xxx_messageInfo_ConnectResponse.Size(m)
}
func (m *ConnectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectResponse proto.InternalMessageInfo

type ExecuteSwapRequest struct {
	// The order id of the maker order.
	OrderId string `protobuf:"bytes,1,opt,name=order_id,proto3" json:"order_id,omitempty"`
	// The trading pair of the swap orders.
	PairId string `protobuf:"bytes,2,opt,name=pair_id,proto3" json:"pair_id,omitempty"`
	// The node pub key of the peer which owns the maker order. This is optional but helps locate the order more quickly.
	PeerPubKey string `protobuf:"bytes,3,opt,name=peer_pub_key,proto3" json:"peer_pub_key,omitempty"`
	// The quantity to swap. The whole order will be swapped if unspecified.
	Quantity             float64  `protobuf:"fixed64,4,opt,name=quantity,proto3" json:"quantity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExecuteSwapRequest) Reset()         { *m = ExecuteSwapRequest{} }
func (m *ExecuteSwapRequest) String() string { return proto.CompactTextString(m) }
func (*ExecuteSwapRequest) ProtoMessage()    {}
func (*ExecuteSwapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_xudrpc_360445fb04f04f0d, []int{11}
}
func (m *ExecuteSwapRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecuteSwapRequest.Unmarshal(m, b)
}
func (m *ExecuteSwapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecuteSwapRequest.Marshal(b, m, deterministic)
}
func (dst *ExecuteSwapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteSwapRequest.Merge(dst, src)
}
func (m *ExecuteSwapRequest) XXX_Size() int {
	return xxx_messageInfo_ExecuteSwapRequest.Size(m)
}
func (m *ExecuteSwapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteSwapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteSwapRequest proto.InternalMessageInfo

func (m *ExecuteSwapRequest) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *ExecuteSwapRequest) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

func (m *ExecuteSwapRequest) GetPeerPubKey() string {
	if m != nil {
		return m.PeerPubKey
	}
	return ""
}

func (m *ExecuteSwapRequest) GetQuantity() float64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

type SwapFailure struct {
	// The global UUID for the order that failed the swap.
	OrderId string `protobuf:"bytes,1,opt,name=order_id,proto3" json:"order_id,omitempty"`
	// The trading pair that the swap is for.
	PairId string `protobuf:"bytes,2,opt,name=pair_id,proto3" json:"pair_id,omitempty"`
	// The order quantity that was attempted to be swapped.
	Quantity float64 `protobuf:"fixed64,3,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// The node pub key of the peer that we attempted to swap with.
	PeerPubKey string `protobuf:"bytes,4,opt,name=peer_pub_key,proto3" json:"peer_pub_key,omitempty"`
	// The reason why the swap failed.
	FailureReason        string   `protobuf:"bytes,5,opt,name=failure_reason,proto3" json:"failure_reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SwapFailure) Reset()         { *m = SwapFailure{} }
func (m *SwapFailure) String() string { return proto.CompactTextString(m) }
func (*SwapFailure) ProtoMessage()    {}
func (*SwapFailure) Descriptor() ([]byte, []int) {
	return fileDescriptor_xudrpc_360445fb04f04f0d, []int{12}
}
func (m *SwapFailure) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SwapFailure.Unmarshal(m, b)
}
func (m *SwapFailure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SwapFailure.Marshal(b, m, deterministic)
}
func (dst *SwapFailure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwapFailure.Merge(dst, src)
}
func (m *SwapFailure) XXX_Size() int {
	return xxx_messageInfo_SwapFailure.Size(m)
}
func (m *SwapFailure) XXX_DiscardUnknown() {
	xxx_messageInfo_SwapFailure.DiscardUnknown(m)
}

var xxx_messageInfo_SwapFailure proto.InternalMessageInfo

func (m *SwapFailure) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *SwapFailure) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

func (m *SwapFailure) GetQuantity() float64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *SwapFailure) GetPeerPubKey() string {
	if m != nil {
		return m.PeerPubKey
	}
	return ""
}

func (m *SwapFailure) GetFailureReason() string {
	if m != nil {
		return m.FailureReason
	}
	return ""
}

type GetInfoRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetInfoRequest) Reset()         { *m = GetInfoRequest{} }
func (m *GetInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetInfoRequest) ProtoMessage()    {}
func (*GetInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_xudrpc_360445fb04f04f0d, []int{13}
}
func (m *GetInfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetInfoRequest.Unmarshal(m, b)
}
func (m *GetInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetInfoRequest.Marshal(b, m, deterministic)
}
func (dst *GetInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInfoRequest.Merge(dst, src)
}
func (m *GetInfoRequest) XXX_Size() int {
	return xxx_messageInfo_GetInfoRequest.Size(m)
}
func (m *GetInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetInfoRequest proto.InternalMessageInfo

type GetInfoResponse struct {
	// The version of this instance of xud.
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// The node pub key of this node.
	NodePubKey string `protobuf:"bytes,2,opt,name=node_pub_key,proto3" json:"node_pub_key,omitempty"`
	// A list of uris that can be used to connect to this node. These are shared with peers.
	Uris []string `protobuf:"bytes,3,rep,name=uris,proto3" json:"uris,omitempty"`
	// The number of currently connected peers.
	NumPeers int32 `protobuf:"varint,4,opt,name=num_peers,proto3" json:"num_peers,omitempty"`
	// The number of supported trading pairs.
	NumPairs int32 `protobuf:"varint,5,opt,name=num_pairs,proto3" json:"num_pairs,omitempty"`
	// The number of active, standing orders in the order book.
	Orders               *OrdersCount        `protobuf:"bytes,6,opt,name=orders,proto3" json:"orders,omitempty"`
	Lnd                  map[string]*LndInfo `protobuf:"bytes,7,rep,name=lnd,proto3" json:"lnd,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Raiden               *RaidenInfo         `protobuf:"bytes,8,opt,name=raiden,proto3" json:"raiden,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *GetInfoResponse) Reset()         { *m = GetInfoResponse{} }
func (m *GetInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GetInfoResponse) ProtoMessage()    {}
func (*GetInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_xudrpc_360445fb04f04f0d, []int{14}
}
func (m *GetInfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetInfoResponse.Unmarshal(m, b)
}
func (m *GetInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetInfoResponse.Marshal(b, m, deterministic)
}
func (dst *GetInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInfoResponse.Merge(dst, src)
}
func (m *GetInfoResponse) XXX_Size() int {
	return xxx_messageInfo_GetInfoResponse.Size(m)
}
func (m *GetInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetInfoResponse proto.InternalMessageInfo

func (m *GetInfoResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *GetInfoResponse) GetNodePubKey() string {
	if m != nil {
		return m.NodePubKey
	}
	return ""
}

func (m *GetInfoResponse) GetUris() []string {
	if m != nil {
		return m.Uris
	}
	return nil
}

func (m *GetInfoResponse) GetNumPeers() int32 {
	if m != nil {
		return m.NumPeers
	}
	return 0
}

func (m *GetInfoResponse) GetNumPairs() int32 {
	if m != nil {
		return m.NumPairs
	}
	return 0
}

func (m *GetInfoResponse) GetOrders() *OrdersCount {
	if m != nil {
		return m.Orders
	}
	return nil
}

func (m *GetInfoResponse) GetLnd() map[string]*LndInfo {
	if m != nil {
		return m.Lnd
	}
	return nil
}

func (m *GetInfoResponse) GetRaiden() *RaidenInfo {
	if m != nil {
		return m.Raiden
	}
	return nil
}

type GetNodeInfoRequest struct {
	// The node pub key of the node for which to get information.
	NodePubKey           string   `protobuf:"bytes,1,opt,name=node_pub_key,proto3" json:"node_pub_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetNodeInfoRequest) Reset()         { *m = GetNodeInfoRequest{} }
func (m *GetNodeInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetNodeInfoRequest) ProtoMessage()    {}
func (*GetNodeInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_xudrpc_360445fb04f04f0d, []int{15}
}
func (m *GetNodeInfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNodeInfoRequest.Unmarshal(m, b)
}
func (m *GetNodeInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNodeInfoRequest.Marshal(b, m, deterministic)
}
func (dst *GetNodeInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNodeInfoRequest.Merge(dst, src)
}
func (m *GetNodeInfoRequest) XXX_Size() int {
	return xxx_messageInfo_GetNodeInfoRequest.Size(m)
}
func (m *GetNodeInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNodeInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetNodeInfoRequest proto.InternalMessageInfo

func (m *GetNodeInfoRequest) GetNodePubKey() string {
	if m != nil {
		return m.NodePubKey
	}
	return ""
}

type GetNodeInfoResponse struct {
	// The node's reputation score. Points are subtracted for unexpected or potentially malicious
	// behavior. Points are added when swaps are successfully executed.
	ReputationScore int32 `protobuf:"varint,1,opt,name=reputationScore,json=reputation,proto3" json:"reputationScore,omitempty"`
	// Whether the node is currently banned.
	Banned               bool     `protobuf:"varint,2,opt,name=banned,proto3" json:"banned,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetNodeInfoResponse) Reset()         { *m = GetNodeInfoResponse{} }
func (m *GetNodeInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GetNodeInfoResponse) ProtoMessage()    {}
func (*GetNodeInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_xudrpc_360445fb04f04f0d, []int{16}
}
func (m *GetNodeInfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNodeInfoResponse.Unmarshal(m, b)
}
func (m *GetNodeInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNodeInfoResponse.Marshal(b, m, deterministic)
}
func (dst *GetNodeInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNodeInfoResponse.Merge(dst, src)
}
func (m *GetNodeInfoResponse) XXX_Size() int {
	return xxx_messageInfo_GetNodeInfoResponse.Size(m)
}
func (m *GetNodeInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNodeInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetNodeInfoResponse proto.InternalMessageInfo

func (m *GetNodeInfoResponse) GetReputationScore() int32 {
	if m != nil {
		return m.ReputationScore
	}
	return 0
}

func (m *GetNodeInfoResponse) GetBanned() bool {
	if m != nil {
		return m.Banned
	}
	return false
}

type ListOrdersRequest struct {
	// The trading pair for which to retrieve orders.
	PairId string `protobuf:"bytes,1,opt,name=pair_id,proto3" json:"pair_id,omitempty"`
	// Whether own orders should be included in result or not.
	IncludeOwnOrders     bool     `protobuf:"varint,2,opt,name=include_own_orders,proto3" json:"include_own_orders,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListOrdersRequest) Reset()         { *m = ListOrdersRequest{} }
func (m *ListOrdersRequest) String() string { return proto.CompactTextString(m) }
func (*ListOrdersRequest) ProtoMessage()    {}
func (*ListOrdersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_xudrpc_360445fb04f04f0d, []int{17}
}
func (m *ListOrdersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListOrdersRequest.Unmarshal(m, b)
}
func (m *ListOrdersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListOrdersRequest.Marshal(b, m, deterministic)
}
func (dst *ListOrdersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListOrdersRequest.Merge(dst, src)
}
func (m *ListOrdersRequest) XXX_Size() int {
	return xxx_messageInfo_ListOrdersRequest.Size(m)
}
func (m *ListOrdersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListOrdersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListOrdersRequest proto.InternalMessageInfo

func (m *ListOrdersRequest) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

func (m *ListOrdersRequest) GetIncludeOwnOrders() bool {
	if m != nil {
		return m.IncludeOwnOrders
	}
	return false
}

type ListOrdersResponse struct {
	// A map between pair ids and their buy and sell orders.
	Orders               map[string]*Orders `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ListOrdersResponse) Reset()         { *m = ListOrdersResponse{} }
func (m *ListOrdersResponse) String() string { return proto.CompactTextString(m) }
func (*ListOrdersResponse) ProtoMessage()    {}
func (*ListOrdersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_xudrpc_360445fb04f04f0d, []int{18}
}
func (m *ListOrdersResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListOrdersResponse.Unmarshal(m, b)
}
func (m *ListOrdersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListOrdersResponse.Marshal(b, m, deterministic)
}
func (dst *ListOrdersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListOrdersResponse.Merge(dst, src)
}
func (m *ListOrdersResponse) XXX_Size() int {
	return xxx_messageInfo_ListOrdersResponse.Size(m)
}
func (m *ListOrdersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListOrdersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListOrdersResponse proto.InternalMessageInfo

func (m *ListOrdersResponse) GetOrders() map[string]*Orders {
	if m != nil {
		return m.Orders
	}
	return nil
}

type ListCurrenciesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListCurrenciesRequest) Reset()         { *m = ListCurrenciesRequest{} }
func (m *ListCurrenciesRequest) String() string { return proto.CompactTextString(m) }
func (*ListCurrenciesRequest) ProtoMessage()    {}
func (*ListCurrenciesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_xudrpc_360445fb04f04f0d, []int{19}
}
func (m *ListCurrenciesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListCurrenciesRequest.Unmarshal(m, b)
}
func (m *ListCurrenciesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListCurrenciesRequest.Marshal(b, m, deterministic)
}
func (dst *ListCurrenciesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCurrenciesRequest.Merge(dst, src)
}
func (m *ListCurrenciesRequest) XXX_Size() int {
	return xxx_messageInfo_ListCurrenciesRequest.Size(m)
}
func (m *ListCurrenciesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCurrenciesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListCurrenciesRequest proto.InternalMessageInfo

type ListCurrenciesResponse struct {
	// A list of ticker symbols of the supported currencies.
	Currencies           []string `protobuf:"bytes,1,rep,name=currencies,proto3" json:"currencies,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListCurrenciesResponse) Reset()         { *m = ListCurrenciesResponse{} }
func (m *ListCurrenciesResponse) String() string { return proto.CompactTextString(m) }
func (*ListCurrenciesResponse) ProtoMessage()    {}
func (*ListCurrenciesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_xudrpc_360445fb04f04f0d, []int{20}
}
func (m *ListCurrenciesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListCurrenciesResponse.Unmarshal(m, b)
}
func (m *ListCurrenciesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListCurrenciesResponse.Marshal(b, m, deterministic)
}
func (dst *ListCurrenciesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCurrenciesResponse.Merge(dst, src)
}
func (m *ListCurrenciesResponse) XXX_Size() int {
	return xxx_messageInfo_ListCurrenciesResponse.Size(m)
}
func (m *ListCurrenciesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCurrenciesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListCurrenciesResponse proto.InternalMessageInfo

func (m *ListCurrenciesResponse) GetCurrencies() []string {
	if m != nil {
		return m.Currencies
	}
	return nil
}

type ListPairsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListPairsRequest) Reset()         { *m = ListPairsRequest{} }
func (m *ListPairsRequest) String() string { return proto.CompactTextString(m) }
func (*ListPairsRequest) ProtoMessage()    {}
func (*ListPairsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_xudrpc_360445fb04f04f0d, []int{21}
}
func (m *ListPairsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPairsRequest.Unmarshal(m, b)
}
func (m *ListPairsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPairsRequest.Marshal(b, m, deterministic)
}
func (dst *ListPairsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPairsRequest.Merge(dst, src)
}
func (m *ListPairsRequest) XXX_Size() int {
	return xxx_messageInfo_ListPairsRequest.Size(m)
}
func (m *ListPairsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPairsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListPairsRequest proto.InternalMessageInfo

type ListPairsResponse struct {
	// The list of supported trading pair tickers in formats like "LTC/BTC".
	Pairs                []string `protobuf:"bytes,1,rep,name=pairs,proto3" json:"pairs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListPairsResponse) Reset()         { *m = ListPairsResponse{} }
func (m *ListPairsResponse) String() string { return proto.CompactTextString(m) }
func (*ListPairsResponse) ProtoMessage()    {}
func (*ListPairsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_xudrpc_360445fb04f04f0d, []int{22}
}
func (m *ListPairsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPairsResponse.Unmarshal(m, b)
}
func (m *ListPairsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPairsResponse.Marshal(b, m, deterministic)
}
func (dst *ListPairsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPairsResponse.Merge(dst, src)
}
func (m *ListPairsResponse) XXX_Size() int {
	return xxx_messageInfo_ListPairsResponse.Size(m)
}
func (m *ListPairsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPairsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListPairsResponse proto.InternalMessageInfo

func (m *ListPairsResponse) GetPairs() []string {
	if m != nil {
		return m.Pairs
	}
	return nil
}

type ListPeersRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListPeersRequest) Reset()         { *m = ListPeersRequest{} }
func (m *ListPeersRequest) String() string { return proto.CompactTextString(m) }
func (*ListPeersRequest) ProtoMessage()    {}
func (*ListPeersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_xudrpc_360445fb04f04f0d, []int{23}
}
func (m *ListPeersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPeersRequest.Unmarshal(m, b)
}
func (m *ListPeersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPeersRequest.Marshal(b, m, deterministic)
}
func (dst *ListPeersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPeersRequest.Merge(dst, src)
}
func (m *ListPeersRequest) XXX_Size() int {
	return xxx_messageInfo_ListPeersRequest.Size(m)
}
func (m *ListPeersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPeersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListPeersRequest proto.InternalMessageInfo

type ListPeersResponse struct {
	// The list of connected peers.
	Peers                []*Peer  `protobuf:"bytes,1,rep,name=peers,proto3" json:"peers,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListPeersResponse) Reset()         { *m = ListPeersResponse{} }
func (m *ListPeersResponse) String() string { return proto.CompactTextString(m) }
func (*ListPeersResponse) ProtoMessage()    {}
func (*ListPeersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_xudrpc_360445fb04f04f0d, []int{24}
}
func (m *ListPeersResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPeersResponse.Unmarshal(m, b)
}
func (m *ListPeersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPeersResponse.Marshal(b, m, deterministic)
}
func (dst *ListPeersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPeersResponse.Merge(dst, src)
}
func (m *ListPeersResponse) XXX_Size() int {
	return xxx_messageInfo_ListPeersResponse.Size(m)
}
func (m *ListPeersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPeersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListPeersResponse proto.InternalMessageInfo

func (m *ListPeersResponse) GetPeers() []*Peer {
	if m != nil {
		return m.Peers
	}
	return nil
}

type LndChannels struct {
	// The number of active/online channels for this lnd instance that can be used for swaps.
	Active int32 `protobuf:"varint,1,opt,name=active,proto3" json:"active,omitempty"`
	// The number of inactive/offline channels for this lnd instance.
	Inactive int32 `protobuf:"varint,2,opt,name=inactive,proto3" json:"inactive,omitempty"`
	// The number of channels that are pending on-chain confirmation before they can be used.
	Pending              int32    `protobuf:"varint,3,opt,name=pending,proto3" json:"pending,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LndChannels) Reset()         { *m = LndChannels{} }
func (m *LndChannels) String() string { return proto.CompactTextString(m) }
func (*LndChannels) ProtoMessage()    {}
func (*LndChannels) Descriptor() ([]byte, []int) {
	return fileDescriptor_xudrpc_360445fb04f04f0d, []int{25}
}
func (m *LndChannels) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LndChannels.Unmarshal(m, b)
}
func (m *LndChannels) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LndChannels.Marshal(b, m, deterministic)
}
func (dst *LndChannels) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LndChannels.Merge(dst, src)
}
func (m *LndChannels) XXX_Size() int {
	return xxx_messageInfo_LndChannels.Size(m)
}
func (m *LndChannels) XXX_DiscardUnknown() {
	xxx_messageInfo_LndChannels.DiscardUnknown(m)
}

var xxx_messageInfo_LndChannels proto.InternalMessageInfo

func (m *LndChannels) GetActive() int32 {
	if m != nil {
		return m.Active
	}
	return 0
}

func (m *LndChannels) GetInactive() int32 {
	if m != nil {
		return m.Inactive
	}
	return 0
}

func (m *LndChannels) GetPending() int32 {
	if m != nil {
		return m.Pending
	}
	return 0
}

type LndInfo struct {
	Error                string       `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Channels             *LndChannels `protobuf:"bytes,2,opt,name=channels,proto3" json:"channels,omitempty"`
	Chains               []string     `protobuf:"bytes,3,rep,name=chains,proto3" json:"chains,omitempty"`
	Blockheight          int32        `protobuf:"varint,4,opt,name=blockheight,proto3" json:"blockheight,omitempty"`
	Uris                 []string     `protobuf:"bytes,5,rep,name=uris,proto3" json:"uris,omitempty"`
	Version              string       `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`
	Alias                string       `protobuf:"bytes,7,opt,name=alias,proto3" json:"alias,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *LndInfo) Reset()         { *m = LndInfo{} }
func (m *LndInfo) String() string { return proto.CompactTextString(m) }
func (*LndInfo) ProtoMessage()    {}
func (*LndInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_xudrpc_360445fb04f04f0d, []int{26}
}
func (m *LndInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LndInfo.Unmarshal(m, b)
}
func (m *LndInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LndInfo.Marshal(b, m, deterministic)
}
func (dst *LndInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LndInfo.Merge(dst, src)
}
func (m *LndInfo) XXX_Size() int {
	return xxx_messageInfo_LndInfo.Size(m)
}
func (m *LndInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LndInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LndInfo proto.InternalMessageInfo

func (m *LndInfo) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *LndInfo) GetChannels() *LndChannels {
	if m != nil {
		return m.Channels
	}
	return nil
}

func (m *LndInfo) GetChains() []string {
	if m != nil {
		return m.Chains
	}
	return nil
}

func (m *LndInfo) GetBlockheight() int32 {
	if m != nil {
		return m.Blockheight
	}
	return 0
}

func (m *LndInfo) GetUris() []string {
	if m != nil {
		return m.Uris
	}
	return nil
}

func (m *LndInfo) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *LndInfo) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

type Order struct {
	// The price of the order.
	Price float64 `protobuf:"fixed64,1,opt,name=price,proto3" json:"price,omitempty"`
	// The quantity of the order.
	Quantity float64 `protobuf:"fixed64,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// The trading pair that this order is for.
	PairId string `protobuf:"bytes,3,opt,name=pair_id,proto3" json:"pair_id,omitempty"`
	// A UUID for this order.
	Id string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are valid to be assigned to OwnOrPeer:
	//	*Order_PeerPubKey
	//	*Order_LocalId
	OwnOrPeer isOrder_OwnOrPeer `protobuf_oneof:"own_or_peer"`
	// The epoch time when this order was created.
	CreatedAt int64 `protobuf:"varint,7,opt,name=created_at,proto3" json:"created_at,omitempty"`
	// Whether this order is a buy or sell
	Side OrderSide `protobuf:"varint,8,opt,name=side,proto3,enum=xudrpc.OrderSide" json:"side,omitempty"`
	// Whether this order is a local own order or a remote peer order.
	IsOwnOrder bool `protobuf:"varint,9,opt,name=is_own_order,proto3" json:"is_own_order,omitempty"`
	// The amount on hold pending swap exectuion.
	Hold                 float64  `protobuf:"fixed64,10,opt,name=hold,proto3" json:"hold,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Order) Reset()         { *m = Order{} }
func (m *Order) String() string { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()    {}
func (*Order) Descriptor() ([]byte, []int) {
	return fileDescriptor_xudrpc_360445fb04f04f0d, []int{27}
}
func (m *Order) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Order.Unmarshal(m, b)
}
func (m *Order) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Order.Marshal(b, m, deterministic)
}
func (dst *Order) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Order.Merge(dst, src)
}
func (m *Order) XXX_Size() int {
	return xxx_messageInfo_Order.Size(m)
}
func (m *Order) XXX_DiscardUnknown() {
	xxx_messageInfo_Order.DiscardUnknown(m)
}

var xxx_messageInfo_Order proto.InternalMessageInfo

func (m *Order) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Order) GetQuantity() float64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *Order) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

func (m *Order) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type isOrder_OwnOrPeer interface {
	isOrder_OwnOrPeer()
}

type Order_PeerPubKey struct {
	PeerPubKey string `protobuf:"bytes,5,opt,name=peer_pub_key,proto3,oneof"`
}

type Order_LocalId struct {
	LocalId string `protobuf:"bytes,6,opt,name=local_id,proto3,oneof"`
}

func (*Order_PeerPubKey) isOrder_OwnOrPeer() {}

func (*Order_LocalId) isOrder_OwnOrPeer() {}

func (m *Order) GetOwnOrPeer() isOrder_OwnOrPeer {
	if m != nil {
		return m.OwnOrPeer
	}
	return nil
}

func (m *Order) GetPeerPubKey() string {
	if x, ok := m.GetOwnOrPeer().(*Order_PeerPubKey); ok {
		return x.PeerPubKey
	}
	return ""
}

func (m *Order) GetLocalId() string {
	if x, ok := m.GetOwnOrPeer().(*Order_LocalId); ok {
		return x.LocalId
	}
	return ""
}

func (m *Order) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Order) GetSide() OrderSide {
	if m != nil {
		return m.Side
	}
	return OrderSide_BUY
}

func (m *Order) GetIsOwnOrder() bool {
	if m != nil {
		return m.IsOwnOrder
	}
	return false
}

func (m *Order) GetHold() float64 {
	if m != nil {
		return m.Hold
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Order) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Order_OneofMarshaler, _Order_OneofUnmarshaler, _Order_OneofSizer, []interface{}{
		(*Order_PeerPubKey)(nil),
		(*Order_LocalId)(nil),
	}
}

func _Order_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Order)
	// own_or_peer
	switch x := m.OwnOrPeer.(type) {
	case *Order_PeerPubKey:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.PeerPubKey)
	case *Order_LocalId:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.LocalId)
	case nil:
	default:
		return fmt.Errorf("Order.OwnOrPeer has unexpected type %T", x)
	}
	return nil
}

func _Order_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Order)
	switch tag {
	case 5: // own_or_peer.peer_pub_key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.OwnOrPeer = &Order_PeerPubKey{x}
		return true, err
	case 6: // own_or_peer.local_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.OwnOrPeer = &Order_LocalId{x}
		return true, err
	default:
		return false, nil
	}
}

func _Order_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Order)
	// own_or_peer
	switch x := m.OwnOrPeer.(type) {
	case *Order_PeerPubKey:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.PeerPubKey)))
		n += len(x.PeerPubKey)
	case *Order_LocalId:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.LocalId)))
		n += len(x.LocalId)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type OrderRemoval struct {
	// The quantity of the order being removed.
	Quantity float64 `protobuf:"fixed64,1,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// The trading pair that the order is for.
	PairId string `protobuf:"bytes,2,opt,name=pair_id,proto3" json:"pair_id,omitempty"`
	// The global UUID for the order.
	OrderId string `protobuf:"bytes,3,opt,name=order_id,proto3" json:"order_id,omitempty"`
	// The local id for the order, if applicable.
	LocalId string `protobuf:"bytes,4,opt,name=local_id,proto3" json:"local_id,omitempty"`
	// Whether the order being removed is a local own order or a remote peer order.
	IsOwnOrder           bool     `protobuf:"varint,5,opt,name=is_own_order,proto3" json:"is_own_order,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrderRemoval) Reset()         { *m = OrderRemoval{} }
func (m *OrderRemoval) String() string { return proto.CompactTextString(m) }
func (*OrderRemoval) ProtoMessage()    {}
func (*OrderRemoval) Descriptor() ([]byte, []int) {
	return fileDescriptor_xudrpc_360445fb04f04f0d, []int{28}
}
func (m *OrderRemoval) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderRemoval.Unmarshal(m, b)
}
func (m *OrderRemoval) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderRemoval.Marshal(b, m, deterministic)
}
func (dst *OrderRemoval) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderRemoval.Merge(dst, src)
}
func (m *OrderRemoval) XXX_Size() int {
	return xxx_messageInfo_OrderRemoval.Size(m)
}
func (m *OrderRemoval) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderRemoval.DiscardUnknown(m)
}

var xxx_messageInfo_OrderRemoval proto.InternalMessageInfo

func (m *OrderRemoval) GetQuantity() float64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *OrderRemoval) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

func (m *OrderRemoval) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *OrderRemoval) GetLocalId() string {
	if m != nil {
		return m.LocalId
	}
	return ""
}

func (m *OrderRemoval) GetIsOwnOrder() bool {
	if m != nil {
		return m.IsOwnOrder
	}
	return false
}

type Orders struct {
	// A list of buy orders sorted by descending price.
	BuyOrders []*Order `protobuf:"bytes,1,rep,name=buy_orders,proto3" json:"buy_orders,omitempty"`
	// A list of sell orders sorted by ascending price.
	SellOrders           []*Order `protobuf:"bytes,2,rep,name=sell_orders,proto3" json:"sell_orders,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Orders) Reset()         { *m = Orders{} }
func (m *Orders) String() string { return proto.CompactTextString(m) }
func (*Orders) ProtoMessage()    {}
func (*Orders) Descriptor() ([]byte, []int) {
	return fileDescriptor_xudrpc_360445fb04f04f0d, []int{29}
}
func (m *Orders) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Orders.Unmarshal(m, b)
}
func (m *Orders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Orders.Marshal(b, m, deterministic)
}
func (dst *Orders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Orders.Merge(dst, src)
}
func (m *Orders) XXX_Size() int {
	return xxx_messageInfo_Orders.Size(m)
}
func (m *Orders) XXX_DiscardUnknown() {
	xxx_messageInfo_Orders.DiscardUnknown(m)
}

var xxx_messageInfo_Orders proto.InternalMessageInfo

func (m *Orders) GetBuyOrders() []*Order {
	if m != nil {
		return m.BuyOrders
	}
	return nil
}

func (m *Orders) GetSellOrders() []*Order {
	if m != nil {
		return m.SellOrders
	}
	return nil
}

type OrdersCount struct {
	// The number of orders belonging to remote xud nodes.
	Peer int32 `protobuf:"varint,1,opt,name=peer,proto3" json:"peer,omitempty"`
	// The number of orders belonging to our local xud node.
	Own                  int32    `protobuf:"varint,2,opt,name=own,proto3" json:"own,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrdersCount) Reset()         { *m = OrdersCount{} }
func (m *OrdersCount) String() string { return proto.CompactTextString(m) }
func (*OrdersCount) ProtoMessage()    {}
func (*OrdersCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_xudrpc_360445fb04f04f0d, []int{30}
}
func (m *OrdersCount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrdersCount.Unmarshal(m, b)
}
func (m *OrdersCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrdersCount.Marshal(b, m, deterministic)
}
func (dst *OrdersCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrdersCount.Merge(dst, src)
}
func (m *OrdersCount) XXX_Size() int {
	return xxx_messageInfo_OrdersCount.Size(m)
}
func (m *OrdersCount) XXX_DiscardUnknown() {
	xxx_messageInfo_OrdersCount.DiscardUnknown(m)
}

var xxx_messageInfo_OrdersCount proto.InternalMessageInfo

func (m *OrdersCount) GetPeer() int32 {
	if m != nil {
		return m.Peer
	}
	return 0
}

func (m *OrdersCount) GetOwn() int32 {
	if m != nil {
		return m.Own
	}
	return 0
}

type Peer struct {
	// The socket address with host and port for this peer.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// The node pub key to uniquely identify this peer.
	NodePubKey string `protobuf:"bytes,2,opt,name=node_pub_key,proto3" json:"node_pub_key,omitempty"`
	// A map of ticker symbols to lnd pub keys for this peer
	LndPubKeys map[string]string `protobuf:"bytes,3,rep,name=lnd_pub_keys,proto3" json:"lnd_pub_keys,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Indicates whether this peer was connected inbound.
	Inbound bool `protobuf:"varint,4,opt,name=inbound,proto3" json:"inbound,omitempty"`
	// A list of trading pair tickers supported by this peer.
	Pairs []string `protobuf:"bytes,5,rep,name=pairs,proto3" json:"pairs,omitempty"`
	// The version of xud being used by the peer.
	XudVersion string `protobuf:"bytes,6,opt,name=xud_version,proto3" json:"xud_version,omitempty"`
	// The time in seconds that we have been connected to this peer.
	SecondsConnected     int32    `protobuf:"varint,7,opt,name=seconds_connected,proto3" json:"seconds_connected,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Peer) Reset()         { *m = Peer{} }
func (m *Peer) String() string { return proto.CompactTextString(m) }
func (*Peer) ProtoMessage()    {}
func (*Peer) Descriptor() ([]byte, []int) {
	return fileDescriptor_xudrpc_360445fb04f04f0d, []int{31}
}
func (m *Peer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Peer.Unmarshal(m, b)
}
func (m *Peer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Peer.Marshal(b, m, deterministic)
}
func (dst *Peer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Peer.Merge(dst, src)
}
func (m *Peer) XXX_Size() int {
	return xxx_messageInfo_Peer.Size(m)
}
func (m *Peer) XXX_DiscardUnknown() {
	xxx_messageInfo_Peer.DiscardUnknown(m)
}

var xxx_messageInfo_Peer proto.InternalMessageInfo

func (m *Peer) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Peer) GetNodePubKey() string {
	if m != nil {
		return m.NodePubKey
	}
	return ""
}

func (m *Peer) GetLndPubKeys() map[string]string {
	if m != nil {
		return m.LndPubKeys
	}
	return nil
}

func (m *Peer) GetInbound() bool {
	if m != nil {
		return m.Inbound
	}
	return false
}

func (m *Peer) GetPairs() []string {
	if m != nil {
		return m.Pairs
	}
	return nil
}

func (m *Peer) GetXudVersion() string {
	if m != nil {
		return m.XudVersion
	}
	return ""
}

func (m *Peer) GetSecondsConnected() int32 {
	if m != nil {
		return m.SecondsConnected
	}
	return 0
}

type PlaceOrderRequest struct {
	// The price of the order.
	Price float64 `protobuf:"fixed64,1,opt,name=price,proto3" json:"price,omitempty"`
	// The quantity of the order.
	Quantity float64 `protobuf:"fixed64,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// The trading pair that the order is for.
	PairId string `protobuf:"bytes,3,opt,name=pair_id,proto3" json:"pair_id,omitempty"`
	// The local id to assign to the order.
	OrderId string `protobuf:"bytes,4,opt,name=order_id,proto3" json:"order_id,omitempty"`
	// Whether the order is a Buy or Sell.
	Side                 OrderSide `protobuf:"varint,5,opt,name=side,proto3,enum=xudrpc.OrderSide" json:"side,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *PlaceOrderRequest) Reset()         { *m = PlaceOrderRequest{} }
func (m *PlaceOrderRequest) String() string { return proto.CompactTextString(m) }
func (*PlaceOrderRequest) ProtoMessage()    {}
func (*PlaceOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_xudrpc_360445fb04f04f0d, []int{32}
}
func (m *PlaceOrderRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlaceOrderRequest.Unmarshal(m, b)
}
func (m *PlaceOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlaceOrderRequest.Marshal(b, m, deterministic)
}
func (dst *PlaceOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlaceOrderRequest.Merge(dst, src)
}
func (m *PlaceOrderRequest) XXX_Size() int {
	return xxx_messageInfo_PlaceOrderRequest.Size(m)
}
func (m *PlaceOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PlaceOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PlaceOrderRequest proto.InternalMessageInfo

func (m *PlaceOrderRequest) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *PlaceOrderRequest) GetQuantity() float64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *PlaceOrderRequest) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

func (m *PlaceOrderRequest) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *PlaceOrderRequest) GetSide() OrderSide {
	if m != nil {
		return m.Side
	}
	return OrderSide_BUY
}

type PlaceOrderResponse struct {
	// A list of own orders (or portions thereof) that matched the newly placed order.
	InternalMatches []*Order `protobuf:"bytes,1,rep,name=internal_matches,proto3" json:"internal_matches,omitempty"`
	// A list of successful swaps of peer orders that matched the newly placed order.
	SwapSuccesses []*SwapSuccess `protobuf:"bytes,2,rep,name=swap_successes,proto3" json:"swap_successes,omitempty"`
	// The remaining portion of the order, after matches, that enters the order book.
	RemainingOrder *Order `protobuf:"bytes,3,opt,name=remaining_order,proto3" json:"remaining_order,omitempty"`
	// A list of swap attempts that failed.
	SwapFailures         []*SwapFailure `protobuf:"bytes,4,rep,name=swap_failures,proto3" json:"swap_failures,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PlaceOrderResponse) Reset()         { *m = PlaceOrderResponse{} }
func (m *PlaceOrderResponse) String() string { return proto.CompactTextString(m) }
func (*PlaceOrderResponse) ProtoMessage()    {}
func (*PlaceOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_xudrpc_360445fb04f04f0d, []int{33}
}
func (m *PlaceOrderResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlaceOrderResponse.Unmarshal(m, b)
}
func (m *PlaceOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlaceOrderResponse.Marshal(b, m, deterministic)
}
func (dst *PlaceOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlaceOrderResponse.Merge(dst, src)
}
func (m *PlaceOrderResponse) XXX_Size() int {
	return xxx_messageInfo_PlaceOrderResponse.Size(m)
}
func (m *PlaceOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PlaceOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PlaceOrderResponse proto.InternalMessageInfo

func (m *PlaceOrderResponse) GetInternalMatches() []*Order {
	if m != nil {
		return m.InternalMatches
	}
	return nil
}

func (m *PlaceOrderResponse) GetSwapSuccesses() []*SwapSuccess {
	if m != nil {
		return m.SwapSuccesses
	}
	return nil
}

func (m *PlaceOrderResponse) GetRemainingOrder() *Order {
	if m != nil {
		return m.RemainingOrder
	}
	return nil
}

func (m *PlaceOrderResponse) GetSwapFailures() []*SwapFailure {
	if m != nil {
		return m.SwapFailures
	}
	return nil
}

type PlaceOrderEvent struct {
	// Types that are valid to be assigned to Event:
	//	*PlaceOrderEvent_InternalMatch
	//	*PlaceOrderEvent_SwapSuccess
	//	*PlaceOrderEvent_RemainingOrder
	//	*PlaceOrderEvent_SwapFailure
	Event                isPlaceOrderEvent_Event `protobuf_oneof:"event"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *PlaceOrderEvent) Reset()         { *m = PlaceOrderEvent{} }
func (m *PlaceOrderEvent) String() string { return proto.CompactTextString(m) }
func (*PlaceOrderEvent) ProtoMessage()    {}
func (*PlaceOrderEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_xudrpc_360445fb04f04f0d, []int{34}
}
func (m *PlaceOrderEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlaceOrderEvent.Unmarshal(m, b)
}
func (m *PlaceOrderEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlaceOrderEvent.Marshal(b, m, deterministic)
}
func (dst *PlaceOrderEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlaceOrderEvent.Merge(dst, src)
}
func (m *PlaceOrderEvent) XXX_Size() int {
	return xxx_messageInfo_PlaceOrderEvent.Size(m)
}
func (m *PlaceOrderEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_PlaceOrderEvent.DiscardUnknown(m)
}

var xxx_messageInfo_PlaceOrderEvent proto.InternalMessageInfo

type isPlaceOrderEvent_Event interface {
	isPlaceOrderEvent_Event()
}

type PlaceOrderEvent_InternalMatch struct {
	InternalMatch *Order `protobuf:"bytes,1,opt,name=internal_match,proto3,oneof"`
}

type PlaceOrderEvent_SwapSuccess struct {
	SwapSuccess *SwapSuccess `protobuf:"bytes,2,opt,name=swap_success,proto3,oneof"`
}

type PlaceOrderEvent_RemainingOrder struct {
	RemainingOrder *Order `protobuf:"bytes,3,opt,name=remaining_order,proto3,oneof"`
}

type PlaceOrderEvent_SwapFailure struct {
	SwapFailure *SwapFailure `protobuf:"bytes,4,opt,name=swap_failure,proto3,oneof"`
}

func (*PlaceOrderEvent_InternalMatch) isPlaceOrderEvent_Event() {}

func (*PlaceOrderEvent_SwapSuccess) isPlaceOrderEvent_Event() {}

func (*PlaceOrderEvent_RemainingOrder) isPlaceOrderEvent_Event() {}

func (*PlaceOrderEvent_SwapFailure) isPlaceOrderEvent_Event() {}

func (m *PlaceOrderEvent) GetEvent() isPlaceOrderEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *PlaceOrderEvent) GetInternalMatch() *Order {
	if x, ok := m.GetEvent().(*PlaceOrderEvent_InternalMatch); ok {
		return x.InternalMatch
	}
	return nil
}

func (m *PlaceOrderEvent) GetSwapSuccess() *SwapSuccess {
	if x, ok := m.GetEvent().(*PlaceOrderEvent_SwapSuccess); ok {
		return x.SwapSuccess
	}
	return nil
}

func (m *PlaceOrderEvent) GetRemainingOrder() *Order {
	if x, ok := m.GetEvent().(*PlaceOrderEvent_RemainingOrder); ok {
		return x.RemainingOrder
	}
	return nil
}

func (m *PlaceOrderEvent) GetSwapFailure() *SwapFailure {
	if x, ok := m.GetEvent().(*PlaceOrderEvent_SwapFailure); ok {
		return x.SwapFailure
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PlaceOrderEvent) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PlaceOrderEvent_OneofMarshaler, _PlaceOrderEvent_OneofUnmarshaler, _PlaceOrderEvent_OneofSizer, []interface{}{
		(*PlaceOrderEvent_InternalMatch)(nil),
		(*PlaceOrderEvent_SwapSuccess)(nil),
		(*PlaceOrderEvent_RemainingOrder)(nil),
		(*PlaceOrderEvent_SwapFailure)(nil),
	}
}

func _PlaceOrderEvent_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PlaceOrderEvent)
	// event
	switch x := m.Event.(type) {
	case *PlaceOrderEvent_InternalMatch:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InternalMatch); err != nil {
			return err
		}
	case *PlaceOrderEvent_SwapSuccess:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SwapSuccess); err != nil {
			return err
		}
	case *PlaceOrderEvent_RemainingOrder:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RemainingOrder); err != nil {
			return err
		}
	case *PlaceOrderEvent_SwapFailure:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SwapFailure); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("PlaceOrderEvent.Event has unexpected type %T", x)
	}
	return nil
}

func _PlaceOrderEvent_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PlaceOrderEvent)
	switch tag {
	case 1: // event.internal_match
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Order)
		err := b.DecodeMessage(msg)
		m.Event = &PlaceOrderEvent_InternalMatch{msg}
		return true, err
	case 2: // event.swap_success
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SwapSuccess)
		err := b.DecodeMessage(msg)
		m.Event = &PlaceOrderEvent_SwapSuccess{msg}
		return true, err
	case 3: // event.remaining_order
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Order)
		err := b.DecodeMessage(msg)
		m.Event = &PlaceOrderEvent_RemainingOrder{msg}
		return true, err
	case 4: // event.swap_failure
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SwapFailure)
		err := b.DecodeMessage(msg)
		m.Event = &PlaceOrderEvent_SwapFailure{msg}
		return true, err
	default:
		return false, nil
	}
}

func _PlaceOrderEvent_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PlaceOrderEvent)
	// event
	switch x := m.Event.(type) {
	case *PlaceOrderEvent_InternalMatch:
		s := proto.Size(x.InternalMatch)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PlaceOrderEvent_SwapSuccess:
		s := proto.Size(x.SwapSuccess)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PlaceOrderEvent_RemainingOrder:
		s := proto.Size(x.RemainingOrder)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PlaceOrderEvent_SwapFailure:
		s := proto.Size(x.SwapFailure)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type RaidenInfo struct {
	Error                string   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Address              string   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Channels             int32    `protobuf:"varint,3,opt,name=channels,proto3" json:"channels,omitempty"`
	Version              string   `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RaidenInfo) Reset()         { *m = RaidenInfo{} }
func (m *RaidenInfo) String() string { return proto.CompactTextString(m) }
func (*RaidenInfo) ProtoMessage()    {}
func (*RaidenInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_xudrpc_360445fb04f04f0d, []int{35}
}
func (m *RaidenInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RaidenInfo.Unmarshal(m, b)
}
func (m *RaidenInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RaidenInfo.Marshal(b, m, deterministic)
}
func (dst *RaidenInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaidenInfo.Merge(dst, src)
}
func (m *RaidenInfo) XXX_Size() int {
	return xxx_messageInfo_RaidenInfo.Size(m)
}
func (m *RaidenInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RaidenInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RaidenInfo proto.InternalMessageInfo

func (m *RaidenInfo) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *RaidenInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *RaidenInfo) GetChannels() int32 {
	if m != nil {
		return m.Channels
	}
	return 0
}

func (m *RaidenInfo) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type RemoveCurrencyRequest struct {
	// The ticker symbol for this currency such as BTC, LTC, ETH, etc...
	Currency             string   `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveCurrencyRequest) Reset()         { *m = RemoveCurrencyRequest{} }
func (m *RemoveCurrencyRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveCurrencyRequest) ProtoMessage()    {}
func (*RemoveCurrencyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_xudrpc_360445fb04f04f0d, []int{36}
}
func (m *RemoveCurrencyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveCurrencyRequest.Unmarshal(m, b)
}
func (m *RemoveCurrencyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveCurrencyRequest.Marshal(b, m, deterministic)
}
func (dst *RemoveCurrencyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveCurrencyRequest.Merge(dst, src)
}
func (m *RemoveCurrencyRequest) XXX_Size() int {
	return xxx_messageInfo_RemoveCurrencyRequest.Size(m)
}
func (m *RemoveCurrencyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveCurrencyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveCurrencyRequest proto.InternalMessageInfo

func (m *RemoveCurrencyRequest) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

type RemoveCurrencyResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveCurrencyResponse) Reset()         { *m = RemoveCurrencyResponse{} }
func (m *RemoveCurrencyResponse) String() string { return proto.CompactTextString(m) }
func (*RemoveCurrencyResponse) ProtoMessage()    {}
func (*RemoveCurrencyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_xudrpc_360445fb04f04f0d, []int{37}
}
func (m *RemoveCurrencyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveCurrencyResponse.Unmarshal(m, b)
}
func (m *RemoveCurrencyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveCurrencyResponse.Marshal(b, m, deterministic)
}
func (dst *RemoveCurrencyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveCurrencyResponse.Merge(dst, src)
}
func (m *RemoveCurrencyResponse) XXX_Size() int {
	return xxx_messageInfo_RemoveCurrencyResponse.Size(m)
}
func (m *RemoveCurrencyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveCurrencyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveCurrencyResponse proto.InternalMessageInfo

type RemoveOrderRequest struct {
	// The local id of the order to remove.
	OrderId              string   `protobuf:"bytes,1,opt,name=order_id,proto3" json:"order_id,omitempty"`
	Quantity             float64  `protobuf:"fixed64,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveOrderRequest) Reset()         { *m = RemoveOrderRequest{} }
func (m *RemoveOrderRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveOrderRequest) ProtoMessage()    {}
func (*RemoveOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_xudrpc_360445fb04f04f0d, []int{38}
}
func (m *RemoveOrderRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveOrderRequest.Unmarshal(m, b)
}
func (m *RemoveOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveOrderRequest.Marshal(b, m, deterministic)
}
func (dst *RemoveOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveOrderRequest.Merge(dst, src)
}
func (m *RemoveOrderRequest) XXX_Size() int {
	return xxx_messageInfo_RemoveOrderRequest.Size(m)
}
func (m *RemoveOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveOrderRequest proto.InternalMessageInfo

func (m *RemoveOrderRequest) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *RemoveOrderRequest) GetQuantity() float64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

type RemoveOrderResponse struct {
	// Any portion of the order that was on hold due to ongoing swaps at the time of the request
	// and could not be removed until after the swaps finish.
	QuantityOnHold       float64  `protobuf:"fixed64,1,opt,name=quantity_on_hold,json=hold,proto3" json:"quantity_on_hold,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveOrderResponse) Reset()         { *m = RemoveOrderResponse{} }
func (m *RemoveOrderResponse) String() string { return proto.CompactTextString(m) }
func (*RemoveOrderResponse) ProtoMessage()    {}
func (*RemoveOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_xudrpc_360445fb04f04f0d, []int{39}
}
func (m *RemoveOrderResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveOrderResponse.Unmarshal(m, b)
}
func (m *RemoveOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveOrderResponse.Marshal(b, m, deterministic)
}
func (dst *RemoveOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveOrderResponse.Merge(dst, src)
}
func (m *RemoveOrderResponse) XXX_Size() int {
	return xxx_messageInfo_RemoveOrderResponse.Size(m)
}
func (m *RemoveOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveOrderResponse proto.InternalMessageInfo

func (m *RemoveOrderResponse) GetQuantityOnHold() float64 {
	if m != nil {
		return m.QuantityOnHold
	}
	return 0
}

type RemovePairRequest struct {
	// The trading pair ticker to remove in a format such as "LTC/BTC".
	PairId               string   `protobuf:"bytes,1,opt,name=pair_id,proto3" json:"pair_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemovePairRequest) Reset()         { *m = RemovePairRequest{} }
func (m *RemovePairRequest) String() string { return proto.CompactTextString(m) }
func (*RemovePairRequest) ProtoMessage()    {}
func (*RemovePairRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_xudrpc_360445fb04f04f0d, []int{40}
}
func (m *RemovePairRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemovePairRequest.Unmarshal(m, b)
}
func (m *RemovePairRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemovePairRequest.Marshal(b, m, deterministic)
}
func (dst *RemovePairRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemovePairRequest.Merge(dst, src)
}
func (m *RemovePairRequest) XXX_Size() int {
	return xxx_messageInfo_RemovePairRequest.Size(m)
}
func (m *RemovePairRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemovePairRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemovePairRequest proto.InternalMessageInfo

func (m *RemovePairRequest) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

type RemovePairResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemovePairResponse) Reset()         { *m = RemovePairResponse{} }
func (m *RemovePairResponse) String() string { return proto.CompactTextString(m) }
func (*RemovePairResponse) ProtoMessage()    {}
func (*RemovePairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_xudrpc_360445fb04f04f0d, []int{41}
}
func (m *RemovePairResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemovePairResponse.Unmarshal(m, b)
}
func (m *RemovePairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemovePairResponse.Marshal(b, m, deterministic)
}
func (dst *RemovePairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemovePairResponse.Merge(dst, src)
}
func (m *RemovePairResponse) XXX_Size() int {
	return xxx_messageInfo_RemovePairResponse.Size(m)
}
func (m *RemovePairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemovePairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemovePairResponse proto.InternalMessageInfo

type ShutdownRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShutdownRequest) Reset()         { *m = ShutdownRequest{} }
func (m *ShutdownRequest) String() string { return proto.CompactTextString(m) }
func (*ShutdownRequest) ProtoMessage()    {}
func (*ShutdownRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_xudrpc_360445fb04f04f0d, []int{42}
}
func (m *ShutdownRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShutdownRequest.Unmarshal(m, b)
}
func (m *ShutdownRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShutdownRequest.Marshal(b, m, deterministic)
}
func (dst *ShutdownRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShutdownRequest.Merge(dst, src)
}
func (m *ShutdownRequest) XXX_Size() int {
	return xxx_messageInfo_ShutdownRequest.Size(m)
}
func (m *ShutdownRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ShutdownRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ShutdownRequest proto.InternalMessageInfo

type ShutdownResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShutdownResponse) Reset()         { *m = ShutdownResponse{} }
func (m *ShutdownResponse) String() string { return proto.CompactTextString(m) }
func (*ShutdownResponse) ProtoMessage()    {}
func (*ShutdownResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_xudrpc_360445fb04f04f0d, []int{43}
}
func (m *ShutdownResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShutdownResponse.Unmarshal(m, b)
}
func (m *ShutdownResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShutdownResponse.Marshal(b, m, deterministic)
}
func (dst *ShutdownResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShutdownResponse.Merge(dst, src)
}
func (m *ShutdownResponse) XXX_Size() int {
	return xxx_messageInfo_ShutdownResponse.Size(m)
}
func (m *ShutdownResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ShutdownResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ShutdownResponse proto.InternalMessageInfo

type SubscribeAddedOrdersRequest struct {
	// Whether to transmit all existing active orders upon establishing the stream.
	Existing             bool     `protobuf:"varint,1,opt,name=existing,proto3" json:"existing,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeAddedOrdersRequest) Reset()         { *m = SubscribeAddedOrdersRequest{} }
func (m *SubscribeAddedOrdersRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeAddedOrdersRequest) ProtoMessage()    {}
func (*SubscribeAddedOrdersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_xudrpc_360445fb04f04f0d, []int{44}
}
func (m *SubscribeAddedOrdersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeAddedOrdersRequest.Unmarshal(m, b)
}
func (m *SubscribeAddedOrdersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeAddedOrdersRequest.Marshal(b, m, deterministic)
}
func (dst *SubscribeAddedOrdersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeAddedOrdersRequest.Merge(dst, src)
}
func (m *SubscribeAddedOrdersRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeAddedOrdersRequest.Size(m)
}
func (m *SubscribeAddedOrdersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeAddedOrdersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeAddedOrdersRequest proto.InternalMessageInfo

func (m *SubscribeAddedOrdersRequest) GetExisting() bool {
	if m != nil {
		return m.Existing
	}
	return false
}

type SubscribeRemovedOrdersRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeRemovedOrdersRequest) Reset()         { *m = SubscribeRemovedOrdersRequest{} }
func (m *SubscribeRemovedOrdersRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeRemovedOrdersRequest) ProtoMessage()    {}
func (*SubscribeRemovedOrdersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_xudrpc_360445fb04f04f0d, []int{45}
}
func (m *SubscribeRemovedOrdersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeRemovedOrdersRequest.Unmarshal(m, b)
}
func (m *SubscribeRemovedOrdersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeRemovedOrdersRequest.Marshal(b, m, deterministic)
}
func (dst *SubscribeRemovedOrdersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeRemovedOrdersRequest.Merge(dst, src)
}
func (m *SubscribeRemovedOrdersRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeRemovedOrdersRequest.Size(m)
}
func (m *SubscribeRemovedOrdersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeRemovedOrdersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeRemovedOrdersRequest proto.InternalMessageInfo

type SubscribeSwapsRequest struct {
	// Whether to include the results for swaps initiated via the PlaceOrder or ExecuteSwap calls.
	// These swap results are also returned in the responses for the respective calls.
	IncludeTaker         bool     `protobuf:"varint,1,opt,name=include_taker,proto3" json:"include_taker,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeSwapsRequest) Reset()         { *m = SubscribeSwapsRequest{} }
func (m *SubscribeSwapsRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeSwapsRequest) ProtoMessage()    {}
func (*SubscribeSwapsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_xudrpc_360445fb04f04f0d, []int{46}
}
func (m *SubscribeSwapsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeSwapsRequest.Unmarshal(m, b)
}
func (m *SubscribeSwapsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeSwapsRequest.Marshal(b, m, deterministic)
}
func (dst *SubscribeSwapsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeSwapsRequest.Merge(dst, src)
}
func (m *SubscribeSwapsRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeSwapsRequest.Size(m)
}
func (m *SubscribeSwapsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeSwapsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeSwapsRequest proto.InternalMessageInfo

func (m *SubscribeSwapsRequest) GetIncludeTaker() bool {
	if m != nil {
		return m.IncludeTaker
	}
	return false
}

type SwapSuccess struct {
	// The global UUID for the order that was swapped.
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// The local id for the order that was swapped.
	LocalId string `protobuf:"bytes,2,opt,name=local_id,proto3" json:"local_id,omitempty"`
	// The trading pair that the swap is for.
	PairId string `protobuf:"bytes,3,opt,name=pair_id,proto3" json:"pair_id,omitempty"`
	// The order quantity that was swapped.
	Quantity float64 `protobuf:"fixed64,4,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// The hex-encoded payment hash for the swaps.
	RHash string `protobuf:"bytes,5,opt,name=r_hash,proto3" json:"r_hash,omitempty"`
	// The amount of subunits (satoshis) received.
	AmountReceived int64 `protobuf:"varint,8,opt,name=amount_received,proto3" json:"amount_received,omitempty"`
	// The amount of subunits (satoshis) sent.
	AmountSent int64 `protobuf:"varint,9,opt,name=amount_sent,proto3" json:"amount_sent,omitempty"`
	// The node pub key of the peer that executed this order.
	PeerPubKey string `protobuf:"bytes,10,opt,name=peer_pub_key,proto3" json:"peer_pub_key,omitempty"`
	// Our role in the swap, either MAKER or TAKER.
	Role SwapSuccess_Role `protobuf:"varint,11,opt,name=role,proto3,enum=xudrpc.SwapSuccess_Role" json:"role,omitempty"`
	// The ticker symbol of the currency received.
	CurrencyReceived string `protobuf:"bytes,12,opt,name=currency_received,proto3" json:"currency_received,omitempty"`
	// The ticker symbol of the currency sent.
	CurrencySent string `protobuf:"bytes,13,opt,name=currency_sent,proto3" json:"currency_sent,omitempty"`
	// The hex-encoded preimage.
	RPreimage string `protobuf:"bytes,14,opt,name=r_preimage,proto3" json:"r_preimage,omitempty"`
	// The price used for the swap.
	Price                float64  `protobuf:"fixed64,15,opt,name=price,proto3" json:"price,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SwapSuccess) Reset()         { *m = SwapSuccess{} }
func (m *SwapSuccess) String() string { return proto.CompactTextString(m) }
func (*SwapSuccess) ProtoMessage()    {}
func (*SwapSuccess) Descriptor() ([]byte, []int) {
	return fileDescriptor_xudrpc_360445fb04f04f0d, []int{47}
}
func (m *SwapSuccess) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SwapSuccess.Unmarshal(m, b)
}
func (m *SwapSuccess) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SwapSuccess.Marshal(b, m, deterministic)
}
func (dst *SwapSuccess) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwapSuccess.Merge(dst, src)
}
func (m *SwapSuccess) XXX_Size() int {
	return xxx_messageInfo_SwapSuccess.Size(m)
}
func (m *SwapSuccess) XXX_DiscardUnknown() {
	xxx_messageInfo_SwapSuccess.DiscardUnknown(m)
}

var xxx_messageInfo_SwapSuccess proto.InternalMessageInfo

func (m *SwapSuccess) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *SwapSuccess) GetLocalId() string {
	if m != nil {
		return m.LocalId
	}
	return ""
}

func (m *SwapSuccess) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

func (m *SwapSuccess) GetQuantity() float64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *SwapSuccess) GetRHash() string {
	if m != nil {
		return m.RHash
	}
	return ""
}

func (m *SwapSuccess) GetAmountReceived() int64 {
	if m != nil {
		return m.AmountReceived
	}
	return 0
}

func (m *SwapSuccess) GetAmountSent() int64 {
	if m != nil {
		return m.AmountSent
	}
	return 0
}

func (m *SwapSuccess) GetPeerPubKey() string {
	if m != nil {
		return m.PeerPubKey
	}
	return ""
}

func (m *SwapSuccess) GetRole() SwapSuccess_Role {
	if m != nil {
		return m.Role
	}
	return SwapSuccess_TAKER
}

func (m *SwapSuccess) GetCurrencyReceived() string {
	if m != nil {
		return m.CurrencyReceived
	}
	return ""
}

func (m *SwapSuccess) GetCurrencySent() string {
	if m != nil {
		return m.CurrencySent
	}
	return ""
}

func (m *SwapSuccess) GetRPreimage() string {
	if m != nil {
		return m.RPreimage
	}
	return ""
}

func (m *SwapSuccess) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

type UnbanRequest struct {
	// The node pub key of the peer to unban.
	NodePubKey string `protobuf:"bytes,1,opt,name=node_pub_key,proto3" json:"node_pub_key,omitempty"`
	// Whether to attempt to connect to the peer after it is unbanned.
	Reconnect            bool     `protobuf:"varint,2,opt,name=reconnect,proto3" json:"reconnect,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnbanRequest) Reset()         { *m = UnbanRequest{} }
func (m *UnbanRequest) String() string { return proto.CompactTextString(m) }
func (*UnbanRequest) ProtoMessage()    {}
func (*UnbanRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_xudrpc_360445fb04f04f0d, []int{48}
}
func (m *UnbanRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnbanRequest.Unmarshal(m, b)
}
func (m *UnbanRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnbanRequest.Marshal(b, m, deterministic)
}
func (dst *UnbanRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnbanRequest.Merge(dst, src)
}
func (m *UnbanRequest) XXX_Size() int {
	return xxx_messageInfo_UnbanRequest.Size(m)
}
func (m *UnbanRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnbanRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnbanRequest proto.InternalMessageInfo

func (m *UnbanRequest) GetNodePubKey() string {
	if m != nil {
		return m.NodePubKey
	}
	return ""
}

func (m *UnbanRequest) GetReconnect() bool {
	if m != nil {
		return m.Reconnect
	}
	return false
}

type UnbanResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnbanResponse) Reset()         { *m = UnbanResponse{} }
func (m *UnbanResponse) String() string { return proto.CompactTextString(m) }
func (*UnbanResponse) ProtoMessage()    {}
func (*UnbanResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_xudrpc_360445fb04f04f0d, []int{49}
}
func (m *UnbanResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnbanResponse.Unmarshal(m, b)
}
func (m *UnbanResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnbanResponse.Marshal(b, m, deterministic)
}
func (dst *UnbanResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnbanResponse.Merge(dst, src)
}
func (m *UnbanResponse) XXX_Size() int {
	return xxx_messageInfo_UnbanResponse.Size(m)
}
func (m *UnbanResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UnbanResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UnbanResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AddCurrencyRequest)(nil), "xudrpc.AddCurrencyRequest")
	proto.RegisterType((*AddCurrencyResponse)(nil), "xudrpc.AddCurrencyResponse")
	proto.RegisterType((*AddPairRequest)(nil), "xudrpc.AddPairRequest")
	proto.RegisterType((*AddPairResponse)(nil), "xudrpc.AddPairResponse")
	proto.RegisterType((*BanRequest)(nil), "xudrpc.BanRequest")
	proto.RegisterType((*BanResponse)(nil), "xudrpc.BanResponse")
	proto.RegisterType((*ChannelBalance)(nil), "xudrpc.ChannelBalance")
	proto.RegisterType((*ChannelBalanceRequest)(nil), "xudrpc.ChannelBalanceRequest")
	proto.RegisterType((*ChannelBalanceResponse)(nil), "xudrpc.ChannelBalanceResponse")
	proto.RegisterMapType((map[string]*ChannelBalance)(nil), "xudrpc.ChannelBalanceResponse.BalancesEntry")
	proto.RegisterType((*ConnectRequest)(nil), "xudrpc.ConnectRequest")
	proto.RegisterType((*ConnectResponse)(nil), "xudrpc.ConnectResponse")
	proto.RegisterType((*ExecuteSwapRequest)(nil), "xudrpc.ExecuteSwapRequest")
	proto.RegisterType((*SwapFailure)(nil), "xudrpc.SwapFailure")
	proto.RegisterType((*GetInfoRequest)(nil), "xudrpc.GetInfoRequest")
	proto.RegisterType((*GetInfoResponse)(nil), "xudrpc.GetInfoResponse")
	proto.RegisterMapType((map[string]*LndInfo)(nil), "xudrpc.GetInfoResponse.LndEntry")
	proto.RegisterType((*GetNodeInfoRequest)(nil), "xudrpc.GetNodeInfoRequest")
	proto.RegisterType((*GetNodeInfoResponse)(nil), "xudrpc.GetNodeInfoResponse")
	proto.RegisterType((*ListOrdersRequest)(nil), "xudrpc.ListOrdersRequest")
	proto.RegisterType((*ListOrdersResponse)(nil), "xudrpc.ListOrdersResponse")
	proto.RegisterMapType((map[string]*Orders)(nil), "xudrpc.ListOrdersResponse.OrdersEntry")
	proto.RegisterType((*ListCurrenciesRequest)(nil), "xudrpc.ListCurrenciesRequest")
	proto.RegisterType((*ListCurrenciesResponse)(nil), "xudrpc.ListCurrenciesResponse")
	proto.RegisterType((*ListPairsRequest)(nil), "xudrpc.ListPairsRequest")
	proto.RegisterType((*ListPairsResponse)(nil), "xudrpc.ListPairsResponse")
	proto.RegisterType((*ListPeersRequest)(nil), "xudrpc.ListPeersRequest")
	proto.RegisterType((*ListPeersResponse)(nil), "xudrpc.ListPeersResponse")
	proto.RegisterType((*LndChannels)(nil), "xudrpc.LndChannels")
	proto.RegisterType((*LndInfo)(nil), "xudrpc.LndInfo")
	proto.RegisterType((*Order)(nil), "xudrpc.Order")
	proto.RegisterType((*OrderRemoval)(nil), "xudrpc.OrderRemoval")
	proto.RegisterType((*Orders)(nil), "xudrpc.Orders")
	proto.RegisterType((*OrdersCount)(nil), "xudrpc.OrdersCount")
	proto.RegisterType((*Peer)(nil), "xudrpc.Peer")
	proto.RegisterMapType((map[string]string)(nil), "xudrpc.Peer.LndPubKeysEntry")
	proto.RegisterType((*PlaceOrderRequest)(nil), "xudrpc.PlaceOrderRequest")
	proto.RegisterType((*PlaceOrderResponse)(nil), "xudrpc.PlaceOrderResponse")
	proto.RegisterType((*PlaceOrderEvent)(nil), "xudrpc.PlaceOrderEvent")
	proto.RegisterType((*RaidenInfo)(nil), "xudrpc.RaidenInfo")
	proto.RegisterType((*RemoveCurrencyRequest)(nil), "xudrpc.RemoveCurrencyRequest")
	proto.RegisterType((*RemoveCurrencyResponse)(nil), "xudrpc.RemoveCurrencyResponse")
	proto.RegisterType((*RemoveOrderRequest)(nil), "xudrpc.RemoveOrderRequest")
	proto.RegisterType((*RemoveOrderResponse)(nil), "xudrpc.RemoveOrderResponse")
	proto.RegisterType((*RemovePairRequest)(nil), "xudrpc.RemovePairRequest")
	proto.RegisterType((*RemovePairResponse)(nil), "xudrpc.RemovePairResponse")
	proto.RegisterType((*ShutdownRequest)(nil), "xudrpc.ShutdownRequest")
	proto.RegisterType((*ShutdownResponse)(nil), "xudrpc.ShutdownResponse")
	proto.RegisterType((*SubscribeAddedOrdersRequest)(nil), "xudrpc.SubscribeAddedOrdersRequest")
	proto.RegisterType((*SubscribeRemovedOrdersRequest)(nil), "xudrpc.SubscribeRemovedOrdersRequest")
	proto.RegisterType((*SubscribeSwapsRequest)(nil), "xudrpc.SubscribeSwapsRequest")
	proto.RegisterType((*SwapSuccess)(nil), "xudrpc.SwapSuccess")
	proto.RegisterType((*UnbanRequest)(nil), "xudrpc.UnbanRequest")
	proto.RegisterType((*UnbanResponse)(nil), "xudrpc.UnbanResponse")
	proto.RegisterEnum("xudrpc.OrderSide", OrderSide_name, OrderSide_value)
	proto.RegisterEnum("xudrpc.AddCurrencyRequest_SwapClient", AddCurrencyRequest_SwapClient_name, AddCurrencyRequest_SwapClient_value)
	proto.RegisterEnum("xudrpc.SwapSuccess_Role", SwapSuccess_Role_name, SwapSuccess_Role_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// XudClient is the client API for Xud service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type XudClient interface {
	// Adds a currency to the list of supported currencies. Once added, the currency may be used for
	// new trading pairs.
	AddCurrency(ctx context.Context, in *AddCurrencyRequest, opts ...grpc.CallOption) (*AddCurrencyResponse, error)
	// Adds a trading pair to the list of supported trading pairs. The newly supported pair is
	// advertised to peers so they may begin sending orders for it.
	AddPair(ctx context.Context, in *AddPairRequest, opts ...grpc.CallOption) (*AddPairResponse, error)
	// Removes an order from the order book by its local id. This should be called when an order is
	// canceled or filled outside of xud. Removed orders become immediately unavailable for swaps,
	// and peers are notified that the order is no longer valid. Any portion of the order that is
	// on hold due to ongoing swaps will not be removed until after the swap attempts complete.
	RemoveOrder(ctx context.Context, in *RemoveOrderRequest, opts ...grpc.CallOption) (*RemoveOrderResponse, error)
	// Gets the total balance available across all payment channels for one or all currencies.
	ChannelBalance(ctx context.Context, in *ChannelBalanceRequest, opts ...grpc.CallOption) (*ChannelBalanceResponse, error)
	// Attempts to connect to a node. Once connected, the node is added to the list of peers and
	// becomes available for swaps and trading. A handshake exchanges information about the peer's
	// supported trading and swap clients. Orders will be shared with the peer upon connection and
	// upon new order placements.
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error)
	// Bans a node and immediately disconnects from it. This can be used to prevent any connections
	// to a specific node.
	Ban(ctx context.Context, in *BanRequest, opts ...grpc.CallOption) (*BanResponse, error)
	// Removes a ban from a node manually and, optionally, attempts to connect to it.
	Unban(ctx context.Context, in *UnbanRequest, opts ...grpc.CallOption) (*UnbanResponse, error)
	// Gets general information about this node.
	GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error)
	// Gets general information about a node.
	GetNodeInfo(ctx context.Context, in *GetNodeInfoRequest, opts ...grpc.CallOption) (*GetNodeInfoResponse, error)
	// Gets orders from the order book. This call returns the state of the order book at a given point
	// in time, although it is not guaranteed to still be vaild by the time a response is received
	// and processed by a client. It accepts an optional trading pair id parameter. If specified, only
	// orders for that particular trading pair are returned. Otherwise, all orders are returned. Orders
	// are separated into buys and sells for each trading pair, but unsorted.
	ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error)
	// Gets a list of this node's supported currencies.
	ListCurrencies(ctx context.Context, in *ListCurrenciesRequest, opts ...grpc.CallOption) (*ListCurrenciesResponse, error)
	// Gets a list of this nodes suported trading pairs.
	ListPairs(ctx context.Context, in *ListPairsRequest, opts ...grpc.CallOption) (*ListPairsResponse, error)
	// Gets a list of connected peers.
	ListPeers(ctx context.Context, in *ListPeersRequest, opts ...grpc.CallOption) (*ListPeersResponse, error)
	// Adds an order to the order book.
	// If price is zero or unspecified a market order will get added.
	PlaceOrder(ctx context.Context, in *PlaceOrderRequest, opts ...grpc.CallOption) (Xud_PlaceOrderClient, error)
	// The synchronous non-streaming version of PlaceOrder.
	PlaceOrderSync(ctx context.Context, in *PlaceOrderRequest, opts ...grpc.CallOption) (*PlaceOrderResponse, error)
	// Execute a swap on a maker peer order
	ExecuteSwap(ctx context.Context, in *ExecuteSwapRequest, opts ...grpc.CallOption) (*SwapSuccess, error)
	// Removes a currency from the list of supported currencies. Only currencies that are not in use
	// for any currently supported trading pairs may be removed. Once removed, the currency can no
	// longer be used for any supported trading pairs.
	RemoveCurrency(ctx context.Context, in *RemoveCurrencyRequest, opts ...grpc.CallOption) (*RemoveCurrencyResponse, error)
	// Removes a trading pair from the list of currently supported trading pair. This call will
	// effectively cancel any standing orders for that trading pair. Peers are informed when a pair
	// is no longer supported so that they will know to stop sending orders for it.
	RemovePair(ctx context.Context, in *RemovePairRequest, opts ...grpc.CallOption) (*RemovePairResponse, error)
	// Begin gracefully shutting down xud.
	Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error)
	// Subscribes to orders being added to the order book. This call, together with SubscribeRemovedOrders,
	// allows the client to maintain an up-to-date view of the order book. For example, an exchange that
	// wants to show its users a real time list of the orders available to them would subscribe to this
	// streaming call to be alerted of new orders as they become available for trading.
	SubscribeAddedOrders(ctx context.Context, in *SubscribeAddedOrdersRequest, opts ...grpc.CallOption) (Xud_SubscribeAddedOrdersClient, error)
	// Subscribes to orders being removed - either in full or in part - from the order book. This call,
	// together with SubscribeAddedOrders, allows the client to maintain an up-to-date view of the order
	// book. For example, an exchange that wants to show its users a real time list of the orders available
	// to them would subscribe to this streaming call to be alerted when part or all of an existing order
	// is no longer available for trading.
	SubscribeRemovedOrders(ctx context.Context, in *SubscribeRemovedOrdersRequest, opts ...grpc.CallOption) (Xud_SubscribeRemovedOrdersClient, error)
	// Subscribes to completed swaps. By default, only swaps that are initiated by a remote peer are
	// transmitted unless a flag is set to include swaps initiated by the local node. This call allows
	// the client to get real-time notifications when its orders are filled by a peer. It can be used
	// for tracking order executions, updating balances, and informing a trader when one of their orders
	// is settled through the Exchange Union network.
	SubscribeSwaps(ctx context.Context, in *SubscribeSwapsRequest, opts ...grpc.CallOption) (Xud_SubscribeSwapsClient, error)
}

type xudClient struct {
	cc *grpc.ClientConn
}

func NewXudClient(cc *grpc.ClientConn) XudClient {
	return &xudClient{cc}
}

func (c *xudClient) AddCurrency(ctx context.Context, in *AddCurrencyRequest, opts ...grpc.CallOption) (*AddCurrencyResponse, error) {
	out := new(AddCurrencyResponse)
	err := c.cc.Invoke(ctx, "/xudrpc.Xud/AddCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xudClient) AddPair(ctx context.Context, in *AddPairRequest, opts ...grpc.CallOption) (*AddPairResponse, error) {
	out := new(AddPairResponse)
	err := c.cc.Invoke(ctx, "/xudrpc.Xud/AddPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xudClient) RemoveOrder(ctx context.Context, in *RemoveOrderRequest, opts ...grpc.CallOption) (*RemoveOrderResponse, error) {
	out := new(RemoveOrderResponse)
	err := c.cc.Invoke(ctx, "/xudrpc.Xud/RemoveOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xudClient) ChannelBalance(ctx context.Context, in *ChannelBalanceRequest, opts ...grpc.CallOption) (*ChannelBalanceResponse, error) {
	out := new(ChannelBalanceResponse)
	err := c.cc.Invoke(ctx, "/xudrpc.Xud/ChannelBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xudClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error) {
	out := new(ConnectResponse)
	err := c.cc.Invoke(ctx, "/xudrpc.Xud/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xudClient) Ban(ctx context.Context, in *BanRequest, opts ...grpc.CallOption) (*BanResponse, error) {
	out := new(BanResponse)
	err := c.cc.Invoke(ctx, "/xudrpc.Xud/Ban", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xudClient) Unban(ctx context.Context, in *UnbanRequest, opts ...grpc.CallOption) (*UnbanResponse, error) {
	out := new(UnbanResponse)
	err := c.cc.Invoke(ctx, "/xudrpc.Xud/Unban", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xudClient) GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error) {
	out := new(GetInfoResponse)
	err := c.cc.Invoke(ctx, "/xudrpc.Xud/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xudClient) GetNodeInfo(ctx context.Context, in *GetNodeInfoRequest, opts ...grpc.CallOption) (*GetNodeInfoResponse, error) {
	out := new(GetNodeInfoResponse)
	err := c.cc.Invoke(ctx, "/xudrpc.Xud/GetNodeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xudClient) ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error) {
	out := new(ListOrdersResponse)
	err := c.cc.Invoke(ctx, "/xudrpc.Xud/ListOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xudClient) ListCurrencies(ctx context.Context, in *ListCurrenciesRequest, opts ...grpc.CallOption) (*ListCurrenciesResponse, error) {
	out := new(ListCurrenciesResponse)
	err := c.cc.Invoke(ctx, "/xudrpc.Xud/ListCurrencies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xudClient) ListPairs(ctx context.Context, in *ListPairsRequest, opts ...grpc.CallOption) (*ListPairsResponse, error) {
	out := new(ListPairsResponse)
	err := c.cc.Invoke(ctx, "/xudrpc.Xud/ListPairs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xudClient) ListPeers(ctx context.Context, in *ListPeersRequest, opts ...grpc.CallOption) (*ListPeersResponse, error) {
	out := new(ListPeersResponse)
	err := c.cc.Invoke(ctx, "/xudrpc.Xud/ListPeers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xudClient) PlaceOrder(ctx context.Context, in *PlaceOrderRequest, opts ...grpc.CallOption) (Xud_PlaceOrderClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Xud_serviceDesc.Streams[0], "/xudrpc.Xud/PlaceOrder", opts...)
	if err != nil {
		return nil, err
	}
	x := &xudPlaceOrderClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Xud_PlaceOrderClient interface {
	Recv() (*PlaceOrderEvent, error)
	grpc.ClientStream
}

type xudPlaceOrderClient struct {
	grpc.ClientStream
}

func (x *xudPlaceOrderClient) Recv() (*PlaceOrderEvent, error) {
	m := new(PlaceOrderEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *xudClient) PlaceOrderSync(ctx context.Context, in *PlaceOrderRequest, opts ...grpc.CallOption) (*PlaceOrderResponse, error) {
	out := new(PlaceOrderResponse)
	err := c.cc.Invoke(ctx, "/xudrpc.Xud/PlaceOrderSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xudClient) ExecuteSwap(ctx context.Context, in *ExecuteSwapRequest, opts ...grpc.CallOption) (*SwapSuccess, error) {
	out := new(SwapSuccess)
	err := c.cc.Invoke(ctx, "/xudrpc.Xud/ExecuteSwap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xudClient) RemoveCurrency(ctx context.Context, in *RemoveCurrencyRequest, opts ...grpc.CallOption) (*RemoveCurrencyResponse, error) {
	out := new(RemoveCurrencyResponse)
	err := c.cc.Invoke(ctx, "/xudrpc.Xud/RemoveCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xudClient) RemovePair(ctx context.Context, in *RemovePairRequest, opts ...grpc.CallOption) (*RemovePairResponse, error) {
	out := new(RemovePairResponse)
	err := c.cc.Invoke(ctx, "/xudrpc.Xud/RemovePair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xudClient) Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error) {
	out := new(ShutdownResponse)
	err := c.cc.Invoke(ctx, "/xudrpc.Xud/Shutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xudClient) SubscribeAddedOrders(ctx context.Context, in *SubscribeAddedOrdersRequest, opts ...grpc.CallOption) (Xud_SubscribeAddedOrdersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Xud_serviceDesc.Streams[1], "/xudrpc.Xud/SubscribeAddedOrders", opts...)
	if err != nil {
		return nil, err
	}
	x := &xudSubscribeAddedOrdersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Xud_SubscribeAddedOrdersClient interface {
	Recv() (*Order, error)
	grpc.ClientStream
}

type xudSubscribeAddedOrdersClient struct {
	grpc.ClientStream
}

func (x *xudSubscribeAddedOrdersClient) Recv() (*Order, error) {
	m := new(Order)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *xudClient) SubscribeRemovedOrders(ctx context.Context, in *SubscribeRemovedOrdersRequest, opts ...grpc.CallOption) (Xud_SubscribeRemovedOrdersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Xud_serviceDesc.Streams[2], "/xudrpc.Xud/SubscribeRemovedOrders", opts...)
	if err != nil {
		return nil, err
	}
	x := &xudSubscribeRemovedOrdersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Xud_SubscribeRemovedOrdersClient interface {
	Recv() (*OrderRemoval, error)
	grpc.ClientStream
}

type xudSubscribeRemovedOrdersClient struct {
	grpc.ClientStream
}

func (x *xudSubscribeRemovedOrdersClient) Recv() (*OrderRemoval, error) {
	m := new(OrderRemoval)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *xudClient) SubscribeSwaps(ctx context.Context, in *SubscribeSwapsRequest, opts ...grpc.CallOption) (Xud_SubscribeSwapsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Xud_serviceDesc.Streams[3], "/xudrpc.Xud/SubscribeSwaps", opts...)
	if err != nil {
		return nil, err
	}
	x := &xudSubscribeSwapsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Xud_SubscribeSwapsClient interface {
	Recv() (*SwapSuccess, error)
	grpc.ClientStream
}

type xudSubscribeSwapsClient struct {
	grpc.ClientStream
}

func (x *xudSubscribeSwapsClient) Recv() (*SwapSuccess, error) {
	m := new(SwapSuccess)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// XudServer is the server API for Xud service.
type XudServer interface {
	// Adds a currency to the list of supported currencies. Once added, the currency may be used for
	// new trading pairs.
	AddCurrency(context.Context, *AddCurrencyRequest) (*AddCurrencyResponse, error)
	// Adds a trading pair to the list of supported trading pairs. The newly supported pair is
	// advertised to peers so they may begin sending orders for it.
	AddPair(context.Context, *AddPairRequest) (*AddPairResponse, error)
	// Removes an order from the order book by its local id. This should be called when an order is
	// canceled or filled outside of xud. Removed orders become immediately unavailable for swaps,
	// and peers are notified that the order is no longer valid. Any portion of the order that is
	// on hold due to ongoing swaps will not be removed until after the swap attempts complete.
	RemoveOrder(context.Context, *RemoveOrderRequest) (*RemoveOrderResponse, error)
	// Gets the total balance available across all payment channels for one or all currencies.
	ChannelBalance(context.Context, *ChannelBalanceRequest) (*ChannelBalanceResponse, error)
	// Attempts to connect to a node. Once connected, the node is added to the list of peers and
	// becomes available for swaps and trading. A handshake exchanges information about the peer's
	// supported trading and swap clients. Orders will be shared with the peer upon connection and
	// upon new order placements.
	Connect(context.Context, *ConnectRequest) (*ConnectResponse, error)
	// Bans a node and immediately disconnects from it. This can be used to prevent any connections
	// to a specific node.
	Ban(context.Context, *BanRequest) (*BanResponse, error)
	// Removes a ban from a node manually and, optionally, attempts to connect to it.
	Unban(context.Context, *UnbanRequest) (*UnbanResponse, error)
	// Gets general information about this node.
	GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error)
	// Gets general information about a node.
	GetNodeInfo(context.Context, *GetNodeInfoRequest) (*GetNodeInfoResponse, error)
	// Gets orders from the order book. This call returns the state of the order book at a given point
	// in time, although it is not guaranteed to still be vaild by the time a response is received
	// and processed by a client. It accepts an optional trading pair id parameter. If specified, only
	// orders for that particular trading pair are returned. Otherwise, all orders are returned. Orders
	// are separated into buys and sells for each trading pair, but unsorted.
	ListOrders(context.Context, *ListOrdersRequest) (*ListOrdersResponse, error)
	// Gets a list of this node's supported currencies.
	ListCurrencies(context.Context, *ListCurrenciesRequest) (*ListCurrenciesResponse, error)
	// Gets a list of this nodes suported trading pairs.
	ListPairs(context.Context, *ListPairsRequest) (*ListPairsResponse, error)
	// Gets a list of connected peers.
	ListPeers(context.Context, *ListPeersRequest) (*ListPeersResponse, error)
	// Adds an order to the order book.
	// If price is zero or unspecified a market order will get added.
	PlaceOrder(*PlaceOrderRequest, Xud_PlaceOrderServer) error
	// The synchronous non-streaming version of PlaceOrder.
	PlaceOrderSync(context.Context, *PlaceOrderRequest) (*PlaceOrderResponse, error)
	// Execute a swap on a maker peer order
	ExecuteSwap(context.Context, *ExecuteSwapRequest) (*SwapSuccess, error)
	// Removes a currency from the list of supported currencies. Only currencies that are not in use
	// for any currently supported trading pairs may be removed. Once removed, the currency can no
	// longer be used for any supported trading pairs.
	RemoveCurrency(context.Context, *RemoveCurrencyRequest) (*RemoveCurrencyResponse, error)
	// Removes a trading pair from the list of currently supported trading pair. This call will
	// effectively cancel any standing orders for that trading pair. Peers are informed when a pair
	// is no longer supported so that they will know to stop sending orders for it.
	RemovePair(context.Context, *RemovePairRequest) (*RemovePairResponse, error)
	// Begin gracefully shutting down xud.
	Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error)
	// Subscribes to orders being added to the order book. This call, together with SubscribeRemovedOrders,
	// allows the client to maintain an up-to-date view of the order book. For example, an exchange that
	// wants to show its users a real time list of the orders available to them would subscribe to this
	// streaming call to be alerted of new orders as they become available for trading.
	SubscribeAddedOrders(*SubscribeAddedOrdersRequest, Xud_SubscribeAddedOrdersServer) error
	// Subscribes to orders being removed - either in full or in part - from the order book. This call,
	// together with SubscribeAddedOrders, allows the client to maintain an up-to-date view of the order
	// book. For example, an exchange that wants to show its users a real time list of the orders available
	// to them would subscribe to this streaming call to be alerted when part or all of an existing order
	// is no longer available for trading.
	SubscribeRemovedOrders(*SubscribeRemovedOrdersRequest, Xud_SubscribeRemovedOrdersServer) error
	// Subscribes to completed swaps. By default, only swaps that are initiated by a remote peer are
	// transmitted unless a flag is set to include swaps initiated by the local node. This call allows
	// the client to get real-time notifications when its orders are filled by a peer. It can be used
	// for tracking order executions, updating balances, and informing a trader when one of their orders
	// is settled through the Exchange Union network.
	SubscribeSwaps(*SubscribeSwapsRequest, Xud_SubscribeSwapsServer) error
}

func RegisterXudServer(s *grpc.Server, srv XudServer) {
	s.RegisterService(&_Xud_serviceDesc, srv)
}

func _Xud_AddCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XudServer).AddCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xudrpc.Xud/AddCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XudServer).AddCurrency(ctx, req.(*AddCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xud_AddPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XudServer).AddPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xudrpc.Xud/AddPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XudServer).AddPair(ctx, req.(*AddPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xud_RemoveOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XudServer).RemoveOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xudrpc.Xud/RemoveOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XudServer).RemoveOrder(ctx, req.(*RemoveOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xud_ChannelBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XudServer).ChannelBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xudrpc.Xud/ChannelBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XudServer).ChannelBalance(ctx, req.(*ChannelBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xud_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XudServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xudrpc.Xud/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XudServer).Connect(ctx, req.(*ConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xud_Ban_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XudServer).Ban(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xudrpc.Xud/Ban",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XudServer).Ban(ctx, req.(*BanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xud_Unban_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XudServer).Unban(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xudrpc.Xud/Unban",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XudServer).Unban(ctx, req.(*UnbanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xud_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XudServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xudrpc.Xud/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XudServer).GetInfo(ctx, req.(*GetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xud_GetNodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XudServer).GetNodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xudrpc.Xud/GetNodeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XudServer).GetNodeInfo(ctx, req.(*GetNodeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xud_ListOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XudServer).ListOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xudrpc.Xud/ListOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XudServer).ListOrders(ctx, req.(*ListOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xud_ListCurrencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCurrenciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XudServer).ListCurrencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xudrpc.Xud/ListCurrencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XudServer).ListCurrencies(ctx, req.(*ListCurrenciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xud_ListPairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPairsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XudServer).ListPairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xudrpc.Xud/ListPairs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XudServer).ListPairs(ctx, req.(*ListPairsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xud_ListPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XudServer).ListPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xudrpc.Xud/ListPeers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XudServer).ListPeers(ctx, req.(*ListPeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xud_PlaceOrder_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PlaceOrderRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(XudServer).PlaceOrder(m, &xudPlaceOrderServer{stream})
}

type Xud_PlaceOrderServer interface {
	Send(*PlaceOrderEvent) error
	grpc.ServerStream
}

type xudPlaceOrderServer struct {
	grpc.ServerStream
}

func (x *xudPlaceOrderServer) Send(m *PlaceOrderEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _Xud_PlaceOrderSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XudServer).PlaceOrderSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xudrpc.Xud/PlaceOrderSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XudServer).PlaceOrderSync(ctx, req.(*PlaceOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xud_ExecuteSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XudServer).ExecuteSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xudrpc.Xud/ExecuteSwap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XudServer).ExecuteSwap(ctx, req.(*ExecuteSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xud_RemoveCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XudServer).RemoveCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xudrpc.Xud/RemoveCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XudServer).RemoveCurrency(ctx, req.(*RemoveCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xud_RemovePair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XudServer).RemovePair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xudrpc.Xud/RemovePair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XudServer).RemovePair(ctx, req.(*RemovePairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xud_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XudServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xudrpc.Xud/Shutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XudServer).Shutdown(ctx, req.(*ShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xud_SubscribeAddedOrders_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeAddedOrdersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(XudServer).SubscribeAddedOrders(m, &xudSubscribeAddedOrdersServer{stream})
}

type Xud_SubscribeAddedOrdersServer interface {
	Send(*Order) error
	grpc.ServerStream
}

type xudSubscribeAddedOrdersServer struct {
	grpc.ServerStream
}

func (x *xudSubscribeAddedOrdersServer) Send(m *Order) error {
	return x.ServerStream.SendMsg(m)
}

func _Xud_SubscribeRemovedOrders_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRemovedOrdersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(XudServer).SubscribeRemovedOrders(m, &xudSubscribeRemovedOrdersServer{stream})
}

type Xud_SubscribeRemovedOrdersServer interface {
	Send(*OrderRemoval) error
	grpc.ServerStream
}

type xudSubscribeRemovedOrdersServer struct {
	grpc.ServerStream
}

func (x *xudSubscribeRemovedOrdersServer) Send(m *OrderRemoval) error {
	return x.ServerStream.SendMsg(m)
}

func _Xud_SubscribeSwaps_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeSwapsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(XudServer).SubscribeSwaps(m, &xudSubscribeSwapsServer{stream})
}

type Xud_SubscribeSwapsServer interface {
	Send(*SwapSuccess) error
	grpc.ServerStream
}

type xudSubscribeSwapsServer struct {
	grpc.ServerStream
}

func (x *xudSubscribeSwapsServer) Send(m *SwapSuccess) error {
	return x.ServerStream.SendMsg(m)
}

var _Xud_serviceDesc = grpc.ServiceDesc{
	ServiceName: "xudrpc.Xud",
	HandlerType: (*XudServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCurrency",
			Handler:    _Xud_AddCurrency_Handler,
		},
		{
			MethodName: "AddPair",
			Handler:    _Xud_AddPair_Handler,
		},
		{
			MethodName: "RemoveOrder",
			Handler:    _Xud_RemoveOrder_Handler,
		},
		{
			MethodName: "ChannelBalance",
			Handler:    _Xud_ChannelBalance_Handler,
		},
		{
			MethodName: "Connect",
			Handler:    _Xud_Connect_Handler,
		},
		{
			MethodName: "Ban",
			Handler:    _Xud_Ban_Handler,
		},
		{
			MethodName: "Unban",
			Handler:    _Xud_Unban_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _Xud_GetInfo_Handler,
		},
		{
			MethodName: "GetNodeInfo",
			Handler:    _Xud_GetNodeInfo_Handler,
		},
		{
			MethodName: "ListOrders",
			Handler:    _Xud_ListOrders_Handler,
		},
		{
			MethodName: "ListCurrencies",
			Handler:    _Xud_ListCurrencies_Handler,
		},
		{
			MethodName: "ListPairs",
			Handler:    _Xud_ListPairs_Handler,
		},
		{
			MethodName: "ListPeers",
			Handler:    _Xud_ListPeers_Handler,
		},
		{
			MethodName: "PlaceOrderSync",
			Handler:    _Xud_PlaceOrderSync_Handler,
		},
		{
			MethodName: "ExecuteSwap",
			Handler:    _Xud_ExecuteSwap_Handler,
		},
		{
			MethodName: "RemoveCurrency",
			Handler:    _Xud_RemoveCurrency_Handler,
		},
		{
			MethodName: "RemovePair",
			Handler:    _Xud_RemovePair_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _Xud_Shutdown_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PlaceOrder",
			Handler:       _Xud_PlaceOrder_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeAddedOrders",
			Handler:       _Xud_SubscribeAddedOrders_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeRemovedOrders",
			Handler:       _Xud_SubscribeRemovedOrders_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeSwaps",
			Handler:       _Xud_SubscribeSwaps_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "xudrpc.proto",
}

func init() { proto.RegisterFile("xudrpc.proto", fileDescriptor_xudrpc_360445fb04f04f0d) }

var fileDescriptor_xudrpc_360445fb04f04f0d = []byte{
	// 2476 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x59, 0xcd, 0x72, 0x1c, 0x49,
	0x11, 0x56, 0xcf, 0x68, 0x34, 0xa3, 0x9c, 0xd1, 0xcc, 0xa8, 0x24, 0xcb, 0xe3, 0x5e, 0xdb, 0x88,
	0x5a, 0xdb, 0x21, 0x8c, 0x57, 0x36, 0x72, 0x10, 0xb6, 0x97, 0x58, 0x02, 0xcb, 0xab, 0xb5, 0xcd,
	0x0a, 0xe3, 0x68, 0xb1, 0xfc, 0xef, 0x76, 0xf4, 0x74, 0x97, 0xad, 0x0e, 0x8f, 0xaa, 0xc7, 0xfd,
	0x23, 0x5b, 0xc1, 0x85, 0x20, 0x38, 0x71, 0xe5, 0x01, 0x20, 0x38, 0x70, 0xe1, 0xbc, 0x8f, 0xc0,
	0x95, 0x0b, 0x17, 0x1e, 0x80, 0x13, 0x77, 0xee, 0x44, 0xfd, 0x75, 0x55, 0x75, 0xf7, 0x28, 0xbc,
	0xc4, 0xde, 0xa6, 0xb2, 0xb2, 0x32, 0xb3, 0xb2, 0x32, 0xbf, 0xcc, 0xce, 0x81, 0xc1, 0xdb, 0x22,
	0x4a, 0xe7, 0xe1, 0xee, 0x3c, 0x4d, 0xf2, 0x04, 0xad, 0x88, 0x95, 0xbb, 0x1e, 0x50, 0x9a, 0xe4,
	0x41, 0x1e, 0x27, 0x34, 0x13, 0x5b, 0xf8, 0x3f, 0x0e, 0xa0, 0x87, 0x51, 0xf4, 0xa8, 0x48, 0x53,
	0x42, 0xc3, 0x33, 0x8f, 0xbc, 0x2e, 0x48, 0x96, 0x23, 0x17, 0x7a, 0xa1, 0x24, 0x4d, 0x9c, 0x6d,
	0x67, 0x67, 0xd5, 0x2b, 0xd7, 0xe8, 0x31, 0xf4, 0xb3, 0x37, 0xc1, 0xdc, 0x0f, 0x67, 0x31, 0xa1,
	0xf9, 0xa4, 0xb5, 0xed, 0xec, 0x0c, 0xf7, 0xae, 0xef, 0x4a, 0x8d, 0x75, 0x61, 0xbb, 0x47, 0x6f,
	0x82, 0xf9, 0x23, 0xce, 0xec, 0x99, 0x27, 0xd1, 0x35, 0x58, 0xcb, 0x93, 0x57, 0x84, 0xfa, 0x41,
	0x14, 0xa5, 0x24, 0xcb, 0x26, 0x6d, 0xae, 0xc9, 0x26, 0xa2, 0x1b, 0x30, 0x8c, 0x48, 0x18, 0x9f,
	0x04, 0x33, 0x7f, 0x3e, 0x0b, 0x42, 0x92, 0x4d, 0x96, 0xb7, 0x9d, 0x9d, 0x35, 0xaf, 0x42, 0xc5,
	0xdf, 0x04, 0xd0, 0x8a, 0x50, 0x17, 0xda, 0x87, 0xcf, 0x3e, 0x1e, 0x2f, 0x21, 0x80, 0x15, 0xef,
	0xe1, 0xd3, 0x8f, 0x0f, 0x9e, 0x8d, 0x1d, 0x7c, 0x01, 0x36, 0x2c, 0xf3, 0xb2, 0x79, 0x42, 0x33,
	0x82, 0xbf, 0x80, 0xe1, 0xc3, 0x28, 0x7a, 0x1e, 0xc4, 0xa9, 0xba, 0xfe, 0x35, 0x58, 0x9b, 0x06,
	0x19, 0xf1, 0x2b, 0x3e, 0xb0, 0x89, 0xcc, 0xb2, 0xd7, 0x45, 0x92, 0x1b, 0x6c, 0x2d, 0xce, 0x56,
	0xa1, 0xe2, 0x75, 0x18, 0x95, 0xf2, 0xa5, 0xca, 0x3b, 0x00, 0xfb, 0x01, 0x55, 0xea, 0x30, 0x0c,
	0x68, 0x12, 0x11, 0x7f, 0x5e, 0x4c, 0xfd, 0x57, 0x44, 0x69, 0xb3, 0x68, 0x78, 0x0d, 0xfa, 0xfc,
	0x84, 0xb6, 0xf9, 0xd1, 0x71, 0x40, 0x29, 0x99, 0xed, 0x07, 0xb3, 0x80, 0x86, 0x04, 0x4d, 0xa0,
	0x3b, 0x15, 0x3f, 0xf9, 0xf9, 0xb6, 0xa7, 0x96, 0x68, 0x0f, 0x36, 0xe7, 0x84, 0x46, 0x31, 0x7d,
	0xe9, 0x27, 0x73, 0x42, 0x7d, 0xc5, 0xd6, 0xe2, 0x6c, 0x8d, 0x7b, 0xf8, 0x2e, 0x5c, 0xb0, 0xe5,
	0xbf, 0x43, 0x64, 0xe0, 0x2f, 0x1d, 0xd8, 0xaa, 0x9e, 0x12, 0xf6, 0xa2, 0x4f, 0xa0, 0x27, 0x45,
	0x67, 0x13, 0x67, 0xbb, 0xbd, 0xd3, 0xdf, 0xbb, 0xa5, 0x22, 0xa6, 0xf9, 0xc4, 0xae, 0x5c, 0x67,
	0x07, 0x34, 0x4f, 0xcf, 0xbc, 0x95, 0x24, 0x8d, 0x48, 0x9a, 0xb9, 0x47, 0xb0, 0x66, 0x6d, 0xa0,
	0x31, 0xb4, 0xb5, 0xcb, 0xd8, 0x4f, 0x74, 0x0b, 0x3a, 0xa7, 0xc1, 0xac, 0x10, 0xf7, 0xeb, 0xef,
	0x6d, 0x2d, 0xd0, 0x23, 0x98, 0x3e, 0x6c, 0xdd, 0x77, 0xf0, 0x2d, 0x18, 0x3e, 0x4a, 0x28, 0x25,
	0x61, 0x6e, 0xdc, 0x92, 0x7b, 0xbf, 0x48, 0x63, 0x75, 0x4b, 0xb5, 0x66, 0xcf, 0x59, 0x72, 0xcb,
	0xd7, 0xf8, 0x83, 0x03, 0xe8, 0xe0, 0x2d, 0x09, 0x8b, 0x9c, 0xb0, 0x18, 0x34, 0xa4, 0x70, 0xb3,
	0xfd, 0x38, 0x52, 0x52, 0xd4, 0x9a, 0x3d, 0xd7, 0x3c, 0x88, 0xf9, 0x96, 0x88, 0x1a, 0xb5, 0x64,
	0xd1, 0x30, 0x27, 0x24, 0x2d, 0xa3, 0x41, 0x64, 0x85, 0x45, 0x63, 0x92, 0x5f, 0x17, 0x01, 0xcd,
	0xe3, 0xfc, 0x8c, 0xa7, 0x83, 0xe3, 0x95, 0x6b, 0xfc, 0x37, 0x07, 0xfa, 0xcc, 0x8a, 0x4f, 0x82,
	0x78, 0x56, 0xa4, 0xe4, 0xff, 0xb4, 0xc2, 0xd4, 0xd0, 0xb6, 0x35, 0xd4, 0x2c, 0x5c, 0x6e, 0xb0,
	0xf0, 0x06, 0x0c, 0x5f, 0x08, 0x03, 0xfc, 0x94, 0x04, 0x59, 0x42, 0x27, 0x1d, 0x91, 0x1c, 0x36,
	0x15, 0x8f, 0x61, 0xf8, 0x98, 0xe4, 0x4f, 0xe9, 0x8b, 0x44, 0x7a, 0x0d, 0xff, 0xb7, 0x05, 0xa3,
	0x92, 0x24, 0xc3, 0x67, 0x02, 0xdd, 0x53, 0x92, 0x66, 0x71, 0x42, 0xe5, 0x15, 0xd4, 0xb2, 0x96,
	0x3b, 0xad, 0x7a, 0xee, 0x20, 0x04, 0xcb, 0x45, 0x1a, 0x33, 0x7c, 0x69, 0xef, 0xac, 0x7a, 0xfc,
	0x37, 0xba, 0x0c, 0xab, 0xb4, 0x38, 0xf1, 0x99, 0xcd, 0x02, 0x51, 0x3a, 0x9e, 0x26, 0x94, 0xbb,
	0x41, 0x9c, 0x66, 0xdc, 0x70, 0xb5, 0xcb, 0x08, 0xe8, 0xdb, 0x20, 0xc3, 0x71, 0xb2, 0xc2, 0x43,
	0x6c, 0x43, 0x85, 0xd8, 0x8f, 0x39, 0xf5, 0x51, 0x52, 0xd0, 0x5c, 0x45, 0x2c, 0xda, 0x83, 0xf6,
	0x8c, 0x46, 0x93, 0x2e, 0x0f, 0xfa, 0x6d, 0xc5, 0x59, 0xb9, 0xe0, 0xee, 0x21, 0x8d, 0x44, 0xa0,
	0x33, 0x66, 0x74, 0x13, 0x56, 0xd2, 0x20, 0x8e, 0x08, 0x9d, 0xf4, 0xb8, 0x02, 0xa4, 0x8e, 0x79,
	0x9c, 0xca, 0x4f, 0x4a, 0x0e, 0xf7, 0x31, 0xf4, 0xd4, 0xe1, 0x86, 0x64, 0xb8, 0x6e, 0x27, 0xc3,
	0x48, 0x09, 0x3a, 0xa4, 0x11, 0x97, 0x62, 0x64, 0xc1, 0x7d, 0x40, 0x8f, 0x49, 0xfe, 0x2c, 0x89,
	0x88, 0xf1, 0x1a, 0xef, 0x84, 0x4d, 0x1e, 0x6c, 0x58, 0x27, 0xe5, 0xa3, 0xbd, 0x0f, 0xa3, 0x94,
	0xcc, 0x0b, 0x51, 0x70, 0x8e, 0xc2, 0x24, 0x15, 0xc8, 0xd4, 0xf1, 0x40, 0x93, 0xd1, 0x16, 0xac,
	0x4c, 0x59, 0x5e, 0x8a, 0x00, 0xec, 0x79, 0x72, 0x85, 0x3f, 0x87, 0xf5, 0xc3, 0x38, 0xcb, 0x85,
	0x47, 0x95, 0x31, 0x46, 0xb8, 0x3a, 0x76, 0xb8, 0xee, 0x02, 0x8a, 0x69, 0x38, 0x2b, 0x22, 0xe2,
	0x27, 0x6f, 0xa8, 0x2f, 0x9f, 0x47, 0x88, 0x6c, 0xd8, 0xc1, 0x7f, 0x72, 0x00, 0x99, 0xf2, 0xa5,
	0xc9, 0xdf, 0x2f, 0x5f, 0x56, 0x80, 0xd4, 0x8d, 0xd2, 0x5f, 0x35, 0x5e, 0xf9, 0xd8, 0x36, 0x3c,
	0x3d, 0x85, 0xbe, 0x41, 0x6e, 0x78, 0x8f, 0x6b, 0xf6, 0x7b, 0x0c, 0xed, 0xc8, 0x31, 0x9f, 0xe3,
	0x22, 0x5c, 0x60, 0x4a, 0x65, 0xb5, 0x8a, 0x89, 0x72, 0x02, 0xbe, 0x0f, 0x5b, 0xd5, 0x0d, 0x69,
	0xfd, 0x55, 0x80, 0xb0, 0xa4, 0xf2, 0x1b, 0xac, 0x7a, 0x06, 0x05, 0x23, 0x18, 0xb3, 0x93, 0xac,
	0x12, 0x95, 0xd2, 0xbe, 0x25, 0xfc, 0x2c, 0x69, 0x52, 0xd0, 0x26, 0x74, 0x44, 0xe8, 0x0b, 0x19,
	0x62, 0x51, 0x1e, 0x27, 0xfa, 0x45, 0xf0, 0x3d, 0x79, 0x9c, 0x98, 0x5e, 0xc4, 0xd0, 0x11, 0x79,
	0x25, 0x9c, 0x38, 0x50, 0x97, 0x64, 0x5c, 0x9e, 0xd8, 0xc2, 0xbf, 0x82, 0xfe, 0x21, 0x8d, 0x24,
	0x26, 0x67, 0x2c, 0x0c, 0x82, 0x30, 0x8f, 0x4f, 0x55, 0x88, 0xc8, 0x15, 0x83, 0xa1, 0x98, 0xca,
	0x9d, 0x16, 0xdf, 0x29, 0xd7, 0x3c, 0x1a, 0x44, 0xed, 0xe2, 0x08, 0xd5, 0xf1, 0xd4, 0x12, 0xff,
	0xc3, 0x81, 0xae, 0x8c, 0x70, 0x76, 0x17, 0x92, 0xa6, 0x49, 0x2a, 0x5f, 0x41, 0x2c, 0xd0, 0x6d,
	0xe8, 0x85, 0x52, 0xb7, 0x7c, 0x8a, 0x0d, 0x23, 0x35, 0x94, 0x59, 0x5e, 0xc9, 0xc4, 0x0c, 0x0c,
	0x8f, 0x83, 0x98, 0x2a, 0x14, 0x91, 0x2b, 0xb4, 0x0d, 0xfd, 0xe9, 0x2c, 0x09, 0x5f, 0x1d, 0x93,
	0xf8, 0xe5, 0x71, 0x2e, 0x91, 0xc4, 0x24, 0x95, 0xe8, 0xd3, 0x31, 0xd0, 0xc7, 0xc0, 0xb3, 0x15,
	0x1b, 0xcf, 0x36, 0xa1, 0x13, 0xcc, 0xe2, 0x20, 0x9b, 0x74, 0x85, 0xb9, 0x7c, 0x81, 0xbf, 0x6c,
	0x41, 0x87, 0x87, 0x08, 0x7f, 0x9a, 0x34, 0x96, 0x45, 0xde, 0xf1, 0xc4, 0xc2, 0x42, 0xeb, 0x56,
	0x05, 0xad, 0x8d, 0xa4, 0x69, 0xdb, 0x49, 0x33, 0x84, 0x56, 0x1c, 0x49, 0xf4, 0x6e, 0xc5, 0x11,
	0xba, 0x56, 0xc1, 0x75, 0x8e, 0xd8, 0x4f, 0x96, 0x2a, 0xc8, 0x7e, 0x19, 0x7a, 0xb3, 0x24, 0x0c,
	0x66, 0x4c, 0xe0, 0x8a, 0xe4, 0x28, 0x29, 0x3c, 0x06, 0x53, 0x12, 0xe4, 0x24, 0xf2, 0x83, 0x9c,
	0x5f, 0xa2, 0xed, 0x19, 0x14, 0x74, 0x1d, 0x96, 0xb3, 0x38, 0x22, 0x1c, 0xd8, 0x86, 0x7b, 0xeb,
	0x56, 0xfc, 0x1f, 0xc5, 0x11, 0xf1, 0xf8, 0x36, 0x83, 0x9d, 0x38, 0xd3, 0x09, 0x3b, 0x59, 0xe5,
	0x99, 0x6c, 0xd1, 0x98, 0x63, 0x8f, 0x93, 0x59, 0x34, 0x01, 0x7e, 0x61, 0xfe, 0x7b, 0x7f, 0x0d,
	0xfa, 0x82, 0x81, 0x03, 0x39, 0xfe, 0xb3, 0x03, 0x03, 0x2e, 0xda, 0x23, 0x27, 0xc9, 0x69, 0x30,
	0xb3, 0x1c, 0xe5, 0x2c, 0x76, 0x54, 0xbd, 0x18, 0x96, 0x25, 0xb4, 0x5d, 0x29, 0xa1, 0xae, 0xe1,
	0x0e, 0xe1, 0x4a, 0xed, 0x8c, 0xea, 0x2d, 0x3a, 0xf5, 0x5b, 0xe0, 0x63, 0x58, 0x11, 0xc9, 0x8f,
	0x3e, 0x00, 0x98, 0x16, 0x67, 0xbe, 0x05, 0x40, 0x6b, 0x96, 0x83, 0x3c, 0x83, 0x01, 0xdd, 0x86,
	0x7e, 0x46, 0x66, 0x33, 0x8d, 0x75, 0x0d, 0xfc, 0x26, 0x07, 0xbe, 0xab, 0xc0, 0x89, 0x17, 0x28,
	0xe6, 0x3e, 0xe6, 0x23, 0x99, 0x70, 0xfc, 0x37, 0x03, 0xac, 0xe4, 0x0d, 0x95, 0x99, 0xc6, 0x7e,
	0xe2, 0xbf, 0xb7, 0x60, 0x99, 0xe5, 0x2d, 0xf3, 0x8e, 0xea, 0xd3, 0x25, 0xf6, 0xaa, 0x0e, 0xfd,
	0x5d, 0x4a, 0xf0, 0x0f, 0x60, 0x30, 0xa3, 0x91, 0x5a, 0x8a, 0x24, 0xea, 0xef, 0x5d, 0x36, 0x91,
	0x81, 0x25, 0xde, 0xf3, 0x62, 0xfa, 0x29, 0x39, 0x93, 0xa0, 0x6a, 0x9d, 0x60, 0xfa, 0x63, 0x3a,
	0x4d, 0x0a, 0x2a, 0xdc, 0xdc, 0xf3, 0xd4, 0x52, 0xa3, 0x55, 0xc7, 0x40, 0x2b, 0x96, 0x98, 0x6f,
	0x8b, 0xc8, 0xb7, 0xd3, 0xcc, 0x24, 0xa1, 0x5b, 0xb0, 0x9e, 0x91, 0x30, 0xa1, 0x51, 0xe6, 0x87,
	0xa2, 0xa1, 0x23, 0x11, 0x8f, 0xd8, 0x8e, 0x57, 0xdf, 0x70, 0x3f, 0x82, 0x51, 0xc5, 0xc0, 0x06,
	0x78, 0xdf, 0x34, 0xe1, 0x7d, 0xd5, 0x84, 0xf3, 0xbf, 0x38, 0xb0, 0xfe, 0x9c, 0x7d, 0xa9, 0xc8,
	0x70, 0x14, 0x05, 0xed, 0xeb, 0xcc, 0x66, 0x33, 0x48, 0x97, 0x2b, 0x41, 0xaa, 0xb2, 0xae, 0x73,
	0x6e, 0xd6, 0xe1, 0xdf, 0xb6, 0x00, 0x99, 0x46, 0x4a, 0x3c, 0x7f, 0x00, 0xe3, 0x98, 0xe6, 0x24,
	0xa5, 0xc1, 0xcc, 0x3f, 0x09, 0xf2, 0xf0, 0x98, 0x2c, 0x08, 0xcf, 0x1a, 0x1b, 0xfa, 0x1e, 0x0c,
	0xf9, 0x27, 0x5f, 0x56, 0x84, 0x21, 0xc9, 0x32, 0xa2, 0xe2, 0xb4, 0x44, 0x5b, 0xd6, 0xa9, 0x1e,
	0x89, 0x4d, 0xaf, 0xc2, 0x8a, 0xee, 0xb1, 0x06, 0xe2, 0x24, 0x88, 0x29, 0xff, 0x3c, 0xe1, 0x19,
	0xd4, 0xe6, 0x58, 0x5d, 0x51, 0x5b, 0xe5, 0x42, 0x0f, 0x60, 0x8d, 0x8b, 0x92, 0xbd, 0x26, 0x6b,
	0xf0, 0x6a, 0x4a, 0x65, 0x7b, 0xec, 0xd9, 0x9c, 0xf8, 0xf7, 0x2d, 0x18, 0x69, 0x17, 0x1c, 0x9c,
	0xb2, 0x8f, 0xc9, 0x7b, 0x30, 0xb4, 0x2f, 0xc6, 0x9f, 0xab, 0x6a, 0xc6, 0x93, 0x25, 0xaf, 0xc2,
	0x86, 0x1e, 0xc0, 0xc0, 0xbc, 0x52, 0xb5, 0xd2, 0x18, 0x77, 0x67, 0x28, 0x6b, 0xb2, 0xa2, 0x07,
	0xef, 0x76, 0xf7, 0x27, 0x4b, 0x4d, 0xb7, 0x1f, 0x98, 0x77, 0xe2, 0xc1, 0xd0, 0x7c, 0xf9, 0x52,
	0xab, 0x64, 0xdd, 0xef, 0x42, 0x87, 0xb0, 0x2b, 0xe3, 0x14, 0x40, 0xf7, 0x9a, 0x0b, 0x6a, 0xa8,
	0x81, 0x08, 0x2d, 0x1b, 0x11, 0x5c, 0xa3, 0xba, 0x8a, 0xd2, 0xac, 0x0b, 0xa9, 0x51, 0xfa, 0x96,
	0xad, 0xd2, 0xc7, 0xbe, 0x39, 0x39, 0x4c, 0x93, 0xaf, 0x30, 0x8d, 0xc0, 0x13, 0xd8, 0xaa, 0x1e,
	0x92, 0x1f, 0x65, 0x87, 0x80, 0xc4, 0x8e, 0x95, 0x71, 0xe7, 0x7d, 0x0d, 0x9d, 0x93, 0x77, 0xf8,
	0xbb, 0xb0, 0x61, 0x49, 0x2b, 0x5b, 0xae, 0xb1, 0x62, 0xf1, 0x13, 0xea, 0xf3, 0x7a, 0xe4, 0xe8,
	0x7a, 0x84, 0x3f, 0x80, 0x75, 0x71, 0xcc, 0x1c, 0x2f, 0x2c, 0x6c, 0x63, 0xf1, 0xa6, 0xb2, 0xd9,
	0x9a, 0x16, 0xac, 0xc3, 0xe8, 0xe8, 0xb8, 0xc8, 0xa3, 0xe4, 0x8d, 0x1a, 0x19, 0xb0, 0x5e, 0x4c,
	0x93, 0x24, 0xdb, 0x03, 0x78, 0xef, 0xa8, 0x98, 0x66, 0x61, 0x1a, 0x4f, 0xc9, 0xc3, 0x28, 0x22,
	0x91, 0xdd, 0x3c, 0xbb, 0xd0, 0x23, 0x6f, 0xe3, 0x2c, 0x67, 0xfd, 0x92, 0xc3, 0x11, 0xb4, 0x5c,
	0xe3, 0x6f, 0xc0, 0x95, 0xf2, 0xa8, 0x30, 0xc0, 0x3e, 0x8c, 0x3f, 0x82, 0x0b, 0x25, 0x03, 0x0b,
	0xa0, 0xcc, 0x18, 0x95, 0xa8, 0xf6, 0x3a, 0x0f, 0x5e, 0xc9, 0x72, 0xd2, 0xf3, 0x6c, 0x22, 0xfe,
	0x57, 0x5b, 0x7c, 0x93, 0xca, 0x68, 0x47, 0x97, 0x6a, 0xaf, 0xd0, 0xe5, 0xeb, 0xa7, 0x76, 0x3d,
	0x6d, 0x55, 0xea, 0xe9, 0xb9, 0xe0, 0xb7, 0xe8, 0x83, 0x98, 0xb5, 0x6e, 0xa9, 0x7f, 0x1c, 0x64,
	0xc7, 0xf2, 0x13, 0x54, 0xae, 0xd0, 0x0e, 0x8c, 0x82, 0x13, 0x56, 0x0a, 0xfd, 0x94, 0x84, 0x24,
	0x3e, 0x25, 0x11, 0xef, 0x4a, 0xda, 0x5e, 0x95, 0xcc, 0x6a, 0x89, 0x24, 0x65, 0x84, 0xe6, 0xbc,
	0x19, 0x69, 0x7b, 0x26, 0xa9, 0xf6, 0x49, 0x0c, 0x0d, 0x9f, 0xc4, 0xb7, 0x60, 0x39, 0x4d, 0x66,
	0x64, 0xd2, 0xe7, 0x20, 0x3c, 0x69, 0x40, 0x81, 0x5d, 0x2f, 0x99, 0x11, 0x8f, 0x73, 0xb1, 0xea,
	0xa4, 0x82, 0x5c, 0xdb, 0x37, 0xe0, 0x62, 0xeb, 0x1b, 0xec, 0x19, 0x4a, 0x22, 0xb7, 0x71, 0x4d,
	0x4c, 0xac, 0x2c, 0x22, 0x6b, 0xce, 0x52, 0x7f, 0x9e, 0x92, 0xf8, 0x24, 0x78, 0x49, 0x26, 0x43,
	0xce, 0x62, 0x50, 0x74, 0x39, 0x1a, 0x19, 0xe5, 0x08, 0x5f, 0x86, 0x65, 0x66, 0x17, 0x5a, 0x85,
	0xce, 0x4f, 0x1e, 0x7e, 0x7a, 0xe0, 0x8d, 0x97, 0xd8, 0xcf, 0x1f, 0xf1, 0x9f, 0x0e, 0x7e, 0x0e,
	0x83, 0xcf, 0xe8, 0xf4, 0x2b, 0x0d, 0xb3, 0xd8, 0xe7, 0x75, 0x4a, 0x64, 0x69, 0x95, 0x1f, 0x69,
	0x9a, 0x80, 0x47, 0xb0, 0x26, 0x25, 0x8a, 0xc0, 0xbe, 0x79, 0x15, 0x56, 0xcb, 0x4a, 0x85, 0xba,
	0xd0, 0xde, 0xff, 0xec, 0x17, 0xe3, 0x25, 0xd4, 0x83, 0xe5, 0xa3, 0x83, 0xc3, 0xc3, 0xb1, 0xb3,
	0xf7, 0xd7, 0x31, 0xb4, 0x7f, 0x5e, 0x44, 0x68, 0x0a, 0x7d, 0x63, 0xbe, 0x87, 0xdc, 0xc5, 0x33,
	0x49, 0xf7, 0xbd, 0xc6, 0x3d, 0x99, 0x48, 0xee, 0xef, 0xfe, 0xf9, 0xef, 0x3f, 0xb6, 0x36, 0xf1,
	0xe8, 0xf6, 0xe9, 0x77, 0x6e, 0x07, 0x51, 0xa4, 0x9c, 0xf8, 0xa1, 0x73, 0x13, 0x79, 0xd0, 0x95,
	0xc3, 0x3c, 0xb4, 0x65, 0xc8, 0x30, 0xd2, 0xdb, 0xbd, 0x58, 0xa3, 0x4b, 0xb9, 0x5b, 0x5c, 0xee,
	0x18, 0xf7, 0xa5, 0x5c, 0x16, 0xbc, 0x4c, 0xe6, 0x14, 0xfa, 0x06, 0xb6, 0x68, 0xbb, 0xeb, 0xf0,
	0xa5, 0xed, 0x6e, 0x00, 0x23, 0xdb, 0xee, 0x94, 0x33, 0xf0, 0xac, 0x62, 0x3a, 0x5e, 0xd5, 0x06,
	0x86, 0x57, 0x16, 0x0d, 0xe0, 0x84, 0xa6, 0xab, 0xe7, 0xcf, 0xe7, 0x94, 0x32, 0x84, 0x98, 0x32,
	0x89, 0xee, 0x6a, 0xe2, 0xe8, 0x41, 0x57, 0x8e, 0xc8, 0xb4, 0x93, 0xec, 0x09, 0x9b, 0x76, 0x52,
	0x75, 0x96, 0x66, 0x39, 0x49, 0x86, 0x04, 0xbb, 0xc0, 0x3e, 0xb4, 0xf7, 0x03, 0x8a, 0xca, 0x51,
	0x88, 0x9e, 0x9f, 0xba, 0x1b, 0x16, 0x4d, 0xca, 0x41, 0x5c, 0xce, 0x00, 0x77, 0x99, 0x9c, 0x69,
	0x40, 0x99, 0x8c, 0x1f, 0x42, 0x87, 0x47, 0x16, 0xda, 0x54, 0x27, 0xcc, 0xd0, 0x75, 0x2f, 0x54,
	0xa8, 0x52, 0xd2, 0x26, 0x97, 0x34, 0xc4, 0xab, 0x4c, 0x52, 0x41, 0xa5, 0xac, 0x43, 0xe8, 0xca,
	0x21, 0x8e, 0xbe, 0xa3, 0x3d, 0xc9, 0xd2, 0x77, 0xac, 0x4c, 0x7b, 0xf0, 0x98, 0x4b, 0x04, 0xd4,
	0x63, 0x12, 0x63, 0x26, 0xe2, 0xd7, 0xd0, 0x37, 0x46, 0x28, 0x3a, 0x04, 0xea, 0x13, 0x19, 0x1d,
	0x02, 0x0d, 0x33, 0x17, 0x65, 0x2b, 0x1a, 0x30, 0xc9, 0x2c, 0xe7, 0xb8, 0xf4, 0x9f, 0x01, 0xe8,
	0x01, 0x06, 0xba, 0xd4, 0x34, 0xd4, 0x10, 0xb2, 0xdd, 0xc5, 0xf3, 0x0e, 0xe5, 0x50, 0x04, 0x4c,
	0xb4, 0xfc, 0x06, 0x79, 0x09, 0x43, 0x7b, 0x16, 0xa1, 0xa3, 0xaa, 0x71, 0x78, 0xa1, 0xa3, 0xaa,
	0x79, 0x84, 0xa1, 0x5e, 0x1f, 0x0d, 0xf9, 0xeb, 0x6b, 0xb1, 0x47, 0xb0, 0x5a, 0x8e, 0x29, 0xd0,
	0xc4, 0x14, 0x62, 0x4e, 0x33, 0xdc, 0x4b, 0x0d, 0x3b, 0xaa, 0x88, 0x72, 0xc9, 0x7d, 0xc4, 0x5f,
	0x51, 0x7c, 0x22, 0x28, 0xa1, 0x7c, 0xe4, 0x67, 0x0b, 0x35, 0x66, 0x1c, 0x15, 0xa1, 0xe6, 0xa4,
	0xa3, 0x22, 0x94, 0xcb, 0xf9, 0x1c, 0x40, 0xf7, 0x8f, 0xda, 0xd7, 0xb5, 0xde, 0x5f, 0x47, 0x47,
	0xa5, 0xdd, 0xc4, 0x97, 0xb8, 0xd0, 0x0d, 0xcc, 0x7d, 0xc0, 0xff, 0xdd, 0x50, 0x59, 0x7c, 0xc7,
	0x41, 0x2f, 0x60, 0xa8, 0xf9, 0x8f, 0xce, 0x68, 0x78, 0x9e, 0x0a, 0xb7, 0x69, 0x4b, 0x9a, 0x7e,
	0x85, 0x6b, 0xb9, 0x88, 0x91, 0xad, 0x25, 0x3b, 0xa3, 0x21, 0x0b, 0xef, 0x5f, 0x42, 0xdf, 0x98,
	0x68, 0xeb, 0x80, 0xac, 0x8f, 0xb9, 0xdd, 0xa6, 0x7e, 0xd6, 0xc6, 0x22, 0x22, 0x0e, 0xb1, 0x56,
	0x93, 0xc9, 0xa6, 0x30, 0xb4, 0x7b, 0x36, 0x1d, 0x35, 0x8d, 0x0d, 0xa0, 0x8e, 0x9a, 0x05, 0xad,
	0x9e, 0x75, 0x17, 0x01, 0x7c, 0x26, 0x66, 0x7f, 0x01, 0xa0, 0xbb, 0x2a, 0xed, 0xaf, 0x5a, 0x63,
	0xe6, 0xba, 0x4d, 0x5b, 0x52, 0x87, 0xf5, 0x2a, 0x42, 0x87, 0xc2, 0xef, 0x9f, 0x42, 0x4f, 0x35,
	0x63, 0xa8, 0x7c, 0xd5, 0x4a, 0xc7, 0xe6, 0x4e, 0xea, 0x1b, 0x52, 0xf2, 0x45, 0x2e, 0x79, 0x1d,
	0xf3, 0x9c, 0xcd, 0xe4, 0xae, 0xf0, 0xd3, 0x66, 0x53, 0x43, 0x87, 0xde, 0x2f, 0x45, 0x2d, 0x6e,
	0xf7, 0x5c, 0xfb, 0x3b, 0x01, 0x6f, 0x73, 0x25, 0x2e, 0x9a, 0x70, 0x25, 0xea, 0x5c, 0xc0, 0xce,
	0x89, 0x77, 0xbf, 0xe3, 0xa0, 0xdf, 0xc0, 0x56, 0x73, 0x17, 0x88, 0xae, 0xd7, 0x34, 0x36, 0x75,
	0x89, 0xee, 0xa6, 0xfd, 0x5d, 0x26, 0x66, 0x2e, 0x18, 0x73, 0xd5, 0x97, 0x91, 0x6b, 0xa9, 0x16,
	0x2e, 0xd4, 0xca, 0xa7, 0x30, 0xb4, 0x3b, 0x4c, 0x1d, 0x14, 0x8d, 0x9d, 0xe7, 0xb9, 0x61, 0x27,
	0xaa, 0x52, 0xa9, 0x8b, 0x05, 0x5e, 0x76, 0xc7, 0x99, 0xae, 0xf0, 0x3f, 0x3d, 0xef, 0xfe, 0x2f,
	0x00, 0x00, 0xff, 0xff, 0xa3, 0x15, 0x4f, 0xe0, 0x1f, 0x1d, 0x00, 0x00,
}
