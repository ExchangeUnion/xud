// Copyright 2018 The Exchange Union Developers

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

import "annotations.proto";

package xudrpc;

service Xud {
  /* Adds a currency to the list of supported currencies. Once added, the currency may be used for
   * new trading pairs. */
  rpc AddCurrency(AddCurrencyRequest) returns (AddCurrencyResponse) {
    option (google.api.http) = {
      post: "/v1/addcurrency"
      body: "*"
    };
  }

  /* Adds a trading pair to the list of supported trading pairs. The newly supported pair is
   * advertised to peers so they may begin sending orders for it. */
  rpc AddPair(AddPairRequest) returns (AddPairResponse) {
    option (google.api.http) = {
      post: "/v1/addpair"
      body: "*"
    };
  }

  /* Removes an order from the order book by its local id. This should be called when an order is
   * canceled or filled outside of xud. Removed orders become immediately unavailable for swaps,
   * and peers are notified that the order is no longer valid. Any portion of the order that is
   * on hold due to ongoing swaps will not be removed until after the swap attempts complete. */
  rpc RemoveOrder(RemoveOrderRequest) returns (RemoveOrderResponse) {
    option (google.api.http) = {
      post: "/v1/removeorder"
      body: "*"
    };
  }

  /* Gets the total balance available across all payment channels for one or all currencies. */
  rpc ChannelBalance(ChannelBalanceRequest) returns (ChannelBalanceResponse) {
    option (google.api.http) = {
      get: "/v1/channelbalance"
    };
  }

  /* Attempts to connect to a node. Once connected, the node is added to the list of peers and
   * becomes available for swaps and trading. A handshake exchanges information about the peer's
   * supported trading and swap clients. Orders will be shared with the peer upon connection and
   * upon new order placements.*/
  rpc Connect(ConnectRequest) returns (ConnectResponse) {
    option (google.api.http) = {
      post: "/v1/connect"
      body: "*"
    };
  }

  /* Bans a node and immediately disconnects from it. This can be used to prevent any connections
   * to a specific node.*/
  rpc Ban(BanRequest) returns (BanResponse) {
    option (google.api.http) = {
      post: "/v1/ban"
      body: "*"
    };
  }

  /* Removes a ban from a node manually and, optionally, attempts to connect to it. */
  rpc Unban(UnbanRequest) returns (UnbanResponse) {
    option (google.api.http) = {
      post: "/v1/unban"
      body: "*"
    };
  }

  /* Gets general information about this node. */
  rpc GetInfo(GetInfoRequest) returns (GetInfoResponse) {
    option (google.api.http) = {
      get: "/v1/info"
    };
  }

  /* Gets general information about a node. */
  rpc GetNodeInfo(GetNodeInfoRequest) returns (GetNodeInfoResponse) {
    option (google.api.http) = {
      get: "/v1/nodeinfo"
    };
  }
  /* Gets orders from the order book. This call returns the state of the order book at a given point
   * in time, although it is not guaranteed to still be vaild by the time a response is received
   * and processed by a client. It accepts an optional trading pair id parameter. If specified, only
   * orders for that particular trading pair are returned. Otherwise, all orders are returned. Orders
   * are separated into buys and sells for each trading pair, but unsorted. */
  rpc ListOrders(ListOrdersRequest) returns (ListOrdersResponse) {
    option (google.api.http) = {
      get: "/v1/orders"
    };
  }

  /* Gets a list of this node's supported currencies. */
  rpc ListCurrencies(ListCurrenciesRequest) returns (ListCurrenciesResponse) {
    option (google.api.http) = {
      get: "/v1/currencies"
    };
  }

  /* Gets a list of this nodes suported trading pairs. */
  rpc ListPairs(ListPairsRequest) returns (ListPairsResponse) {
    option (google.api.http) = {
      get: "/v1/pairs"
    };
  }

  /* Gets a list of connected peers. */
  rpc ListPeers(ListPeersRequest) returns (ListPeersResponse) {
    option (google.api.http) = {
      get: "/v1/peers"
    };
  }

  /* Adds an order to the order book.
   * If price is zero or unspecified a market order will get added. */
  rpc PlaceOrder(PlaceOrderRequest) returns (stream PlaceOrderEvent) {
    option (google.api.http) = {
      post: "/v1/placeorder"
      body: "*"
    };
  }

  /* The synchronous non-streaming version of PlaceOrder. */
  rpc PlaceOrderSync(PlaceOrderRequest) returns (PlaceOrderResponse) {
    option (google.api.http) = {
      post: "/v1/placeordersync"
      body: "*"
    };
  }


  /* Execute a swap on a maker peer order */
  rpc ExecuteSwap(ExecuteSwapRequest) returns (SwapSuccess) {
    option (google.api.http) = {
      post: "/v1/executeswap"
      body: "*"
    };
  }

  /* Removes a currency from the list of supported currencies. Only currencies that are not in use
   * for any currently supported trading pairs may be removed. Once removed, the currency can no
   * longer be used for any supported trading pairs. */
  rpc RemoveCurrency(RemoveCurrencyRequest) returns (RemoveCurrencyResponse) {
    option (google.api.http) = {
      post: "/v1/removecurrency"
      body: "*"
    };
  }

  /* Removes a trading pair from the list of currently supported trading pair. This call will
   * effectively cancel any standing orders for that trading pair. Peers are informed when a pair
   * is no longer supported so that they will know to stop sending orders for it. */
  rpc RemovePair(RemovePairRequest) returns (RemovePairResponse) {
    option (google.api.http) = {
      post: "/v1/removepair"
      body: "*"
    };
  }

  /* Begin gracefully shutting down xud. */
  rpc Shutdown(ShutdownRequest) returns (ShutdownResponse) {
    option (google.api.http) = {
      post: "/v1/shutdown"
      body: "*"
    };
  }

  /* Subscribes to orders being added to and removed from the order book. This call allows the client
   * to maintain an up-to-date view of the order book. For example, an exchange that wants to show
   * its users a real time view of the orders available to them would subscribe to this streaming
   * call to be alerted as new orders are added and expired orders are removed. */
  rpc SubscribeOrders(SubscribeOrdersRequest) returns (stream OrderUpdate) {
    option (google.api.http) = {
      get: "/v1/subscribeorders"
    };
  }

  /* Subscribes to completed swaps. By default, only swaps that are initiated by a remote peer are
   * transmitted unless a flag is set to include swaps initiated by the local node. This call allows
   * the client to get real-time notifications when its orders are filled by a peer. It can be used
   * for tracking order executions, updating balances, and informing a trader when one of their orders
   * is settled through the Exchange Union network. */
  rpc SubscribeSwaps(SubscribeSwapsRequest) returns (stream SwapSuccess) {
    option (google.api.http) = {
      get: "/v1/subscribeswaps"
    };
  }

  /* Subscribes to failed swaps. By default, only swaps that are initiated by a remote peer are
   * transmitted unless a flag is set to include swaps initiated by the local node. This call allows
   * the client to get real-time notifications when swap attempts are failing. It can be used for
   * status monitoring, debugging, and testing purposes. */
  rpc SubscribeSwapFailures(SubscribeSwapsRequest) returns (stream SwapFailure) {
    option (google.api.http) = {
      get: "/v1/subscribeswapfailures"
    };
  }
}

enum OrderSide {
  BUY = 0;
  SELL = 1;
}

message AddCurrencyRequest {
  // The ticker symbol for this currency such as BTC, LTC, ETH, etc...
  string currency = 1 [json_name = "currency"];
  enum SwapClient {
    LND = 0;
    RAIDEN = 1;
  }
  // The payment channel network client to use for executing swaps.
  SwapClient swap_client = 2 [json_name = "swap_client"];
  // The contract address for layered tokens such as ERC20.
  string token_address = 3 [json_name = "token_address"];
  // The number of places to the right of the decimal point of the smallest subunit of the currency.
  // For example, BTC, LTC, and others where the smallest subunits (satoshis) are 0.00000001 full
  // units (bitcoins) have 8 decimal places. ETH has 18. This can be thought of as the base 10
  // exponent of the smallest subunit expressed as a positive integer. A default value of 8 is
  // used if unspecified.
  uint32 decimal_places = 4 [json_name = "decimal_places"];
}
message AddCurrencyResponse {}

message AddPairRequest {
  // The base currency that is bought and sold for this trading pair.
  string base_currency = 1 [json_name = "base_currency"];
  // The currency used to quote a price for the base currency.
  string quote_currency = 2 [json_name = "quote_currency"];
}
message AddPairResponse {}

message BanRequest {
  // The node pub key of the node to ban.
  string node_pub_key = 1 [json_name = "node_pub_key"];
}
message BanResponse {}

message Chain {
    // The blockchain the swap client is on (eg bitcoin, litecoin)
    string chain = 1 [json_name = "chain"];
    // The network the swap client is on (eg regtest, testnet, mainnet)
    string network = 2 [json_name = "network"];
}

message ChannelBalance {
  // Sum of channels balances denominated in satoshis or equivalent.
  int64 balance = 1 [json_name = "balance"];
  // Sum of channels pending balances denominated in satoshis or equivalent.
  int64 pending_open_balance = 2 [json_name = "pending_open_balance"];
}

message ChannelBalanceRequest {
  // The ticker symbol of the currency to query for, if unspecified then balances for all supported
  // currencies are queried.
  string currency = 1 [json_name = "currency"];
}
message ChannelBalanceResponse {
  // A map between currency ticker symbols and their channel balances.
  map<string, ChannelBalance> balances = 1 [json_name = "orders"];
}

message ConnectRequest {
  // The uri of the node to connect to in "[nodePubKey]@[host]:[port]" format.
  string node_uri = 1 [json_name = "node_uri"];
}

message ConnectResponse {}

message ExecuteSwapRequest {
  // The order id of the maker order.
  string order_id = 1 [json_name = "order_id"];
  // The trading pair of the swap orders.
  string pair_id = 2 [json_name = "pair_id"];
  // The node pub key of the peer which owns the maker order. This is optional but helps locate the order more quickly.
  string peer_pub_key = 3 [json_name = "peer_pub_key"];
  // The quantity to swap. The whole order will be swapped if unspecified.
  uint64 quantity = 4 [json_name = "quantity"];
}

message SwapFailure {
  // The global UUID for the order that failed the swap.
  string order_id = 1 [json_name = "order_id"];
  // The trading pair that the swap is for.
  string pair_id = 2 [json_name = "pair_id"];
  // The order quantity that was attempted to be swapped.
  uint64 quantity = 3 [json_name = "quantity"];
  // The node pub key of the peer that we attempted to swap with.
  string peer_pub_key = 4 [json_name = "peer_pub_key"];
  // The reason why the swap failed.
  string failure_reason = 5 [json_name = "failure_reason"];
}

message GetInfoRequest {}
message GetInfoResponse {
  // The version of this instance of xud.
  string version = 1 [json_name = "version"];
  // The node pub key of this node.
  string node_pub_key = 2 [json_name = "node_pub_key"];
  // A list of uris that can be used to connect to this node. These are shared with peers.
  repeated string uris = 3 [json_name = "uris"];
  // The number of currently connected peers.
  int32 num_peers = 4 [json_name = "num_peers"];
  // The number of supported trading pairs.
  int32 num_pairs = 5 [json_name = "num_pairs"];
  // The number of active, standing orders in the order book.
  OrdersCount orders = 6 [json_name = "orders"];
  map<string, LndInfo> lnd = 7 [json_name = "lnd"];
  RaidenInfo raiden = 8 [json_name = "raiden"];
}

message GetNodeInfoRequest {
  // The node pub key of the node for which to get information.
  string node_pub_key = 1 [json_name = "node_pub_key"];
}
message GetNodeInfoResponse {
  // The node's reputation score. Points are subtracted for unexpected or potentially malicious
  // behavior. Points are added when swaps are successfully executed.
  int32 reputationScore = 1 [json_name = "reputation"];
  // Whether the node is currently banned.
  bool banned = 2 [json_name = "banned"];
}

message ListOrdersRequest {
  // The trading pair for which to retrieve orders.
  string pair_id = 1 [json_name = "pair_id"];
  // Whether own orders should be included in result or not.
  bool include_own_orders = 2 [json_name = "include_own_orders"];
  // The maximum number of orders to return from each side of the order book.
  int32 limit = 3 [json_name = "limit"];
}
message ListOrdersResponse {
  // A map between pair ids and their buy and sell orders.
  map<string, Orders> orders = 1 [json_name = "orders"];
}

message ListCurrenciesRequest {}
message ListCurrenciesResponse {
  // A list of ticker symbols of the supported currencies.
  repeated string currencies = 1 [json_name = "currencies"];
}

message ListPairsRequest {}
message ListPairsResponse {
  // The list of supported trading pair tickers in formats like "LTC/BTC".
  repeated string pairs = 1 [json_name = "pairs"];
}

message ListPeersRequest {}
message ListPeersResponse {
  // The list of connected peers.
  repeated Peer peers = 1 [json_name = "peers"];
}

message LndChannels {
  // The number of active/online channels for this lnd instance that can be used for swaps.
  int32 active = 1 [json_name = "active"];
  // The number of inactive/offline channels for this lnd instance.
  int32 inactive = 2 [json_name = "inactive"];
  // The number of channels that are pending on-chain confirmation before they can be used.
  int32 pending = 3 [json_name = "pending"];
}

message LndInfo {
  string error = 1 [json_name = "error"];
  LndChannels channels = 2 [json_name = "channels"];
  repeated Chain chains = 3 [json_name = "chains"];
  int32 blockheight = 4 [json_name = "blockheight"];
  repeated string uris = 5 [json_name = "uris"];
  string version = 6 [json_name = "version"];
  string alias = 7 [json_name = "alias"];
}

message Order {
  // The price of the order.
  double price = 1 [json_name = "price"];
  // The quantity of the order in satoshis.
  uint64 quantity = 2 [json_name = "quantity"];
  // The trading pair that this order is for.
  string pair_id = 3 [json_name = "pair_id"];
  // A UUID for this order.
  string id = 4 [json_name = "id"];
  oneof own_or_peer {
    // The node pub key of the peer that created this order.
    string peer_pub_key = 5 [json_name = "peer_pub_key"];
    // The local id for this order.
    string local_id = 6 [json_name = "local_id"];
  }
  // The epoch time when this order was created.
  int64 created_at = 7 [json_name = "created_at"];
  // Whether this order is a buy or sell
  OrderSide side = 8 [json_name = "side"];
  // Whether this order is a local own order or a remote peer order.
  bool is_own_order = 9 [json_name = "is_own_order"];
  // The quantity on hold pending swap exectuion.
  uint64 hold = 10 [json_name = "hold"];
}

message OrderUpdate {
  oneof order_update {
    // An order that was added to the order book.
    Order order = 1 [json_name = "order"];
    // An order (or portion thereof) that was removed from the order book.
    OrderRemoval order_removal = 2 [json_name = "order_removal"];
  }
}

message OrderRemoval {
  // The quantity of the order being removed.
  uint64 quantity = 1 [json_name = "quantity"];
  // The trading pair that the order is for.
  string pair_id = 2 [json_name = "pair_id"];
  // The global UUID for the order.
  string order_id = 3 [json_name = "order_id"];
  // The local id for the order, if applicable.
  string local_id = 4 [json_name = "local_id"];
  // Whether the order being removed is a local own order or a remote peer order.
  bool is_own_order = 5 [json_name = "is_own_order"];
}

message Orders {
  // A list of buy orders sorted by descending price.
  repeated Order buy_orders = 1 [json_name = "buy_orders"];
  // A list of sell orders sorted by ascending price.
  repeated Order sell_orders = 2 [json_name = "sell_orders"];
}

message OrdersCount {
  // The number of orders belonging to remote xud nodes.
  int32 peer = 1 [json_name = "peer"];
  // The number of orders belonging to our local xud node.
  int32 own = 2 [json_name = "own"];
}

message Peer {
  // The socket address with host and port for this peer.
  string address = 1 [json_name = "address"];
  // The node pub key to uniquely identify this peer.
  string node_pub_key = 2 [json_name = "node_pub_key"];
  // A map of ticker symbols to lnd pub keys for this peer 
  map<string, string> lnd_pub_keys = 3 [json_name = "lnd_pub_keys"];
  // Indicates whether this peer was connected inbound.
  bool inbound = 4 [json_name = "inbound"];
  // A list of trading pair tickers supported by this peer.
  repeated string pairs = 5 [json_name = "pairs"];
  // The version of xud being used by the peer.
  string xud_version = 6 [json_name = "xud_version"];
  // The time in seconds that we have been connected to this peer.
  int32 seconds_connected = 7 [json_name = "seconds_connected"];
  // The raiden address for this peer
  string raiden_address = 8 [json_name = "raiden_address"];
}

message PlaceOrderRequest {
  // The price of the order.
  double price = 1 [json_name = "price"];
  // The quantity of the order in satoshis.
  uint64 quantity = 2 [json_name = "quantity"];
  // The trading pair that the order is for.
  string pair_id = 3 [json_name = "pair_id"];
  // The local id to assign to the order.
  string order_id = 4 [json_name = "order_id"];
  // Whether the order is a Buy or Sell.
  OrderSide side = 5 [json_name = "side"];
}
message PlaceOrderResponse {
  // A list of own orders (or portions thereof) that matched the newly placed order.
  repeated Order internal_matches = 1 [json_name = "internal_matches"];
  // A list of successful swaps of peer orders that matched the newly placed order.
  repeated SwapSuccess swap_successes = 2 [json_name = "swap_successes"];
  // The remaining portion of the order, after matches, that enters the order book.
  Order remaining_order = 3 [json_name = "remaining_order"];
  // A list of swap attempts that failed.
  repeated SwapFailure swap_failures = 4 [json_name = "swap_failures"];
}

message PlaceOrderEvent {
  oneof event {
    // An own order (or portion thereof) that matched the newly placed order.
    Order internal_match = 1 [json_name = "internal_match"];
    // A successful swap of a peer order that matched the newly placed order.
    SwapSuccess swap_success = 2 [json_name = "swap_success"];
    // The remaining portion of the order, after matches, that enters the order book.
    Order remaining_order = 3 [json_name= "remaining_order"];
    // A swap attempt that failed.
    SwapFailure swap_failure = 4 [json_name = "swap_failure"];
  }
}

message RaidenInfo {
  string error = 1 [json_name = "error"];
  string address = 2 [json_name = "address"];
  int32 channels = 3 [json_name = "channels"];
  string version = 4 [json_name = "version"];
}

message RemoveCurrencyRequest {
  // The ticker symbol for this currency such as BTC, LTC, ETH, etc...
  string currency = 1 [json_name = "currency"];
}
message RemoveCurrencyResponse {}

message RemoveOrderRequest {
  // The local id of the order to remove.
  string order_id = 1 [json_name = "order_id"];
  // The quantity to remove from the order. If zero or unspecified then entire order is removed.
  uint64 quantity = 2 [json_name = "quantity"];
}
message RemoveOrderResponse {
  // Any portion of the order that was on hold due to ongoing swaps at the time of the request
  // and could not be removed until after the swaps finish.
  uint64 quantity_on_hold = 1 [json_name = "hold"];
}

message RemovePairRequest {
  // The trading pair ticker to remove in a format such as "LTC/BTC".
  string pair_id = 1 [json_name = "pair_id"];
}
message RemovePairResponse {}

message ShutdownRequest {}
message ShutdownResponse {}

message SubscribeOrdersRequest {
  // Whether to transmit all existing active orders upon establishing the stream.
  bool existing = 1 [json_name = "existing"];
}

message SubscribeSwapsRequest {
  // Whether to include the results for swaps initiated via the PlaceOrder or ExecuteSwap calls.
  // These swap results are also returned in the responses for the respective calls.
  bool include_taker = 1 [json_name = "include_taker"];
}

message SwapSuccess {
  // The global UUID for the order that was swapped.
  string order_id = 1;
  // The trading pair that the swap is for.
  string pair_id = 3 [json_name = "pair_id"];
  // The order quantity that was swapped.
  uint64 quantity = 4 [json_name = "quantity"];
  // The hex-encoded payment hash for the swaps.
  string r_hash = 5 [json_name = "r_hash"];
  // The amount of the smallest base unit of the currency (like satoshis or wei) received.
  int64 amount_received = 8 [json_name = "amount_received"];
  // The amount of the smallest base unit of the currency (like satoshis or wei) sent.
  int64 amount_sent = 9 [json_name = "amount_sent"];
  // The node pub key of the peer that executed this order.
  string peer_pub_key = 10 [json_name = "peer_pub_key"];
  enum Role {
    TAKER = 0;
    MAKER = 1;
  }
  // Our role in the swap, either MAKER or TAKER.
  Role role = 11 [json_name = "role"];
  // The ticker symbol of the currency received.
  string currency_received = 12 [json_name = "currency_received"];
  // The ticker symbol of the currency sent.
  string currency_sent = 13 [json_name = "currency_sent"];
  // The hex-encoded preimage.
  string r_preimage = 14 [json_name = "r_preimage"];
  // The price used for the swap.
  double price = 15 [json_name = "price"];
}

message UnbanRequest {
  // The node pub key of the peer to unban.
  string node_pub_key = 1 [json_name = "node_pub_key"];
  // Whether to attempt to connect to the peer after it is unbanned.
  bool reconnect = 2  [json_name = "reconnect"];
}
message UnbanResponse {}
