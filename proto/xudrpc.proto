// Copyright 2018 The Exchange Union Developers

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

import "annotations.proto";

package xudrpc;

service Xud {
  /* Add a currency to the list of supported currencies. */
  rpc AddCurrency(AddCurrencyRequest) returns (AddCurrencyResponse) {
    option (google.api.http) = {
      post: "/v1/addcurrency"
      body: "*"
    };
  }

  /* Add a trading pair to the list of supported trading pairs. */
  rpc AddPair(AddPairRequest) returns (AddPairResponse) {
    option (google.api.http) = {
      post: "/v1/addpair"
      body: "*"
    };
  }

  /* Removes an order from the order book by its local id. */
  rpc RemoveOrder(RemoveOrderRequest) returns (RemoveOrderResponse) {
    option (google.api.http) = {
      post: "/v1/removeorder"
      body: "*"
    };
  }

  /* Get the total balance available across all channels for a given currency. */
  rpc ChannelBalance(ChannelBalanceRequest) returns (ChannelBalanceResponse) {
    option (google.api.http) = {
      get: "/v1/channelbalance"
    };
  }
  
  /* Connect to an XU node. */
  rpc Connect(ConnectRequest) returns (ConnectResponse) {
    option (google.api.http) = {
      post: "/v1/connect"
      body: "*"
    };
  }
  
  /* Ban a XU node manually and disconnect from it. */
  rpc Ban(BanRequest) returns (BanResponse) {
    option (google.api.http) = {
      post: "/v1/ban"
      body: "*"
    };
  }

  /* Remove ban from XU node manually and connect to it. */
  rpc Unban(UnbanRequest) returns (UnbanResponse) {
    option (google.api.http) = {
      post: "/v1/unban"
      body: "*"
    };
  }
  
  /* Get general information about this Exchange Union node. */
  rpc GetInfo(GetInfoRequest) returns (GetInfoResponse) {
    option (google.api.http) = {
      get: "/v1/info"
    };
  }

  /* Gets general information about a node. */
  rpc GetNodeInfo(GetNodeInfoRequest) returns (GetNodeInfoResponse) {
    option (google.api.http) = {
      get: "/v1/reputation"
    };
  }
  /* Gets orders from the order book. This call returns the state of the order book at a given point
   * in time, although it is not guaranteed to still be vaild by the time a response is received
   * and processed by a client. It accepts an optional trading pair id parameter. If specified, only
   * orders for that particular trading pair are returned. Otherwise, all orders are returned. Orders
   * are separated into buys and sells for each trading pair, but unsorted. */
  rpc GetOrders(GetOrdersRequest) returns (GetOrdersResponse) {
    option (google.api.http) = {
      get: "/v1/orders"
    };
  }
  
  /* Get the list of the order book's supported currencies. */
  rpc ListCurrencies(ListCurrenciesRequest) returns (ListCurrenciesResponse) {
    option (google.api.http) = {
      get: "/v1/currencies"
    };
  }
  
  /* Get the list of the order book's suported trading pairs. */
  rpc ListPairs(ListPairsRequest) returns (ListPairsResponse) {
    option (google.api.http) = {
      get: "/v1/pairs"
    };
  }
  
  /* Get a list of connected peers. */
  rpc ListPeers(ListPeersRequest) returns (ListPeersResponse) {
    option (google.api.http) = {
      get: "/v1/peers"
    };
  }

  /* Add an order to the order book.
   * If price is zero or unspecified a market order will get added.
   */
  rpc PlaceOrder(PlaceOrderRequest) returns (stream PlaceOrderEvent) {
    option (google.api.http) = {
      post: "/v1/placeorder"
      body: "*"
    };
  }

  /* The synchronous non-streaming version of PlaceOrder. */
  rpc PlaceOrderSync(PlaceOrderRequest) returns (PlaceOrderResponse) {
    option (google.api.http) = {
      post: "/v1/placeordersync"
      body: "*"
    };
  }


  /* Remove a currency. */
  rpc RemoveCurrency(RemoveCurrencyRequest) returns (RemoveCurrencyResponse) {
    option (google.api.http) = {
      post: "/v1/removecurrency"
      body: "*"
    };
  }

  /* Remove a trading pair. */
  rpc RemovePair(RemovePairRequest) returns (RemovePairResponse) {
    option (google.api.http) = {
      post: "/v1/removepair"
      body: "*"
    };
  }
  
  /* Begin shutting down xud. */
  rpc Shutdown(ShutdownRequest) returns (ShutdownResponse) {
    option (google.api.http) = {
      post: "/v1/shutdown"
      body: "*"
    };
  }
  
  /* Subscribes to orders being added to the order book. This call, together with SubscribeRemovedOrders,
   * allows the client to maintain an up-to-date view of the order book. For example, an exchange that
   * wants to show its users a real time list of the orders available to them would subscribe to this
   * streaming call to be alerted of new orders as they become available for trading. */
  rpc SubscribeAddedOrders(SubscribeAddedOrdersRequest) returns (stream Order) {
    option (google.api.http) = {
      get: "/v1/subscribeorders"
    };
  }
  
  /* Subscribes to orders being removed - either in full or in part - from the order book. This call,
   * together with SubscribeAddedOrders, allows the client to maintain an up-to-date view of the order
   * book. For example, an exchange that wants to show its users a real time list of the orders available
   * to them would subscribe to this streaming call to be alerted when part or all of an existing order
   * is no longer available for trading. */
  rpc SubscribeRemovedOrders(SubscribeRemovedOrdersRequest) returns (stream OrderRemoval) {
    option (google.api.http) = {
      get: "/v1/subscribeorders"
    };
  }

  /* Subscribes to completed swaps that are initiated by a remote peer. This call allows the client to
   * get real-time notifications when its orders are filled by a remote taker. It can be used for
   * tracking order executions, updating balances, and informing a trader when one of their orders
   * is settled through Exchange Union network. */
  rpc SubscribeSwaps(SubscribeSwapsRequest) returns (stream SwapResult) {
    option (google.api.http) = {
      get: "/v1/subscribeswaps"
    };
  }
}

enum OrderSide {
  BUY = 0;
  SELL = 1;
}

message AddCurrencyRequest {
  // The ticker symbol for this currency such as BTC, LTC, ETH, etc...
  string currency = 1 [json_name = "currency"];
  enum SwapClient {
    LND = 0;
    RAIDEN = 1;
  }
  // The payment channel network client to use for executing swaps
  SwapClient swap_client = 2 [json_name = "swap_client"];
  // The contract address for layered tokens such as ERC20
  string token_address = 3 [json_name = "token_address"];
  // The number of places to the right of the decimal point of the smallest subunit of the currency. For example, BTC, LTC, and others
  // where the smallest subunits (satoshis) are 0.00000001 full units (bitcoins) have 8 decimal places. ETH has 18. This can be thought
  // of as the base 10 exponent of the smallest subunit expressed as a positive integer. A default value of 8 is used if unspecified.
  uint32 decimal_places = 4 [json_name = "decimal_places"];
}
message AddCurrencyResponse {}

message AddPairRequest {
  // The base currency that is bought and sold for this trading pair
  string base_currency = 1 [json_name = "base_currency"];
  // The currency used to quote a price for the base currency
  string quote_currency = 2 [json_name = "quote_currency"];
}
message AddPairResponse {}

message RemoveOrderRequest {
  // The local id of the order to remove
  string order_id = 1 [json_name = "order_id"];
}
message RemoveOrderResponse {}

message ChannelBalance {
  // Sum of channels balances denominated in satoshis or equivalent
  int64 balance = 1 [json_name = "balance"];
  // Sum of channels pending balances denominated in satoshis or equivalent
  int64 pending_open_balance = 2 [json_name = "pending_open_balance"];
}

message ChannelBalanceRequest {
  // The ticker symbol of the currency to query for, if unspecified then balances for all
  // supported currencies are queried
  string currency = 1 [json_name = "currency"];
}
message ChannelBalanceResponse {
  // A map between currency ticker symbols and their channel balances
  map<string, ChannelBalance> balances = 1 [json_name = "orders"];
}

message ConnectRequest {
  string node_uri = 1 [json_name = "node_uri"];
}
message ConnectResponse {}

message BanRequest {
  string node_pub_key = 1 [json_name = "node_pub_key"];
}
message BanResponse {}

message GetInfoRequest {}
message GetInfoResponse {
  string version = 1 [json_name = "version"];
  string node_pub_key = 2 [json_name = "node_pub_key"];
  repeated string uris = 3 [json_name = "uris"];
  int32 num_peers = 4 [json_name = "num_peers"];
  int32 num_pairs = 5 [json_name = "num_pairs"];
  OrdersCount orders = 6 [json_name = "orders"];
  LndInfo lndbtc = 7 [json_name = "lndbtc"];
  LndInfo lndltc = 8 [json_name = "lndltc"];
  RaidenInfo raiden = 9 [json_name = "raiden"];
}

message GetNodeInfoRequest {
  string node_pub_key = 1 [json_name = "node_pub_key"];
}
message GetNodeInfoResponse {
  int32 reputationScore = 1 [json_name = "reputation"];
  bool banned = 2 [json_name = "banned"];
}

message GetOrdersRequest {
  // The trading pair for which to retrieve orders
  string pair_id = 1 [json_name = "pair_id"];
  // Whether own orders should be included in result or not
  bool include_own_orders = 2 [json_name = "include_own_orders"];
}
message GetOrdersResponse {
  // A map between pair ids and their buy and sell orders
  map<string, Orders> orders = 1 [json_name = "orders"];
}

message ListCurrenciesRequest {}
message ListCurrenciesResponse {
  // The ticker symbols of supported currencies
  repeated string currencies = 1 [json_name = "currencies"];
}

message ListPairsRequest {}
message ListPairsResponse {
  // The supported trading pair tickers in formats like "LTC/BTC"
  repeated string pairs = 1 [json_name = "pairs"];
}

message ListPeersRequest {}
message ListPeersResponse {
  repeated Peer peers = 1 [json_name = "peers"];
}

message LndChannels {
  int32 active = 1 [json_name = "active"];
  int32 inactive = 2 [json_name = "inactive"];
  int32 pending = 3 [json_name = "pending"];
}

message LndInfo {
  string error = 1 [json_name = "error"];
  LndChannels channels = 2 [json_name = "channels"];
  repeated string chains = 3 [json_name = "chains"];
  int32 blockheight = 4 [json_name = "blockheight"];
  repeated string uris = 5 [json_name = "uris"];
  string version = 6 [json_name = "version"];
  string alias = 7 [json_name = "alias"];
}

message Order {
  // The price of the order.
  double price = 1 [json_name = "price"];
  // The quantity of the order.
  double quantity = 2 [json_name = "quantity"];
  // The trading pair that this order is for.
  string pair_id = 3 [json_name = "pair_id"];
  // A UUID for this order.
  string id = 4 [json_name = "id"];
  oneof own_or_peer {
    // The node pub key of the peer that created this order.
    string peer_pub_key = 5 [json_name = "peer_pub_key"];
    // The local id for this order.
    string local_id = 6 [json_name = "local_id"];
  }
  // The epoch time when this order was created.
  int64 created_at = 7 [json_name = "created_at"];
  // Whether this order is a buy or sell
  OrderSide side = 8 [json_name = "side"];
  // Whether this order is a local own order or a remote peer order.
  bool is_own_order = 9 [json_name = "is_own_order"];
}

message OrderRemoval {
  // The quantity of the order being removed.
  double quantity = 1 [json_name = "quantity"];
  // The trading pair that the order is for.
  string pair_id = 2 [json_name = "pair_id"];
  // The global UUID for the order.
  string order_id = 3 [json_name = "order_id"];
  // The local id for the order, if applicable.
  string local_id = 4 [json_name = "local_id"];
  // Whether the order being removed is a local own order or a remote peer order.
  bool is_own_order = 5 [json_name = "is_own_order"];
}

message Orders {
  // A list of buy orders sorted by descending price
  repeated Order buy_orders = 1 [json_name = "buy_orders"];
  // A list of sell orders sorted by ascending price
  repeated Order sell_orders = 2 [json_name = "sell_orders"];
}

message OrdersCount {
  int32 peer = 1 [json_name = "peer"];
  int32 own = 2 [json_name = "own"];
}

message Peer {
  // The socket address with host and port for this peer
  string address = 1 [json_name = "address"];
  // The node pub key to uniquely identify this peer
  string node_pub_key = 2 [json_name = "node_pub_key"];
  // The lnd BTC pub key associated with this peer
  string lnd_btc_pub_key = 3 [json_name = "lnd_btc_pub_key"];
  // The lnd LTC pub key associated with this peer
  string lnd_ltc_pub_key = 4 [json_name = "lnd_ltc_pub_key"];
  // Indicates whether this peer was connected inbound
  bool inbound = 5 [json_name = "inbound"];
  // A list of trading pair tickers supported by this peer
  repeated string pairs = 6 [json_name = "pairs"]; 
  // The version of xud being used by the peer
  string xud_version = 7 [json_name = "xud_version"];
  // The time in seconds that we have been connected to this peer
  int32 seconds_connected = 8 [json_name = "seconds_connected"];
}

message PlaceOrderRequest {
  // The price of the order.
  double price = 1 [json_name = "price"];
  // The quantity of the order.
  double quantity = 2 [json_name = "quantity"];
  // The trading pair that the order is for
  string pair_id = 3 [json_name = "pair_id"];
  // The local id to assign to the order
  string order_id = 4 [json_name = "order_id"];
  // Whether the order is a Buy or Sell
  OrderSide side = 5 [json_name = "side"];
}
message PlaceOrderResponse {
  // A list of own orders (or portions thereof) that matched the newly placed order
  repeated Order internal_matches = 1 [json_name = "internal_matches"];
  // A list of swap results of peer orders that matched the newly placed order
  repeated SwapResult swap_results = 2 [json_name = "swap_results"];
  // The remaining portion of the order, after matches, that enters the order book
  Order remaining_order = 3 [json_name= "remaining_order"];
}

message PlaceOrderEvent {
  oneof event {
    // An own orders (or portions thereof) that matched the newly placed order
    Order internal_match = 1 [json_name = "internal_match"];
    // A swap results of peer orders that matched the newly placed order
    SwapResult swap_result = 2 [json_name = "swap_result"];
    // The remaining portion of the order, after matches, that enters the order book
    Order remaining_order = 3 [json_name= "remaining_order"];
  }
}

message RaidenInfo {
  string error = 1 [json_name = "error"];
  string address = 2 [json_name = "address"];
  int32 channels = 3 [json_name = "channels"];
  string version = 4 [json_name = "version"];
}

message RemoveCurrencyRequest {
  // The ticker symbol for this currency such as BTC, LTC, ETH, etc...
  string currency = 1 [json_name = "currency"];
}
message RemoveCurrencyResponse {}

message RemovePairRequest {
  // The trading pair ticker to remove, such as "LTC/BTC"
  string pair_id = 1 [json_name = "pair_id"];
}
message RemovePairResponse {}

message ShutdownRequest {}
message ShutdownResponse {}

message SubscribeAddedOrdersRequest {}

message SubscribeRemovedOrdersRequest {}

message SubscribeSwapsRequest {}

message SwapResult {
  // The global UUID for the order that was swapped.
  string order_id = 1;
  // The local id for the order that was swapped.
  string local_id = 2 [json_name = "local_id"];
  // The trading pair that this order is for.
  string pair_id = 3 [json_name = "pair_id"];
  // The order quantity that was swapped.
  double quantity = 4 [json_name = "quantity"];
  // The hex-encoded r_hash for the swap payments.
  string r_hash = 5 [json_name = "r_hash"];
  // The amount of subunits (satoshis) received.
  int64 amount_received = 6 [json_name = "amount_received"];
  // The amount of subunits (satoshis) sent.
  int64 amount_sent = 7 [json_name = "amount_sent"];
  // The node pub key of the peer that executed this order.
  string peer_pub_key = 8 [json_name = "peer_pub_key"];
  enum Role {
    TAKER = 0;
    MAKER = 1;
  }
  // Our role in the swap, either MAKER or TAKER
  Role role = 9 [json_name = "role"];
}

message UnbanRequest {
  string node_pub_key = 1 [json_name = "node_pub_key"];
  bool reconnect = 2  [json_name = "reconnect"];
}
message UnbanResponse {}
