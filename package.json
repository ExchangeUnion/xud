{
  "name": "xud",
  "minCompatibleVersion": "1.0.0-rc.1",
  "version": "1.2.4",
  "description": "Exchange Union Daemon",
  "main": "lib/Xud.js",
  "bin": {
    "xud": "./bin/xud",
    "xucli": "./bin/xucli"
  },
  "scripts": {
    "changelog": "conventional-changelog -p angular -i CHANGELOG.md -s",
    "config": "gulp config.create",
    "postinstall": "npm run precompile",
    "precompile": "node parseGitCommit.js",
    "compile": "npm run precompile && tsc && cross-os postcompile",
    "compile:dev": "npm run precompile && tsc --incremental --tsBuildInfoFile ./dist/.tsbuildinfo && cross-os postcompile",
    "compile:seedutil": "(cd seedutil && export PATH=\"$PWD/go/bin:$PATH\" && GOPATH=$PWD/go GO111MODULE=on go build -v)",
    "compile:watch": "tsc -w",
    "dev": "npm run compile:dev && npm start",
    "dev:watch": "concurrently --kill-others \"npm run compile:watch\" \"npm run nodemon:watch\"",
    "dev:watch:inspect": "concurrently --kill-others \"npm run compile:watch\" \"npm run nodemon:watch:inspect\"",
    "lint": "eslint --fix . && prettier --write lib/ test/ --loglevel warn",
    "lintNoFix": "eslint . && prettier --check lib/ test/",
    "nodemon:watch": "nodemon --watch dist -e js dist/Xud.js",
    "nodemon:watch:inspect": "nodemon --inspect-brk --watch dist -e js dist/Xud.js",
    "prepublishOnly": "cross-os clean && npm run compile",
    "proto": "cross-os proto && cross-os swagger && cross-os protodocs && cross-os prototest",
    "slate": "proto2slate proto/xudrpc.proto",
    "start": "node dist/Xud.js",
    "stop": "cross-os stop",
    "test": "npm run test:unit && npm run test:crypto && npm run test:int && npm run test:p2p && npm run test:jest",
    "test:int": "mocha --timeout 10000 -r ts-node/register test/integration/*",
    "test:int:watch": "mocha --timeout 10000 -r ts-node/register test/integration/*  --watch --watch-extensions ts",
    "test:unit": "mocha --timeout 10000 -r ts-node/register test/unit/*",
    "test:unit:watch": "mocha --timeout 10000 -r ts-node/register test/unit/*  --watch --watch-extensions ts",
    "test:p2p": "mocha --timeout 10000 -r ts-node/register test/p2p/*",
    "test:p2p:watch": "mocha --timeout 10000 -r ts-node/register test/p2p/*  --watch --watch-extensions ts",
    "test:perf": "jest --testMatch='<rootDir>/test/perf/*.spec.[jt]s?(x)'",
    "test:crypto": "mocha --timeout 10000 -r ts-node/register test/crypto/*",
    "test:sim": "(npm run test:sim:build && npm run test:sim:run)",
    "test:sim:build": "(npm run test:sim:compile:xud && npm run test:sim:compile:custom-xud && cd test/simulation && ./docker-build.sh)",
    "test:sim:build:test": "(cd test/simulation && ./docker-build.sh test)",
    "test:sim:build:xud": "(npm run test:sim:compile:xud && npm run test:sim:compile:custom-xud && cd test/simulation && ./docker-build.sh xud)",
    "test:sim:build:lnd": "(cd test/simulation && ./docker-build.sh lnd)",
    "test:sim:build:connext": "(cd test/simulation && ./docker-build.sh connext)",
    "test:sim:run": "(cd test/simulation && ./docker-run.sh)",
    "test:sim:run:integration": "(cd test/simulation && ./docker-run.sh TestIntegration)",
    "test:sim:run:instability": "(cd test/simulation && ./docker-run.sh TestInstability)",
    "test:sim:run:security": "(cd test/simulation && ./docker-run.sh TestSecurity)",
    "test:sim:compile:xud": "(npm run compile && mkdir -p test/simulation/docker-xud/xud && cp -a dist test/simulation/docker-xud/xud && cp -a bin test/simulation/docker-xud/xud && cp package.json test/simulation/docker-xud/xud)",
    "test:sim:compile:custom-xud": "(npm run test:sim:custom-xud:apply && npm run compile && mkdir -p test/simulation/docker-xud/custom-xud/dist && npm run test:sim:custom-xud:reverse && cp -a dist test/simulation/docker-xud/custom-xud && cp -a bin test/simulation/docker-xud/custom-xud && cp package.json test/simulation/docker-xud/custom-xud)",
    "test:sim:custom-xud:patch": "git diff -- . ':(exclude)test/simulation/custom-xud.patch' > test/simulation/custom-xud.patch",
    "test:sim:custom-xud:apply": "git apply --reject test/simulation/custom-xud.patch",
    "test:sim:custom-xud:reverse": "git apply -R test/simulation/custom-xud.patch",
    "test:sim:clean": "(cd test/simulation && ./docker-clean.sh)",
    "test:sim:clean:indra": "rm -rf test/simulation/temp/indra",
    "test:sim:clean:xud": "(cd test/simulation && ./docker-clean.sh xud)",
    "test:sim:clean:lnd": "(cd test/simulation && ./docker-clean.sh lnd)",
    "test:sim:clean:connext": "(cd test/simulation && ./docker-clean.sh connext)",
    "test:sim:clean:custom-xud": "(cd test/simulation && ./docker-clean.sh custom-xud)",
    "test:sim:logs": "cd test/simulation && ./logs.sh",
    "test:jest": "jest --testMatch='<rootDir>/test/jest/**/*.spec.[jt]s?(x)' --unhandled-rejections=strict --forceExit",
    "test:seedutil": "jest --testMatch='<rootDir>/seedutil/*.spec.[jt]s?(x)'",
    "test:jest:watch": "jest --watch --testMatch='<rootDir>/test/jest/**/*.spec.[jt]s?(x)'",
    "typedoc": "typedoc --out typedoc --module commonjs --target es6 lib --readme none",
    "preversion": "npm run lintNoFix && npm test && npm run test:sim:build && npm run test:sim",
    "postversion": "npm run compile",
    "version": "npm run config && npm run changelog && git add sample-xud.conf CHANGELOG.md && npm run typedoc && npm run slate"
  },
  "cross-os": {
    "clean": {
      "linux": "rm -rf ./dist",
      "darwin": "rm -rf ./dist",
      "win32": "rd /q /s dist || cd ."
    },
    "postcompile": {
      "linux": "rsync -am --include '*/' --include '*.js*' --exclude '*' lib/proto/ dist/proto",
      "darwin": "rsync -am --include '*/' --include '*.js*' --exclude '*' lib/proto/ dist/proto",
      "win32": "xcopy /s lib\\proto\\*.js* dist\\proto\\* >nul"
    },
    "proto": {
      "linux": "grpc_tools_node_protoc --js_out='import_style=commonjs,binary:lib/proto' --ts_out='generate_package_definition:lib/proto' --grpc_out='generate_package_definition:lib/proto' --plugin='protoc-gen-ts=node_modules/.bin/protoc-gen-ts' -I='proto' proto/*.proto proto/google/api/*.proto proto/google/protobuf/*.proto",
      "darwin": "grpc_tools_node_protoc --js_out='import_style=commonjs,binary:lib/proto' --ts_out='generate_package_definition:lib/proto' --grpc_out='generate_package_definition:lib/proto' --plugin='protoc-gen-ts=node_modules/.bin/protoc-gen-ts' -I='proto' proto/*.proto proto/google/api/*.proto proto/google/protobuf/*.proto",
      "win32": "grpc_tools_node_protoc --js_out=\"import_style=commonjs,binary:lib\\proto\" --ts_out=\"generate_package_definition:lib\\proto\" --grpc_out=\"generate_package_definition:lib\\proto\" --plugin=\"protoc-gen-ts=node_modules\\.bin\\protoc-gen-ts.cmd\" -I=\"proto\" proto\\xudrpc.proto proto\\xudp2p.proto proto\\lndrpc.proto proto\\lndinvoices.proto proto\\annotations.proto proto\\google\\api\\http.proto proto\\google\\protobuf\\descriptor.proto"
    },
    "swagger": {
      "linux": "grpc_tools_node_protoc --swagger_out='lib/proto' -I='proto' proto/xudrpc.proto",
      "darwin": "grpc_tools_node_protoc --swagger_out='lib/proto' -I='proto' proto/xudrpc.proto",
      "win32": "grpc_tools_node_protoc --swagger_out=\"lib\\proto\" -I=\"proto\" proto\\xudrpc.proto"
    },
    "protodocs": {
      "linux": "grpc_tools_node_protoc --doc_out='docs' --doc_opt=markdown,api.md -I='proto' proto/xudrpc.proto",
      "darwin": "grpc_tools_node_protoc --doc_out='docs' --doc_opt=markdown,api.md -I='proto' proto/xudrpc.proto",
      "win32": "grpc_tools_node_protoc --doc_out=\"docs\" --doc_opt=markdown,api.md -I=\"proto\" proto\\xudrpc.proto"
    },
    "prototest": {
      "linux": "grpc_tools_node_protoc --go_out='plugins=grpc:test/simulation/xudrpc' -I='proto' proto/xudrpc.proto",
      "darwin": "grpc_tools_node_protoc --go_out='plugins=grpc:test/simulation/xudrpc' -I='proto' proto/xudrpc.proto",
      "win32": "grpc_tools_node_protoc --go_out=\"plugins=grpc:test\\simulation\\xudrpc\" -I=\"proto\" proto\\xudrpc.proto"
    },
    "stop": {
      "linux": "./bin/xucli shutdown",
      "darwin": "./bin/xucli shutdown",
      "win32": "node bin\\xucli shutdown"
    }
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ExchangeUnion/xud.git"
  },
  "keywords": [
    "Exchange Union",
    "XU",
    "xud",
    "OpenDEX",
    "OpenDEX Network",
    "bitcoin",
    "litecoin",
    "ethereum",
    "cryptocurrency",
    "lightning",
    "lightning network",
    "connext",
    "connext network",
    "payment channels",
    "atomic swaps",
    "cross-chain",
    "DEX",
    "decentralized exchange"
  ],
  "author": "Daniel McNally <mcnallydp@gmail.com>",
  "contributors": [
    "Moshe Shababo",
    "Balamurali Pandranki <balamurali@live.com> (https://balamurali.me)",
    "michael1011",
    "Karl Ranna <karl@karlranna.com>"
  ],
  "license": "AGPL-3.0",
  "bugs": {
    "url": "https://github.com/ExchangeUnion/xud/issues"
  },
  "homepage": "https://github.com/ExchangeUnion/xud#readme",
  "files": [
    "npm-shrinkwrap.json",
    "bin",
    "dist/**/!(.tsbuildinfo)",
    "tasks",
    ".env",
    "README.md",
    "LICENSE"
  ],
  "dependencies": {
    "@ethersproject/solidity": "5.0.3",
    "@grpc/grpc-js": "^1.2.2",
    "bip39": "3.0.2",
    "body-parser": "^1.19.0",
    "chalk": "^2.4.2",
    "cli-table3": "^0.5.1",
    "colors": "^1.4.0",
    "cross-os": "^1.3.0",
    "distributions-poisson-quantile": "0.0.0",
    "dotenv": "^8.2.0",
    "ethers": "^5.0.24",
    "fastpriorityqueue": "^0.6.3",
    "google-protobuf": "^3.14.0",
    "gulp": "^4.0.2",
    "json-stable-stringify": "^1.0.1",
    "keccak": "^2.1.0",
    "moment": "^2.29.1",
    "node-forge": "^0.10.0",
    "ramda": "0.27.1",
    "rxjs": "^6.6.3",
    "secp256k1": "^3.7.1",
    "semver": "^6.3.0",
    "sequelize": "^6.3.5",
    "socks": "^2.5.1",
    "sqlite3": "^5.0.0",
    "swagger-ui-express": "^4.1.5",
    "toml": "^3.0.0",
    "uuid": "^3.4.0",
    "winston": "^3.3.3",
    "yargs": "^14.2.3"
  },
  "devDependencies": {
    "@types/chai": "^4.2.14",
    "@types/chai-as-promised": "^7.1.3",
    "@types/distributions-poisson-quantile": "0.0.0",
    "@types/dotenv": "^6.1.1",
    "@types/gulp": "^4.0.7",
    "@types/jest": "^26.0.19",
    "@types/json-stable-stringify": "^1.0.32",
    "@types/mocha": "^8.2.0",
    "@types/node": "^14.14.12",
    "@types/node-forge": "^0.8.7",
    "@types/ramda": "0.27.33",
    "@types/secp256k1": "^3.5.0",
    "@types/semver": "^6.2.2",
    "@types/sinon": "^9.0.9",
    "@types/supertest": "^2.0.10",
    "@types/swagger-ui-express": "^3.0.1",
    "@types/uuid": "^3.4.9",
    "@types/validator": "^13.1.1",
    "@types/yargs": "^13.0.11",
    "@typescript-eslint/eslint-plugin": "^4.9.1",
    "@typescript-eslint/parser": "^4.9.0",
    "chai": "^4.2.0",
    "chai-as-promised": "^7.1.1",
    "concurrently": "^5.3.0",
    "conventional-changelog-cli": "^2.1.1",
    "eslint": "^7.14.0",
    "eslint-config-airbnb-typescript": "^12.0.0",
    "eslint-config-prettier": "^7.0.0",
    "eslint-plugin-import": "^2.22.1",
    "eslint-plugin-jest": "^24.1.3",
    "grpc-tools": "^1.10.0",
    "grpc_tools_node_protoc_ts": "^5.1.0",
    "jest": "^26.6.3",
    "mocha": "^8.2.1",
    "nodemon": "^2.0.6",
    "prettier": "2.2.1",
    "proto2slate": "^1.1.0",
    "sinon": "^9.2.2",
    "supertest": "^6.0.1",
    "ts-jest": "^26.4.4",
    "ts-node": "^9.1.1",
    "typedoc": "^0.17.8",
    "typescript": "^3.9.7"
  },
  "engines": {
    "node": ">=14.5.0"
  }
}
