/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.swapresolver.CoinType', null, global);
goog.exportSymbol('proto.swapresolver.ResolveReq', null, global);
goog.exportSymbol('proto.swapresolver.ResolveResp', null, global);
goog.exportSymbol('proto.swapresolver.SuggestDealReq', null, global);
goog.exportSymbol('proto.swapresolver.SuggestDealResp', null, global);
goog.exportSymbol('proto.swapresolver.SwapReq', null, global);
goog.exportSymbol('proto.swapresolver.SwapResp', null, global);
goog.exportSymbol('proto.swapresolver.TakeOrderReq', null, global);
goog.exportSymbol('proto.swapresolver.TakeOrderResp', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swapresolver.ResolveReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.swapresolver.ResolveReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swapresolver.ResolveReq.displayName = 'proto.swapresolver.ResolveReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swapresolver.ResolveReq.prototype.toObject = function(opt_includeInstance) {
  return proto.swapresolver.ResolveReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swapresolver.ResolveReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swapresolver.ResolveReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swapresolver.ResolveReq}
 */
proto.swapresolver.ResolveReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swapresolver.ResolveReq;
  return proto.swapresolver.ResolveReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swapresolver.ResolveReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swapresolver.ResolveReq}
 */
proto.swapresolver.ResolveReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swapresolver.ResolveReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swapresolver.ResolveReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swapresolver.ResolveReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swapresolver.ResolveReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string hash = 1;
 * @return {string}
 */
proto.swapresolver.ResolveReq.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.swapresolver.ResolveReq.prototype.setHash = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swapresolver.ResolveResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.swapresolver.ResolveResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swapresolver.ResolveResp.displayName = 'proto.swapresolver.ResolveResp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swapresolver.ResolveResp.prototype.toObject = function(opt_includeInstance) {
  return proto.swapresolver.ResolveResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swapresolver.ResolveResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swapresolver.ResolveResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    preimage: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swapresolver.ResolveResp}
 */
proto.swapresolver.ResolveResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swapresolver.ResolveResp;
  return proto.swapresolver.ResolveResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swapresolver.ResolveResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swapresolver.ResolveResp}
 */
proto.swapresolver.ResolveResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPreimage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swapresolver.ResolveResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swapresolver.ResolveResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swapresolver.ResolveResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swapresolver.ResolveResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPreimage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string preimage = 1;
 * @return {string}
 */
proto.swapresolver.ResolveResp.prototype.getPreimage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.swapresolver.ResolveResp.prototype.setPreimage = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swapresolver.TakeOrderReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.swapresolver.TakeOrderReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swapresolver.TakeOrderReq.displayName = 'proto.swapresolver.TakeOrderReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swapresolver.TakeOrderReq.prototype.toObject = function(opt_includeInstance) {
  return proto.swapresolver.TakeOrderReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swapresolver.TakeOrderReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swapresolver.TakeOrderReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    orderid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    takerAmount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    takerCoin: jspb.Message.getFieldWithDefault(msg, 3, 0),
    makerAmount: jspb.Message.getFieldWithDefault(msg, 4, 0),
    makerCoin: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swapresolver.TakeOrderReq}
 */
proto.swapresolver.TakeOrderReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swapresolver.TakeOrderReq;
  return proto.swapresolver.TakeOrderReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swapresolver.TakeOrderReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swapresolver.TakeOrderReq}
 */
proto.swapresolver.TakeOrderReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTakerAmount(value);
      break;
    case 3:
      var value = /** @type {!proto.swapresolver.CoinType} */ (reader.readEnum());
      msg.setTakerCoin(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMakerAmount(value);
      break;
    case 5:
      var value = /** @type {!proto.swapresolver.CoinType} */ (reader.readEnum());
      msg.setMakerCoin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swapresolver.TakeOrderReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swapresolver.TakeOrderReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swapresolver.TakeOrderReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swapresolver.TakeOrderReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrderid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTakerAmount();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getTakerCoin();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getMakerAmount();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getMakerCoin();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional string orderid = 1;
 * @return {string}
 */
proto.swapresolver.TakeOrderReq.prototype.getOrderid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.swapresolver.TakeOrderReq.prototype.setOrderid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 taker_amount = 2;
 * @return {number}
 */
proto.swapresolver.TakeOrderReq.prototype.getTakerAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.swapresolver.TakeOrderReq.prototype.setTakerAmount = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional CoinType taker_coin = 3;
 * @return {!proto.swapresolver.CoinType}
 */
proto.swapresolver.TakeOrderReq.prototype.getTakerCoin = function() {
  return /** @type {!proto.swapresolver.CoinType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.swapresolver.CoinType} value */
proto.swapresolver.TakeOrderReq.prototype.setTakerCoin = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int64 maker_amount = 4;
 * @return {number}
 */
proto.swapresolver.TakeOrderReq.prototype.getMakerAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.swapresolver.TakeOrderReq.prototype.setMakerAmount = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional CoinType maker_coin = 5;
 * @return {!proto.swapresolver.CoinType}
 */
proto.swapresolver.TakeOrderReq.prototype.getMakerCoin = function() {
  return /** @type {!proto.swapresolver.CoinType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.swapresolver.CoinType} value */
proto.swapresolver.TakeOrderReq.prototype.setMakerCoin = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swapresolver.TakeOrderResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.swapresolver.TakeOrderResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swapresolver.TakeOrderResp.displayName = 'proto.swapresolver.TakeOrderResp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swapresolver.TakeOrderResp.prototype.toObject = function(opt_includeInstance) {
  return proto.swapresolver.TakeOrderResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swapresolver.TakeOrderResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swapresolver.TakeOrderResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    rPreimage: msg.getRPreimage_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swapresolver.TakeOrderResp}
 */
proto.swapresolver.TakeOrderResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swapresolver.TakeOrderResp;
  return proto.swapresolver.TakeOrderResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swapresolver.TakeOrderResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swapresolver.TakeOrderResp}
 */
proto.swapresolver.TakeOrderResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRPreimage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swapresolver.TakeOrderResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swapresolver.TakeOrderResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swapresolver.TakeOrderResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swapresolver.TakeOrderResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRPreimage_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes r_preimage = 1;
 * @return {!(string|Uint8Array)}
 */
proto.swapresolver.TakeOrderResp.prototype.getRPreimage = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes r_preimage = 1;
 * This is a type-conversion wrapper around `getRPreimage()`
 * @return {string}
 */
proto.swapresolver.TakeOrderResp.prototype.getRPreimage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRPreimage()));
};


/**
 * optional bytes r_preimage = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRPreimage()`
 * @return {!Uint8Array}
 */
proto.swapresolver.TakeOrderResp.prototype.getRPreimage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRPreimage()));
};


/** @param {!(string|Uint8Array)} value */
proto.swapresolver.TakeOrderResp.prototype.setRPreimage = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swapresolver.SuggestDealReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.swapresolver.SuggestDealReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swapresolver.SuggestDealReq.displayName = 'proto.swapresolver.SuggestDealReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swapresolver.SuggestDealReq.prototype.toObject = function(opt_includeInstance) {
  return proto.swapresolver.SuggestDealReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swapresolver.SuggestDealReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swapresolver.SuggestDealReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    orderid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    takerDealId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    takerAmount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    takerCoin: jspb.Message.getFieldWithDefault(msg, 4, 0),
    makerAmount: jspb.Message.getFieldWithDefault(msg, 5, 0),
    makerCoin: jspb.Message.getFieldWithDefault(msg, 6, 0),
    takerPubkey: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swapresolver.SuggestDealReq}
 */
proto.swapresolver.SuggestDealReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swapresolver.SuggestDealReq;
  return proto.swapresolver.SuggestDealReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swapresolver.SuggestDealReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swapresolver.SuggestDealReq}
 */
proto.swapresolver.SuggestDealReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTakerDealId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTakerAmount(value);
      break;
    case 4:
      var value = /** @type {!proto.swapresolver.CoinType} */ (reader.readEnum());
      msg.setTakerCoin(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMakerAmount(value);
      break;
    case 6:
      var value = /** @type {!proto.swapresolver.CoinType} */ (reader.readEnum());
      msg.setMakerCoin(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setTakerPubkey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swapresolver.SuggestDealReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swapresolver.SuggestDealReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swapresolver.SuggestDealReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swapresolver.SuggestDealReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrderid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTakerDealId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTakerAmount();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getTakerCoin();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getMakerAmount();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getMakerCoin();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getTakerPubkey();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string orderid = 1;
 * @return {string}
 */
proto.swapresolver.SuggestDealReq.prototype.getOrderid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.swapresolver.SuggestDealReq.prototype.setOrderid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string taker_deal_id = 2;
 * @return {string}
 */
proto.swapresolver.SuggestDealReq.prototype.getTakerDealId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.swapresolver.SuggestDealReq.prototype.setTakerDealId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 taker_amount = 3;
 * @return {number}
 */
proto.swapresolver.SuggestDealReq.prototype.getTakerAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.swapresolver.SuggestDealReq.prototype.setTakerAmount = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional CoinType taker_coin = 4;
 * @return {!proto.swapresolver.CoinType}
 */
proto.swapresolver.SuggestDealReq.prototype.getTakerCoin = function() {
  return /** @type {!proto.swapresolver.CoinType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.swapresolver.CoinType} value */
proto.swapresolver.SuggestDealReq.prototype.setTakerCoin = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int64 maker_amount = 5;
 * @return {number}
 */
proto.swapresolver.SuggestDealReq.prototype.getMakerAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.swapresolver.SuggestDealReq.prototype.setMakerAmount = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional CoinType maker_coin = 6;
 * @return {!proto.swapresolver.CoinType}
 */
proto.swapresolver.SuggestDealReq.prototype.getMakerCoin = function() {
  return /** @type {!proto.swapresolver.CoinType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.swapresolver.CoinType} value */
proto.swapresolver.SuggestDealReq.prototype.setMakerCoin = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string taker_pubkey = 7;
 * @return {string}
 */
proto.swapresolver.SuggestDealReq.prototype.getTakerPubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.swapresolver.SuggestDealReq.prototype.setTakerPubkey = function(value) {
  jspb.Message.setField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swapresolver.SuggestDealResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.swapresolver.SuggestDealResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swapresolver.SuggestDealResp.displayName = 'proto.swapresolver.SuggestDealResp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swapresolver.SuggestDealResp.prototype.toObject = function(opt_includeInstance) {
  return proto.swapresolver.SuggestDealResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swapresolver.SuggestDealResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swapresolver.SuggestDealResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    orderid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    rHash: msg.getRHash_asB64(),
    makerDealId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    makerPubkey: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swapresolver.SuggestDealResp}
 */
proto.swapresolver.SuggestDealResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swapresolver.SuggestDealResp;
  return proto.swapresolver.SuggestDealResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swapresolver.SuggestDealResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swapresolver.SuggestDealResp}
 */
proto.swapresolver.SuggestDealResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRHash(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMakerDealId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMakerPubkey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swapresolver.SuggestDealResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swapresolver.SuggestDealResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swapresolver.SuggestDealResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swapresolver.SuggestDealResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrderid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getMakerDealId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMakerPubkey();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string orderid = 1;
 * @return {string}
 */
proto.swapresolver.SuggestDealResp.prototype.getOrderid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.swapresolver.SuggestDealResp.prototype.setOrderid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes r_hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.swapresolver.SuggestDealResp.prototype.getRHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes r_hash = 2;
 * This is a type-conversion wrapper around `getRHash()`
 * @return {string}
 */
proto.swapresolver.SuggestDealResp.prototype.getRHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRHash()));
};


/**
 * optional bytes r_hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRHash()`
 * @return {!Uint8Array}
 */
proto.swapresolver.SuggestDealResp.prototype.getRHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.swapresolver.SuggestDealResp.prototype.setRHash = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string maker_deal_id = 3;
 * @return {string}
 */
proto.swapresolver.SuggestDealResp.prototype.getMakerDealId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.swapresolver.SuggestDealResp.prototype.setMakerDealId = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string maker_pubkey = 4;
 * @return {string}
 */
proto.swapresolver.SuggestDealResp.prototype.getMakerPubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.swapresolver.SuggestDealResp.prototype.setMakerPubkey = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swapresolver.SwapReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.swapresolver.SwapReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swapresolver.SwapReq.displayName = 'proto.swapresolver.SwapReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swapresolver.SwapReq.prototype.toObject = function(opt_includeInstance) {
  return proto.swapresolver.SwapReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swapresolver.SwapReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swapresolver.SwapReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    makerDealId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swapresolver.SwapReq}
 */
proto.swapresolver.SwapReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swapresolver.SwapReq;
  return proto.swapresolver.SwapReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swapresolver.SwapReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swapresolver.SwapReq}
 */
proto.swapresolver.SwapReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMakerDealId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swapresolver.SwapReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swapresolver.SwapReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swapresolver.SwapReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swapresolver.SwapReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMakerDealId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string maker_deal_id = 1;
 * @return {string}
 */
proto.swapresolver.SwapReq.prototype.getMakerDealId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.swapresolver.SwapReq.prototype.setMakerDealId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swapresolver.SwapResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.swapresolver.SwapResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swapresolver.SwapResp.displayName = 'proto.swapresolver.SwapResp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swapresolver.SwapResp.prototype.toObject = function(opt_includeInstance) {
  return proto.swapresolver.SwapResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swapresolver.SwapResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swapresolver.SwapResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    rPreimage: msg.getRPreimage_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swapresolver.SwapResp}
 */
proto.swapresolver.SwapResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swapresolver.SwapResp;
  return proto.swapresolver.SwapResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swapresolver.SwapResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swapresolver.SwapResp}
 */
proto.swapresolver.SwapResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRPreimage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swapresolver.SwapResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swapresolver.SwapResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swapresolver.SwapResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swapresolver.SwapResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRPreimage_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes r_preimage = 1;
 * @return {!(string|Uint8Array)}
 */
proto.swapresolver.SwapResp.prototype.getRPreimage = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes r_preimage = 1;
 * This is a type-conversion wrapper around `getRPreimage()`
 * @return {string}
 */
proto.swapresolver.SwapResp.prototype.getRPreimage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRPreimage()));
};


/**
 * optional bytes r_preimage = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRPreimage()`
 * @return {!Uint8Array}
 */
proto.swapresolver.SwapResp.prototype.getRPreimage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRPreimage()));
};


/** @param {!(string|Uint8Array)} value */
proto.swapresolver.SwapResp.prototype.setRPreimage = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.swapresolver.CoinType = {
  BTC: 0,
  LTC: 1
};

goog.object.extend(exports, proto.swapresolver);
