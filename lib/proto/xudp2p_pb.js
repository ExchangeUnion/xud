/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.xudp2p.Address', null, global);
goog.exportSymbol('proto.xudp2p.DisconnectingPacket', null, global);
goog.exportSymbol('proto.xudp2p.GetNodesPacket', null, global);
goog.exportSymbol('proto.xudp2p.GetOrdersPacket', null, global);
goog.exportSymbol('proto.xudp2p.Header', null, global);
goog.exportSymbol('proto.xudp2p.HelloPacket', null, global);
goog.exportSymbol('proto.xudp2p.Node', null, global);
goog.exportSymbol('proto.xudp2p.NodesPacket', null, global);
goog.exportSymbol('proto.xudp2p.Order', null, global);
goog.exportSymbol('proto.xudp2p.OrderInvalidationPacket', null, global);
goog.exportSymbol('proto.xudp2p.OrderPacket', null, global);
goog.exportSymbol('proto.xudp2p.OrdersPacket', null, global);
goog.exportSymbol('proto.xudp2p.PingPacket', null, global);
goog.exportSymbol('proto.xudp2p.PongPacket', null, global);
goog.exportSymbol('proto.xudp2p.SwapAcceptedPacket', null, global);
goog.exportSymbol('proto.xudp2p.SwapCompletePacket', null, global);
goog.exportSymbol('proto.xudp2p.SwapFailedPacket', null, global);
goog.exportSymbol('proto.xudp2p.SwapRequestPacket', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xudp2p.Header = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xudp2p.Header, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xudp2p.Header.displayName = 'proto.xudp2p.Header';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xudp2p.Header.prototype.toObject = function(opt_includeInstance) {
  return proto.xudp2p.Header.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xudp2p.Header} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xudp2p.Header.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    reqid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    hash: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xudp2p.Header}
 */
proto.xudp2p.Header.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xudp2p.Header;
  return proto.xudp2p.Header.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xudp2p.Header} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xudp2p.Header}
 */
proto.xudp2p.Header.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReqid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xudp2p.Header.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xudp2p.Header.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xudp2p.Header} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xudp2p.Header.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getReqid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.xudp2p.Header.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xudp2p.Header.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string reqId = 2;
 * @return {string}
 */
proto.xudp2p.Header.prototype.getReqid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xudp2p.Header.prototype.setReqid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string hash = 3;
 * @return {string}
 */
proto.xudp2p.Header.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.xudp2p.Header.prototype.setHash = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xudp2p.Address = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xudp2p.Address, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xudp2p.Address.displayName = 'proto.xudp2p.Address';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xudp2p.Address.prototype.toObject = function(opt_includeInstance) {
  return proto.xudp2p.Address.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xudp2p.Address} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xudp2p.Address.toObject = function(includeInstance, msg) {
  var f, obj = {
    host: jspb.Message.getFieldWithDefault(msg, 1, ""),
    port: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xudp2p.Address}
 */
proto.xudp2p.Address.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xudp2p.Address;
  return proto.xudp2p.Address.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xudp2p.Address} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xudp2p.Address}
 */
proto.xudp2p.Address.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHost(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xudp2p.Address.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xudp2p.Address.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xudp2p.Address} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xudp2p.Address.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHost();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string host = 1;
 * @return {string}
 */
proto.xudp2p.Address.prototype.getHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xudp2p.Address.prototype.setHost = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 port = 2;
 * @return {number}
 */
proto.xudp2p.Address.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.xudp2p.Address.prototype.setPort = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xudp2p.Order = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xudp2p.Order, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xudp2p.Order.displayName = 'proto.xudp2p.Order';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xudp2p.Order.prototype.toObject = function(opt_includeInstance) {
  return proto.xudp2p.Order.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xudp2p.Order} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xudp2p.Order.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 2, ""),
    pairid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    price: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    quantity: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    isbuy: jspb.Message.getFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xudp2p.Order}
 */
proto.xudp2p.Order.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xudp2p.Order;
  return proto.xudp2p.Order.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xudp2p.Order} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xudp2p.Order}
 */
proto.xudp2p.Order.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPairid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrice(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setQuantity(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsbuy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xudp2p.Order.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xudp2p.Order.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xudp2p.Order} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xudp2p.Order.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPairid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getQuantity();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getIsbuy();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional string id = 2;
 * @return {string}
 */
proto.xudp2p.Order.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xudp2p.Order.prototype.setId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string pairId = 3;
 * @return {string}
 */
proto.xudp2p.Order.prototype.getPairid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.xudp2p.Order.prototype.setPairid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional double price = 4;
 * @return {number}
 */
proto.xudp2p.Order.prototype.getPrice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.xudp2p.Order.prototype.setPrice = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional double quantity = 5;
 * @return {number}
 */
proto.xudp2p.Order.prototype.getQuantity = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.xudp2p.Order.prototype.setQuantity = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional bool isBuy = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xudp2p.Order.prototype.getIsbuy = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.xudp2p.Order.prototype.setIsbuy = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xudp2p.Node = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xudp2p.Node.repeatedFields_, null);
};
goog.inherits(proto.xudp2p.Node, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xudp2p.Node.displayName = 'proto.xudp2p.Node';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xudp2p.Node.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xudp2p.Node.prototype.toObject = function(opt_includeInstance) {
  return proto.xudp2p.Node.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xudp2p.Node} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xudp2p.Node.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodepubkey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    addressesList: jspb.Message.toObjectList(msg.getAddressesList(),
    proto.xudp2p.Address.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xudp2p.Node}
 */
proto.xudp2p.Node.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xudp2p.Node;
  return proto.xudp2p.Node.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xudp2p.Node} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xudp2p.Node}
 */
proto.xudp2p.Node.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodepubkey(value);
      break;
    case 2:
      var value = new proto.xudp2p.Address;
      reader.readMessage(value,proto.xudp2p.Address.deserializeBinaryFromReader);
      msg.addAddresses(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xudp2p.Node.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xudp2p.Node.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xudp2p.Node} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xudp2p.Node.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodepubkey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddressesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.xudp2p.Address.serializeBinaryToWriter
    );
  }
};


/**
 * optional string nodePubKey = 1;
 * @return {string}
 */
proto.xudp2p.Node.prototype.getNodepubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xudp2p.Node.prototype.setNodepubkey = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated Address addresses = 2;
 * @return {!Array.<!proto.xudp2p.Address>}
 */
proto.xudp2p.Node.prototype.getAddressesList = function() {
  return /** @type{!Array.<!proto.xudp2p.Address>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xudp2p.Address, 2));
};


/** @param {!Array.<!proto.xudp2p.Address>} value */
proto.xudp2p.Node.prototype.setAddressesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.xudp2p.Address=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xudp2p.Address}
 */
proto.xudp2p.Node.prototype.addAddresses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.xudp2p.Address, opt_index);
};


proto.xudp2p.Node.prototype.clearAddressesList = function() {
  this.setAddressesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xudp2p.PingPacket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xudp2p.PingPacket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xudp2p.PingPacket.displayName = 'proto.xudp2p.PingPacket';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xudp2p.PingPacket.prototype.toObject = function(opt_includeInstance) {
  return proto.xudp2p.PingPacket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xudp2p.PingPacket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xudp2p.PingPacket.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.xudp2p.Header.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xudp2p.PingPacket}
 */
proto.xudp2p.PingPacket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xudp2p.PingPacket;
  return proto.xudp2p.PingPacket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xudp2p.PingPacket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xudp2p.PingPacket}
 */
proto.xudp2p.PingPacket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xudp2p.Header;
      reader.readMessage(value,proto.xudp2p.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xudp2p.PingPacket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xudp2p.PingPacket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xudp2p.PingPacket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xudp2p.PingPacket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.xudp2p.Header.serializeBinaryToWriter
    );
  }
};


/**
 * optional Header header = 1;
 * @return {?proto.xudp2p.Header}
 */
proto.xudp2p.PingPacket.prototype.getHeader = function() {
  return /** @type{?proto.xudp2p.Header} */ (
    jspb.Message.getWrapperField(this, proto.xudp2p.Header, 1));
};


/** @param {?proto.xudp2p.Header|undefined} value */
proto.xudp2p.PingPacket.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.xudp2p.PingPacket.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xudp2p.PingPacket.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xudp2p.PongPacket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xudp2p.PongPacket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xudp2p.PongPacket.displayName = 'proto.xudp2p.PongPacket';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xudp2p.PongPacket.prototype.toObject = function(opt_includeInstance) {
  return proto.xudp2p.PongPacket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xudp2p.PongPacket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xudp2p.PongPacket.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.xudp2p.Header.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xudp2p.PongPacket}
 */
proto.xudp2p.PongPacket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xudp2p.PongPacket;
  return proto.xudp2p.PongPacket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xudp2p.PongPacket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xudp2p.PongPacket}
 */
proto.xudp2p.PongPacket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xudp2p.Header;
      reader.readMessage(value,proto.xudp2p.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xudp2p.PongPacket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xudp2p.PongPacket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xudp2p.PongPacket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xudp2p.PongPacket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.xudp2p.Header.serializeBinaryToWriter
    );
  }
};


/**
 * optional Header header = 1;
 * @return {?proto.xudp2p.Header}
 */
proto.xudp2p.PongPacket.prototype.getHeader = function() {
  return /** @type{?proto.xudp2p.Header} */ (
    jspb.Message.getWrapperField(this, proto.xudp2p.Header, 1));
};


/** @param {?proto.xudp2p.Header|undefined} value */
proto.xudp2p.PongPacket.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.xudp2p.PongPacket.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xudp2p.PongPacket.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xudp2p.OrderPacket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xudp2p.OrderPacket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xudp2p.OrderPacket.displayName = 'proto.xudp2p.OrderPacket';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xudp2p.OrderPacket.prototype.toObject = function(opt_includeInstance) {
  return proto.xudp2p.OrderPacket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xudp2p.OrderPacket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xudp2p.OrderPacket.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.xudp2p.Header.toObject(includeInstance, f),
    id: jspb.Message.getFieldWithDefault(msg, 2, ""),
    pairid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    price: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    quantity: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    isbuy: jspb.Message.getFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xudp2p.OrderPacket}
 */
proto.xudp2p.OrderPacket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xudp2p.OrderPacket;
  return proto.xudp2p.OrderPacket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xudp2p.OrderPacket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xudp2p.OrderPacket}
 */
proto.xudp2p.OrderPacket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xudp2p.Header;
      reader.readMessage(value,proto.xudp2p.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPairid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrice(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setQuantity(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsbuy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xudp2p.OrderPacket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xudp2p.OrderPacket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xudp2p.OrderPacket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xudp2p.OrderPacket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.xudp2p.Header.serializeBinaryToWriter
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPairid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getQuantity();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getIsbuy();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional Header header = 1;
 * @return {?proto.xudp2p.Header}
 */
proto.xudp2p.OrderPacket.prototype.getHeader = function() {
  return /** @type{?proto.xudp2p.Header} */ (
    jspb.Message.getWrapperField(this, proto.xudp2p.Header, 1));
};


/** @param {?proto.xudp2p.Header|undefined} value */
proto.xudp2p.OrderPacket.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.xudp2p.OrderPacket.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xudp2p.OrderPacket.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string id = 2;
 * @return {string}
 */
proto.xudp2p.OrderPacket.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xudp2p.OrderPacket.prototype.setId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string pairId = 3;
 * @return {string}
 */
proto.xudp2p.OrderPacket.prototype.getPairid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.xudp2p.OrderPacket.prototype.setPairid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional double price = 4;
 * @return {number}
 */
proto.xudp2p.OrderPacket.prototype.getPrice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.xudp2p.OrderPacket.prototype.setPrice = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional double quantity = 5;
 * @return {number}
 */
proto.xudp2p.OrderPacket.prototype.getQuantity = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.xudp2p.OrderPacket.prototype.setQuantity = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional bool isBuy = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xudp2p.OrderPacket.prototype.getIsbuy = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.xudp2p.OrderPacket.prototype.setIsbuy = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xudp2p.OrderInvalidationPacket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xudp2p.OrderInvalidationPacket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xudp2p.OrderInvalidationPacket.displayName = 'proto.xudp2p.OrderInvalidationPacket';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xudp2p.OrderInvalidationPacket.prototype.toObject = function(opt_includeInstance) {
  return proto.xudp2p.OrderInvalidationPacket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xudp2p.OrderInvalidationPacket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xudp2p.OrderInvalidationPacket.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.xudp2p.Header.toObject(includeInstance, f),
    id: jspb.Message.getFieldWithDefault(msg, 2, ""),
    pairid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    quantity: +jspb.Message.getFieldWithDefault(msg, 5, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xudp2p.OrderInvalidationPacket}
 */
proto.xudp2p.OrderInvalidationPacket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xudp2p.OrderInvalidationPacket;
  return proto.xudp2p.OrderInvalidationPacket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xudp2p.OrderInvalidationPacket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xudp2p.OrderInvalidationPacket}
 */
proto.xudp2p.OrderInvalidationPacket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xudp2p.Header;
      reader.readMessage(value,proto.xudp2p.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPairid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setQuantity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xudp2p.OrderInvalidationPacket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xudp2p.OrderInvalidationPacket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xudp2p.OrderInvalidationPacket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xudp2p.OrderInvalidationPacket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.xudp2p.Header.serializeBinaryToWriter
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPairid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getQuantity();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
};


/**
 * optional Header header = 1;
 * @return {?proto.xudp2p.Header}
 */
proto.xudp2p.OrderInvalidationPacket.prototype.getHeader = function() {
  return /** @type{?proto.xudp2p.Header} */ (
    jspb.Message.getWrapperField(this, proto.xudp2p.Header, 1));
};


/** @param {?proto.xudp2p.Header|undefined} value */
proto.xudp2p.OrderInvalidationPacket.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.xudp2p.OrderInvalidationPacket.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xudp2p.OrderInvalidationPacket.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string id = 2;
 * @return {string}
 */
proto.xudp2p.OrderInvalidationPacket.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xudp2p.OrderInvalidationPacket.prototype.setId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string pairId = 3;
 * @return {string}
 */
proto.xudp2p.OrderInvalidationPacket.prototype.getPairid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.xudp2p.OrderInvalidationPacket.prototype.setPairid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional double quantity = 5;
 * @return {number}
 */
proto.xudp2p.OrderInvalidationPacket.prototype.getQuantity = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.xudp2p.OrderInvalidationPacket.prototype.setQuantity = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xudp2p.GetOrdersPacket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xudp2p.GetOrdersPacket.repeatedFields_, null);
};
goog.inherits(proto.xudp2p.GetOrdersPacket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xudp2p.GetOrdersPacket.displayName = 'proto.xudp2p.GetOrdersPacket';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xudp2p.GetOrdersPacket.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xudp2p.GetOrdersPacket.prototype.toObject = function(opt_includeInstance) {
  return proto.xudp2p.GetOrdersPacket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xudp2p.GetOrdersPacket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xudp2p.GetOrdersPacket.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.xudp2p.Header.toObject(includeInstance, f),
    pairidsList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xudp2p.GetOrdersPacket}
 */
proto.xudp2p.GetOrdersPacket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xudp2p.GetOrdersPacket;
  return proto.xudp2p.GetOrdersPacket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xudp2p.GetOrdersPacket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xudp2p.GetOrdersPacket}
 */
proto.xudp2p.GetOrdersPacket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xudp2p.Header;
      reader.readMessage(value,proto.xudp2p.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addPairids(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xudp2p.GetOrdersPacket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xudp2p.GetOrdersPacket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xudp2p.GetOrdersPacket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xudp2p.GetOrdersPacket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.xudp2p.Header.serializeBinaryToWriter
    );
  }
  f = message.getPairidsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional Header header = 1;
 * @return {?proto.xudp2p.Header}
 */
proto.xudp2p.GetOrdersPacket.prototype.getHeader = function() {
  return /** @type{?proto.xudp2p.Header} */ (
    jspb.Message.getWrapperField(this, proto.xudp2p.Header, 1));
};


/** @param {?proto.xudp2p.Header|undefined} value */
proto.xudp2p.GetOrdersPacket.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.xudp2p.GetOrdersPacket.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xudp2p.GetOrdersPacket.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string pairIds = 2;
 * @return {!Array.<string>}
 */
proto.xudp2p.GetOrdersPacket.prototype.getPairidsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<string>} value */
proto.xudp2p.GetOrdersPacket.prototype.setPairidsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.xudp2p.GetOrdersPacket.prototype.addPairids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.xudp2p.GetOrdersPacket.prototype.clearPairidsList = function() {
  this.setPairidsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xudp2p.OrdersPacket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xudp2p.OrdersPacket.repeatedFields_, null);
};
goog.inherits(proto.xudp2p.OrdersPacket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xudp2p.OrdersPacket.displayName = 'proto.xudp2p.OrdersPacket';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xudp2p.OrdersPacket.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xudp2p.OrdersPacket.prototype.toObject = function(opt_includeInstance) {
  return proto.xudp2p.OrdersPacket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xudp2p.OrdersPacket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xudp2p.OrdersPacket.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.xudp2p.Header.toObject(includeInstance, f),
    ordersList: jspb.Message.toObjectList(msg.getOrdersList(),
    proto.xudp2p.Order.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xudp2p.OrdersPacket}
 */
proto.xudp2p.OrdersPacket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xudp2p.OrdersPacket;
  return proto.xudp2p.OrdersPacket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xudp2p.OrdersPacket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xudp2p.OrdersPacket}
 */
proto.xudp2p.OrdersPacket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xudp2p.Header;
      reader.readMessage(value,proto.xudp2p.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.xudp2p.Order;
      reader.readMessage(value,proto.xudp2p.Order.deserializeBinaryFromReader);
      msg.addOrders(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xudp2p.OrdersPacket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xudp2p.OrdersPacket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xudp2p.OrdersPacket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xudp2p.OrdersPacket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.xudp2p.Header.serializeBinaryToWriter
    );
  }
  f = message.getOrdersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.xudp2p.Order.serializeBinaryToWriter
    );
  }
};


/**
 * optional Header header = 1;
 * @return {?proto.xudp2p.Header}
 */
proto.xudp2p.OrdersPacket.prototype.getHeader = function() {
  return /** @type{?proto.xudp2p.Header} */ (
    jspb.Message.getWrapperField(this, proto.xudp2p.Header, 1));
};


/** @param {?proto.xudp2p.Header|undefined} value */
proto.xudp2p.OrdersPacket.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.xudp2p.OrdersPacket.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xudp2p.OrdersPacket.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Order orders = 2;
 * @return {!Array.<!proto.xudp2p.Order>}
 */
proto.xudp2p.OrdersPacket.prototype.getOrdersList = function() {
  return /** @type{!Array.<!proto.xudp2p.Order>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xudp2p.Order, 2));
};


/** @param {!Array.<!proto.xudp2p.Order>} value */
proto.xudp2p.OrdersPacket.prototype.setOrdersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.xudp2p.Order=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xudp2p.Order}
 */
proto.xudp2p.OrdersPacket.prototype.addOrders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.xudp2p.Order, opt_index);
};


proto.xudp2p.OrdersPacket.prototype.clearOrdersList = function() {
  this.setOrdersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xudp2p.HelloPacket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xudp2p.HelloPacket.repeatedFields_, null);
};
goog.inherits(proto.xudp2p.HelloPacket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xudp2p.HelloPacket.displayName = 'proto.xudp2p.HelloPacket';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xudp2p.HelloPacket.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xudp2p.HelloPacket.prototype.toObject = function(opt_includeInstance) {
  return proto.xudp2p.HelloPacket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xudp2p.HelloPacket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xudp2p.HelloPacket.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.xudp2p.Header.toObject(includeInstance, f),
    version: jspb.Message.getFieldWithDefault(msg, 2, ""),
    nodepubkey: jspb.Message.getFieldWithDefault(msg, 3, ""),
    addressesList: jspb.Message.toObjectList(msg.getAddressesList(),
    proto.xudp2p.Address.toObject, includeInstance),
    pairsList: jspb.Message.getRepeatedField(msg, 5),
    raidenaddress: jspb.Message.getFieldWithDefault(msg, 6, ""),
    lndbtcpubkey: jspb.Message.getFieldWithDefault(msg, 7, ""),
    lndltcpubkey: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xudp2p.HelloPacket}
 */
proto.xudp2p.HelloPacket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xudp2p.HelloPacket;
  return proto.xudp2p.HelloPacket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xudp2p.HelloPacket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xudp2p.HelloPacket}
 */
proto.xudp2p.HelloPacket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xudp2p.Header;
      reader.readMessage(value,proto.xudp2p.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodepubkey(value);
      break;
    case 4:
      var value = new proto.xudp2p.Address;
      reader.readMessage(value,proto.xudp2p.Address.deserializeBinaryFromReader);
      msg.addAddresses(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addPairs(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setRaidenaddress(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setLndbtcpubkey(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setLndltcpubkey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xudp2p.HelloPacket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xudp2p.HelloPacket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xudp2p.HelloPacket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xudp2p.HelloPacket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.xudp2p.Header.serializeBinaryToWriter
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNodepubkey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAddressesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.xudp2p.Address.serializeBinaryToWriter
    );
  }
  f = message.getPairsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getRaidenaddress();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getLndbtcpubkey();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getLndltcpubkey();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional Header header = 1;
 * @return {?proto.xudp2p.Header}
 */
proto.xudp2p.HelloPacket.prototype.getHeader = function() {
  return /** @type{?proto.xudp2p.Header} */ (
    jspb.Message.getWrapperField(this, proto.xudp2p.Header, 1));
};


/** @param {?proto.xudp2p.Header|undefined} value */
proto.xudp2p.HelloPacket.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.xudp2p.HelloPacket.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xudp2p.HelloPacket.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string version = 2;
 * @return {string}
 */
proto.xudp2p.HelloPacket.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xudp2p.HelloPacket.prototype.setVersion = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string nodePubKey = 3;
 * @return {string}
 */
proto.xudp2p.HelloPacket.prototype.getNodepubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.xudp2p.HelloPacket.prototype.setNodepubkey = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * repeated Address addresses = 4;
 * @return {!Array.<!proto.xudp2p.Address>}
 */
proto.xudp2p.HelloPacket.prototype.getAddressesList = function() {
  return /** @type{!Array.<!proto.xudp2p.Address>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xudp2p.Address, 4));
};


/** @param {!Array.<!proto.xudp2p.Address>} value */
proto.xudp2p.HelloPacket.prototype.setAddressesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.xudp2p.Address=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xudp2p.Address}
 */
proto.xudp2p.HelloPacket.prototype.addAddresses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.xudp2p.Address, opt_index);
};


proto.xudp2p.HelloPacket.prototype.clearAddressesList = function() {
  this.setAddressesList([]);
};


/**
 * repeated string pairs = 5;
 * @return {!Array.<string>}
 */
proto.xudp2p.HelloPacket.prototype.getPairsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array.<string>} value */
proto.xudp2p.HelloPacket.prototype.setPairsList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.xudp2p.HelloPacket.prototype.addPairs = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.xudp2p.HelloPacket.prototype.clearPairsList = function() {
  this.setPairsList([]);
};


/**
 * optional string raidenAddress = 6;
 * @return {string}
 */
proto.xudp2p.HelloPacket.prototype.getRaidenaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.xudp2p.HelloPacket.prototype.setRaidenaddress = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string lndBtcPubKey = 7;
 * @return {string}
 */
proto.xudp2p.HelloPacket.prototype.getLndbtcpubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.xudp2p.HelloPacket.prototype.setLndbtcpubkey = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string lndLtcPubKey = 8;
 * @return {string}
 */
proto.xudp2p.HelloPacket.prototype.getLndltcpubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.xudp2p.HelloPacket.prototype.setLndltcpubkey = function(value) {
  jspb.Message.setField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xudp2p.DisconnectingPacket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xudp2p.DisconnectingPacket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xudp2p.DisconnectingPacket.displayName = 'proto.xudp2p.DisconnectingPacket';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xudp2p.DisconnectingPacket.prototype.toObject = function(opt_includeInstance) {
  return proto.xudp2p.DisconnectingPacket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xudp2p.DisconnectingPacket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xudp2p.DisconnectingPacket.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.xudp2p.Header.toObject(includeInstance, f),
    reason: jspb.Message.getFieldWithDefault(msg, 2, 0),
    payload: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xudp2p.DisconnectingPacket}
 */
proto.xudp2p.DisconnectingPacket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xudp2p.DisconnectingPacket;
  return proto.xudp2p.DisconnectingPacket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xudp2p.DisconnectingPacket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xudp2p.DisconnectingPacket}
 */
proto.xudp2p.DisconnectingPacket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xudp2p.Header;
      reader.readMessage(value,proto.xudp2p.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setReason(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xudp2p.DisconnectingPacket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xudp2p.DisconnectingPacket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xudp2p.DisconnectingPacket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xudp2p.DisconnectingPacket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.xudp2p.Header.serializeBinaryToWriter
    );
  }
  f = message.getReason();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPayload();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional Header header = 1;
 * @return {?proto.xudp2p.Header}
 */
proto.xudp2p.DisconnectingPacket.prototype.getHeader = function() {
  return /** @type{?proto.xudp2p.Header} */ (
    jspb.Message.getWrapperField(this, proto.xudp2p.Header, 1));
};


/** @param {?proto.xudp2p.Header|undefined} value */
proto.xudp2p.DisconnectingPacket.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.xudp2p.DisconnectingPacket.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xudp2p.DisconnectingPacket.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 reason = 2;
 * @return {number}
 */
proto.xudp2p.DisconnectingPacket.prototype.getReason = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.xudp2p.DisconnectingPacket.prototype.setReason = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string payload = 3;
 * @return {string}
 */
proto.xudp2p.DisconnectingPacket.prototype.getPayload = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.xudp2p.DisconnectingPacket.prototype.setPayload = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xudp2p.GetNodesPacket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xudp2p.GetNodesPacket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xudp2p.GetNodesPacket.displayName = 'proto.xudp2p.GetNodesPacket';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xudp2p.GetNodesPacket.prototype.toObject = function(opt_includeInstance) {
  return proto.xudp2p.GetNodesPacket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xudp2p.GetNodesPacket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xudp2p.GetNodesPacket.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.xudp2p.Header.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xudp2p.GetNodesPacket}
 */
proto.xudp2p.GetNodesPacket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xudp2p.GetNodesPacket;
  return proto.xudp2p.GetNodesPacket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xudp2p.GetNodesPacket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xudp2p.GetNodesPacket}
 */
proto.xudp2p.GetNodesPacket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xudp2p.Header;
      reader.readMessage(value,proto.xudp2p.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xudp2p.GetNodesPacket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xudp2p.GetNodesPacket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xudp2p.GetNodesPacket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xudp2p.GetNodesPacket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.xudp2p.Header.serializeBinaryToWriter
    );
  }
};


/**
 * optional Header header = 1;
 * @return {?proto.xudp2p.Header}
 */
proto.xudp2p.GetNodesPacket.prototype.getHeader = function() {
  return /** @type{?proto.xudp2p.Header} */ (
    jspb.Message.getWrapperField(this, proto.xudp2p.Header, 1));
};


/** @param {?proto.xudp2p.Header|undefined} value */
proto.xudp2p.GetNodesPacket.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.xudp2p.GetNodesPacket.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xudp2p.GetNodesPacket.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xudp2p.NodesPacket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xudp2p.NodesPacket.repeatedFields_, null);
};
goog.inherits(proto.xudp2p.NodesPacket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xudp2p.NodesPacket.displayName = 'proto.xudp2p.NodesPacket';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xudp2p.NodesPacket.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xudp2p.NodesPacket.prototype.toObject = function(opt_includeInstance) {
  return proto.xudp2p.NodesPacket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xudp2p.NodesPacket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xudp2p.NodesPacket.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.xudp2p.Header.toObject(includeInstance, f),
    nodesList: jspb.Message.toObjectList(msg.getNodesList(),
    proto.xudp2p.Node.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xudp2p.NodesPacket}
 */
proto.xudp2p.NodesPacket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xudp2p.NodesPacket;
  return proto.xudp2p.NodesPacket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xudp2p.NodesPacket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xudp2p.NodesPacket}
 */
proto.xudp2p.NodesPacket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xudp2p.Header;
      reader.readMessage(value,proto.xudp2p.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.xudp2p.Node;
      reader.readMessage(value,proto.xudp2p.Node.deserializeBinaryFromReader);
      msg.addNodes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xudp2p.NodesPacket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xudp2p.NodesPacket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xudp2p.NodesPacket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xudp2p.NodesPacket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.xudp2p.Header.serializeBinaryToWriter
    );
  }
  f = message.getNodesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.xudp2p.Node.serializeBinaryToWriter
    );
  }
};


/**
 * optional Header header = 1;
 * @return {?proto.xudp2p.Header}
 */
proto.xudp2p.NodesPacket.prototype.getHeader = function() {
  return /** @type{?proto.xudp2p.Header} */ (
    jspb.Message.getWrapperField(this, proto.xudp2p.Header, 1));
};


/** @param {?proto.xudp2p.Header|undefined} value */
proto.xudp2p.NodesPacket.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.xudp2p.NodesPacket.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xudp2p.NodesPacket.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Node nodes = 2;
 * @return {!Array.<!proto.xudp2p.Node>}
 */
proto.xudp2p.NodesPacket.prototype.getNodesList = function() {
  return /** @type{!Array.<!proto.xudp2p.Node>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xudp2p.Node, 2));
};


/** @param {!Array.<!proto.xudp2p.Node>} value */
proto.xudp2p.NodesPacket.prototype.setNodesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.xudp2p.Node=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xudp2p.Node}
 */
proto.xudp2p.NodesPacket.prototype.addNodes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.xudp2p.Node, opt_index);
};


proto.xudp2p.NodesPacket.prototype.clearNodesList = function() {
  this.setNodesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xudp2p.SwapRequestPacket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xudp2p.SwapRequestPacket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xudp2p.SwapRequestPacket.displayName = 'proto.xudp2p.SwapRequestPacket';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xudp2p.SwapRequestPacket.prototype.toObject = function(opt_includeInstance) {
  return proto.xudp2p.SwapRequestPacket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xudp2p.SwapRequestPacket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xudp2p.SwapRequestPacket.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.xudp2p.Header.toObject(includeInstance, f),
    proposedquantity: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    pairid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    orderid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    rhash: jspb.Message.getFieldWithDefault(msg, 5, ""),
    takercltvdelta: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xudp2p.SwapRequestPacket}
 */
proto.xudp2p.SwapRequestPacket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xudp2p.SwapRequestPacket;
  return proto.xudp2p.SwapRequestPacket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xudp2p.SwapRequestPacket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xudp2p.SwapRequestPacket}
 */
proto.xudp2p.SwapRequestPacket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xudp2p.Header;
      reader.readMessage(value,proto.xudp2p.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setProposedquantity(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPairid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setRhash(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTakercltvdelta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xudp2p.SwapRequestPacket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xudp2p.SwapRequestPacket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xudp2p.SwapRequestPacket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xudp2p.SwapRequestPacket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.xudp2p.Header.serializeBinaryToWriter
    );
  }
  f = message.getProposedquantity();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getPairid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOrderid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getRhash();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTakercltvdelta();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * optional Header header = 1;
 * @return {?proto.xudp2p.Header}
 */
proto.xudp2p.SwapRequestPacket.prototype.getHeader = function() {
  return /** @type{?proto.xudp2p.Header} */ (
    jspb.Message.getWrapperField(this, proto.xudp2p.Header, 1));
};


/** @param {?proto.xudp2p.Header|undefined} value */
proto.xudp2p.SwapRequestPacket.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.xudp2p.SwapRequestPacket.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xudp2p.SwapRequestPacket.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double proposedQuantity = 2;
 * @return {number}
 */
proto.xudp2p.SwapRequestPacket.prototype.getProposedquantity = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.xudp2p.SwapRequestPacket.prototype.setProposedquantity = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string pairId = 3;
 * @return {string}
 */
proto.xudp2p.SwapRequestPacket.prototype.getPairid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.xudp2p.SwapRequestPacket.prototype.setPairid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string orderId = 4;
 * @return {string}
 */
proto.xudp2p.SwapRequestPacket.prototype.getOrderid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.xudp2p.SwapRequestPacket.prototype.setOrderid = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string rHash = 5;
 * @return {string}
 */
proto.xudp2p.SwapRequestPacket.prototype.getRhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.xudp2p.SwapRequestPacket.prototype.setRhash = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int32 takerCltvDelta = 6;
 * @return {number}
 */
proto.xudp2p.SwapRequestPacket.prototype.getTakercltvdelta = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.xudp2p.SwapRequestPacket.prototype.setTakercltvdelta = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xudp2p.SwapAcceptedPacket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xudp2p.SwapAcceptedPacket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xudp2p.SwapAcceptedPacket.displayName = 'proto.xudp2p.SwapAcceptedPacket';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xudp2p.SwapAcceptedPacket.prototype.toObject = function(opt_includeInstance) {
  return proto.xudp2p.SwapAcceptedPacket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xudp2p.SwapAcceptedPacket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xudp2p.SwapAcceptedPacket.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.xudp2p.Header.toObject(includeInstance, f),
    rhash: jspb.Message.getFieldWithDefault(msg, 2, ""),
    quantity: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    makercltvdelta: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xudp2p.SwapAcceptedPacket}
 */
proto.xudp2p.SwapAcceptedPacket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xudp2p.SwapAcceptedPacket;
  return proto.xudp2p.SwapAcceptedPacket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xudp2p.SwapAcceptedPacket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xudp2p.SwapAcceptedPacket}
 */
proto.xudp2p.SwapAcceptedPacket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xudp2p.Header;
      reader.readMessage(value,proto.xudp2p.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRhash(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setQuantity(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMakercltvdelta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xudp2p.SwapAcceptedPacket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xudp2p.SwapAcceptedPacket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xudp2p.SwapAcceptedPacket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xudp2p.SwapAcceptedPacket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.xudp2p.Header.serializeBinaryToWriter
    );
  }
  f = message.getRhash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getQuantity();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getMakercltvdelta();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional Header header = 1;
 * @return {?proto.xudp2p.Header}
 */
proto.xudp2p.SwapAcceptedPacket.prototype.getHeader = function() {
  return /** @type{?proto.xudp2p.Header} */ (
    jspb.Message.getWrapperField(this, proto.xudp2p.Header, 1));
};


/** @param {?proto.xudp2p.Header|undefined} value */
proto.xudp2p.SwapAcceptedPacket.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.xudp2p.SwapAcceptedPacket.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xudp2p.SwapAcceptedPacket.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string rHash = 2;
 * @return {string}
 */
proto.xudp2p.SwapAcceptedPacket.prototype.getRhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xudp2p.SwapAcceptedPacket.prototype.setRhash = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional double quantity = 3;
 * @return {number}
 */
proto.xudp2p.SwapAcceptedPacket.prototype.getQuantity = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.xudp2p.SwapAcceptedPacket.prototype.setQuantity = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 makerCltvDelta = 4;
 * @return {number}
 */
proto.xudp2p.SwapAcceptedPacket.prototype.getMakercltvdelta = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.xudp2p.SwapAcceptedPacket.prototype.setMakercltvdelta = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xudp2p.SwapCompletePacket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xudp2p.SwapCompletePacket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xudp2p.SwapCompletePacket.displayName = 'proto.xudp2p.SwapCompletePacket';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xudp2p.SwapCompletePacket.prototype.toObject = function(opt_includeInstance) {
  return proto.xudp2p.SwapCompletePacket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xudp2p.SwapCompletePacket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xudp2p.SwapCompletePacket.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.xudp2p.Header.toObject(includeInstance, f),
    rhash: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xudp2p.SwapCompletePacket}
 */
proto.xudp2p.SwapCompletePacket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xudp2p.SwapCompletePacket;
  return proto.xudp2p.SwapCompletePacket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xudp2p.SwapCompletePacket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xudp2p.SwapCompletePacket}
 */
proto.xudp2p.SwapCompletePacket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xudp2p.Header;
      reader.readMessage(value,proto.xudp2p.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRhash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xudp2p.SwapCompletePacket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xudp2p.SwapCompletePacket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xudp2p.SwapCompletePacket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xudp2p.SwapCompletePacket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.xudp2p.Header.serializeBinaryToWriter
    );
  }
  f = message.getRhash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional Header header = 1;
 * @return {?proto.xudp2p.Header}
 */
proto.xudp2p.SwapCompletePacket.prototype.getHeader = function() {
  return /** @type{?proto.xudp2p.Header} */ (
    jspb.Message.getWrapperField(this, proto.xudp2p.Header, 1));
};


/** @param {?proto.xudp2p.Header|undefined} value */
proto.xudp2p.SwapCompletePacket.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.xudp2p.SwapCompletePacket.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xudp2p.SwapCompletePacket.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string rHash = 2;
 * @return {string}
 */
proto.xudp2p.SwapCompletePacket.prototype.getRhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xudp2p.SwapCompletePacket.prototype.setRhash = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xudp2p.SwapFailedPacket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xudp2p.SwapFailedPacket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xudp2p.SwapFailedPacket.displayName = 'proto.xudp2p.SwapFailedPacket';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xudp2p.SwapFailedPacket.prototype.toObject = function(opt_includeInstance) {
  return proto.xudp2p.SwapFailedPacket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xudp2p.SwapFailedPacket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xudp2p.SwapFailedPacket.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.xudp2p.Header.toObject(includeInstance, f),
    rhash: jspb.Message.getFieldWithDefault(msg, 2, ""),
    errormessage: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xudp2p.SwapFailedPacket}
 */
proto.xudp2p.SwapFailedPacket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xudp2p.SwapFailedPacket;
  return proto.xudp2p.SwapFailedPacket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xudp2p.SwapFailedPacket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xudp2p.SwapFailedPacket}
 */
proto.xudp2p.SwapFailedPacket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xudp2p.Header;
      reader.readMessage(value,proto.xudp2p.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRhash(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrormessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xudp2p.SwapFailedPacket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xudp2p.SwapFailedPacket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xudp2p.SwapFailedPacket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xudp2p.SwapFailedPacket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.xudp2p.Header.serializeBinaryToWriter
    );
  }
  f = message.getRhash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getErrormessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional Header header = 1;
 * @return {?proto.xudp2p.Header}
 */
proto.xudp2p.SwapFailedPacket.prototype.getHeader = function() {
  return /** @type{?proto.xudp2p.Header} */ (
    jspb.Message.getWrapperField(this, proto.xudp2p.Header, 1));
};


/** @param {?proto.xudp2p.Header|undefined} value */
proto.xudp2p.SwapFailedPacket.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.xudp2p.SwapFailedPacket.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xudp2p.SwapFailedPacket.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string rHash = 2;
 * @return {string}
 */
proto.xudp2p.SwapFailedPacket.prototype.getRhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xudp2p.SwapFailedPacket.prototype.setRhash = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string errorMessage = 3;
 * @return {string}
 */
proto.xudp2p.SwapFailedPacket.prototype.getErrormessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.xudp2p.SwapFailedPacket.prototype.setErrormessage = function(value) {
  jspb.Message.setField(this, 3, value);
};


goog.object.extend(exports, proto.xudp2p);
