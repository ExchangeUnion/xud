/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var annotations_pb = require('./annotations_pb.js');
var lndrpc_pb = require('./lndrpc_pb.js');
goog.exportSymbol('proto.xudrpc.ConnectRequest', null, global);
goog.exportSymbol('proto.xudrpc.ConnectResponse', null, global);
goog.exportSymbol('proto.xudrpc.GetInfoRequest', null, global);
goog.exportSymbol('proto.xudrpc.GetInfoResponse', null, global);
goog.exportSymbol('proto.xudrpc.GetOrdersRequest', null, global);
goog.exportSymbol('proto.xudrpc.GetOrdersResponse', null, global);
goog.exportSymbol('proto.xudrpc.GetPairsRequest', null, global);
goog.exportSymbol('proto.xudrpc.GetPairsResponse', null, global);
goog.exportSymbol('proto.xudrpc.Order', null, global);
goog.exportSymbol('proto.xudrpc.OrderMatch', null, global);
goog.exportSymbol('proto.xudrpc.Pair', null, global);
goog.exportSymbol('proto.xudrpc.PlaceOrderRequest', null, global);
goog.exportSymbol('proto.xudrpc.PlaceOrderResponse', null, global);
goog.exportSymbol('proto.xudrpc.ShutdownRequest', null, global);
goog.exportSymbol('proto.xudrpc.ShutdownResponse', null, global);
goog.exportSymbol('proto.xudrpc.StreamingExampleRequest', null, global);
goog.exportSymbol('proto.xudrpc.StreamingExampleResponse', null, global);
goog.exportSymbol('proto.xudrpc.SwapPayload', null, global);
goog.exportSymbol('proto.xudrpc.TokenSwapRequest', null, global);
goog.exportSymbol('proto.xudrpc.TokenSwapResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xudrpc.GetInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xudrpc.GetInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xudrpc.GetInfoRequest.displayName = 'proto.xudrpc.GetInfoRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xudrpc.GetInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xudrpc.GetInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xudrpc.GetInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xudrpc.GetInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xudrpc.GetInfoRequest}
 */
proto.xudrpc.GetInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xudrpc.GetInfoRequest;
  return proto.xudrpc.GetInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xudrpc.GetInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xudrpc.GetInfoRequest}
 */
proto.xudrpc.GetInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xudrpc.GetInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xudrpc.GetInfoRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xudrpc.GetInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xudrpc.GetInfoRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xudrpc.GetInfoRequest} The clone.
 */
proto.xudrpc.GetInfoRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.xudrpc.GetInfoRequest} */ (jspb.Message.cloneMessage(this));
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xudrpc.GetInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xudrpc.GetInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xudrpc.GetInfoResponse.displayName = 'proto.xudrpc.GetInfoResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xudrpc.GetInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xudrpc.GetInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xudrpc.GetInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xudrpc.GetInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    lnd: (f = msg.getLnd()) && lndrpc_pb.GetInfoResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xudrpc.GetInfoResponse}
 */
proto.xudrpc.GetInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xudrpc.GetInfoResponse;
  return proto.xudrpc.GetInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xudrpc.GetInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xudrpc.GetInfoResponse}
 */
proto.xudrpc.GetInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new lndrpc_pb.GetInfoResponse;
      reader.readMessage(value,lndrpc_pb.GetInfoResponse.deserializeBinaryFromReader);
      msg.setLnd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xudrpc.GetInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xudrpc.GetInfoResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xudrpc.GetInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xudrpc.GetInfoResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getLnd();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      lndrpc_pb.GetInfoResponse.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xudrpc.GetInfoResponse} The clone.
 */
proto.xudrpc.GetInfoResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.xudrpc.GetInfoResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional lnrpc.GetInfoResponse lnd = 1;
 * @return {proto.lnrpc.GetInfoResponse}
 */
proto.xudrpc.GetInfoResponse.prototype.getLnd = function() {
  return /** @type{proto.lnrpc.GetInfoResponse} */ (
    jspb.Message.getWrapperField(this, lndrpc_pb.GetInfoResponse, 1));
};


/** @param {proto.lnrpc.GetInfoResponse|undefined} value  */
proto.xudrpc.GetInfoResponse.prototype.setLnd = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.xudrpc.GetInfoResponse.prototype.clearLnd = function() {
  this.setLnd(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.xudrpc.GetInfoResponse.prototype.hasLnd = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xudrpc.Pair = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xudrpc.Pair, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xudrpc.Pair.displayName = 'proto.xudrpc.Pair';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xudrpc.Pair.prototype.toObject = function(opt_includeInstance) {
  return proto.xudrpc.Pair.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xudrpc.Pair} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xudrpc.Pair.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId(),
    baseCurrency: msg.getBaseCurrency(),
    quoteCurrency: msg.getQuoteCurrency(),
    swapProtocol: msg.getSwapProtocol()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xudrpc.Pair}
 */
proto.xudrpc.Pair.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xudrpc.Pair;
  return proto.xudrpc.Pair.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xudrpc.Pair} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xudrpc.Pair}
 */
proto.xudrpc.Pair.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBaseCurrency(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuoteCurrency(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSwapProtocol(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xudrpc.Pair} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xudrpc.Pair.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xudrpc.Pair.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xudrpc.Pair.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getBaseCurrency();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getQuoteCurrency();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getSwapProtocol();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xudrpc.Pair} The clone.
 */
proto.xudrpc.Pair.prototype.cloneMessage = function() {
  return /** @type {!proto.xudrpc.Pair} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.xudrpc.Pair.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.xudrpc.Pair.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string base_currency = 2;
 * @return {string}
 */
proto.xudrpc.Pair.prototype.getBaseCurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.xudrpc.Pair.prototype.setBaseCurrency = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string quote_currency = 3;
 * @return {string}
 */
proto.xudrpc.Pair.prototype.getQuoteCurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.xudrpc.Pair.prototype.setQuoteCurrency = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string swap_protocol = 4;
 * @return {string}
 */
proto.xudrpc.Pair.prototype.getSwapProtocol = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.xudrpc.Pair.prototype.setSwapProtocol = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xudrpc.GetPairsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xudrpc.GetPairsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xudrpc.GetPairsRequest.displayName = 'proto.xudrpc.GetPairsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xudrpc.GetPairsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xudrpc.GetPairsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xudrpc.GetPairsRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xudrpc.GetPairsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xudrpc.GetPairsRequest}
 */
proto.xudrpc.GetPairsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xudrpc.GetPairsRequest;
  return proto.xudrpc.GetPairsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xudrpc.GetPairsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xudrpc.GetPairsRequest}
 */
proto.xudrpc.GetPairsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xudrpc.GetPairsRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xudrpc.GetPairsRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xudrpc.GetPairsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xudrpc.GetPairsRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xudrpc.GetPairsRequest} The clone.
 */
proto.xudrpc.GetPairsRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.xudrpc.GetPairsRequest} */ (jspb.Message.cloneMessage(this));
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xudrpc.GetPairsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xudrpc.GetPairsResponse.repeatedFields_, null);
};
goog.inherits(proto.xudrpc.GetPairsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xudrpc.GetPairsResponse.displayName = 'proto.xudrpc.GetPairsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xudrpc.GetPairsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xudrpc.GetPairsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xudrpc.GetPairsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xudrpc.GetPairsResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xudrpc.GetPairsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    pairsList: jspb.Message.toObjectList(msg.getPairsList(),
    proto.xudrpc.Pair.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xudrpc.GetPairsResponse}
 */
proto.xudrpc.GetPairsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xudrpc.GetPairsResponse;
  return proto.xudrpc.GetPairsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xudrpc.GetPairsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xudrpc.GetPairsResponse}
 */
proto.xudrpc.GetPairsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xudrpc.Pair;
      reader.readMessage(value,proto.xudrpc.Pair.deserializeBinaryFromReader);
      msg.getPairsList().push(value);
      msg.setPairsList(msg.getPairsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xudrpc.GetPairsResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xudrpc.GetPairsResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xudrpc.GetPairsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xudrpc.GetPairsResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPairsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.xudrpc.Pair.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xudrpc.GetPairsResponse} The clone.
 */
proto.xudrpc.GetPairsResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.xudrpc.GetPairsResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated Pair pairs = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.xudrpc.Pair>}
 */
proto.xudrpc.GetPairsResponse.prototype.getPairsList = function() {
  return /** @type{!Array.<!proto.xudrpc.Pair>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xudrpc.Pair, 1));
};


/** @param {Array.<!proto.xudrpc.Pair>} value  */
proto.xudrpc.GetPairsResponse.prototype.setPairsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.xudrpc.GetPairsResponse.prototype.clearPairsList = function() {
  this.setPairsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xudrpc.SwapPayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xudrpc.SwapPayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xudrpc.SwapPayload.displayName = 'proto.xudrpc.SwapPayload';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xudrpc.SwapPayload.prototype.toObject = function(opt_includeInstance) {
  return proto.xudrpc.SwapPayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xudrpc.SwapPayload} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xudrpc.SwapPayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    role: msg.getRole(),
    sendingAmount: msg.getSendingAmount(),
    sendingToken: msg.getSendingToken(),
    receivingAmount: msg.getReceivingAmount(),
    receivingToken: msg.getReceivingToken()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xudrpc.SwapPayload}
 */
proto.xudrpc.SwapPayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xudrpc.SwapPayload;
  return proto.xudrpc.SwapPayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xudrpc.SwapPayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xudrpc.SwapPayload}
 */
proto.xudrpc.SwapPayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRole(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSendingAmount(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSendingToken(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setReceivingAmount(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceivingToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xudrpc.SwapPayload} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xudrpc.SwapPayload.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xudrpc.SwapPayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xudrpc.SwapPayload.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRole();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getSendingAmount();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = this.getSendingToken();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getReceivingAmount();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = this.getReceivingToken();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xudrpc.SwapPayload} The clone.
 */
proto.xudrpc.SwapPayload.prototype.cloneMessage = function() {
  return /** @type {!proto.xudrpc.SwapPayload} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string role = 1;
 * @return {string}
 */
proto.xudrpc.SwapPayload.prototype.getRole = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.xudrpc.SwapPayload.prototype.setRole = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint64 sending_amount = 2;
 * @return {number}
 */
proto.xudrpc.SwapPayload.prototype.getSendingAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.xudrpc.SwapPayload.prototype.setSendingAmount = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string sending_token = 3;
 * @return {string}
 */
proto.xudrpc.SwapPayload.prototype.getSendingToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.xudrpc.SwapPayload.prototype.setSendingToken = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint64 receiving_amount = 4;
 * @return {number}
 */
proto.xudrpc.SwapPayload.prototype.getReceivingAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.xudrpc.SwapPayload.prototype.setReceivingAmount = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string receiving_token = 5;
 * @return {string}
 */
proto.xudrpc.SwapPayload.prototype.getReceivingToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.xudrpc.SwapPayload.prototype.setReceivingToken = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xudrpc.TokenSwapRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xudrpc.TokenSwapRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xudrpc.TokenSwapRequest.displayName = 'proto.xudrpc.TokenSwapRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xudrpc.TokenSwapRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xudrpc.TokenSwapRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xudrpc.TokenSwapRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xudrpc.TokenSwapRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    targetAddress: msg.getTargetAddress(),
    identifier: msg.getIdentifier(),
    payload: (f = msg.getPayload()) && proto.xudrpc.SwapPayload.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xudrpc.TokenSwapRequest}
 */
proto.xudrpc.TokenSwapRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xudrpc.TokenSwapRequest;
  return proto.xudrpc.TokenSwapRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xudrpc.TokenSwapRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xudrpc.TokenSwapRequest}
 */
proto.xudrpc.TokenSwapRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentifier(value);
      break;
    case 3:
      var value = new proto.xudrpc.SwapPayload;
      reader.readMessage(value,proto.xudrpc.SwapPayload.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xudrpc.TokenSwapRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xudrpc.TokenSwapRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xudrpc.TokenSwapRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xudrpc.TokenSwapRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTargetAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getIdentifier();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getPayload();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.xudrpc.SwapPayload.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xudrpc.TokenSwapRequest} The clone.
 */
proto.xudrpc.TokenSwapRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.xudrpc.TokenSwapRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string target_address = 1;
 * @return {string}
 */
proto.xudrpc.TokenSwapRequest.prototype.getTargetAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.xudrpc.TokenSwapRequest.prototype.setTargetAddress = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string identifier = 2;
 * @return {string}
 */
proto.xudrpc.TokenSwapRequest.prototype.getIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.xudrpc.TokenSwapRequest.prototype.setIdentifier = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional SwapPayload payload = 3;
 * @return {proto.xudrpc.SwapPayload}
 */
proto.xudrpc.TokenSwapRequest.prototype.getPayload = function() {
  return /** @type{proto.xudrpc.SwapPayload} */ (
    jspb.Message.getWrapperField(this, proto.xudrpc.SwapPayload, 3));
};


/** @param {proto.xudrpc.SwapPayload|undefined} value  */
proto.xudrpc.TokenSwapRequest.prototype.setPayload = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.xudrpc.TokenSwapRequest.prototype.clearPayload = function() {
  this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.xudrpc.TokenSwapRequest.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xudrpc.TokenSwapResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xudrpc.TokenSwapResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xudrpc.TokenSwapResponse.displayName = 'proto.xudrpc.TokenSwapResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xudrpc.TokenSwapResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xudrpc.TokenSwapResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xudrpc.TokenSwapResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xudrpc.TokenSwapResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: msg.getResult()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xudrpc.TokenSwapResponse}
 */
proto.xudrpc.TokenSwapResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xudrpc.TokenSwapResponse;
  return proto.xudrpc.TokenSwapResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xudrpc.TokenSwapResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xudrpc.TokenSwapResponse}
 */
proto.xudrpc.TokenSwapResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xudrpc.TokenSwapResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xudrpc.TokenSwapResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xudrpc.TokenSwapResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xudrpc.TokenSwapResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getResult();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xudrpc.TokenSwapResponse} The clone.
 */
proto.xudrpc.TokenSwapResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.xudrpc.TokenSwapResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string result = 1;
 * @return {string}
 */
proto.xudrpc.TokenSwapResponse.prototype.getResult = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.xudrpc.TokenSwapResponse.prototype.setResult = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xudrpc.ConnectRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xudrpc.ConnectRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xudrpc.ConnectRequest.displayName = 'proto.xudrpc.ConnectRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xudrpc.ConnectRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xudrpc.ConnectRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xudrpc.ConnectRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xudrpc.ConnectRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    host: msg.getHost(),
    port: msg.getPort()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xudrpc.ConnectRequest}
 */
proto.xudrpc.ConnectRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xudrpc.ConnectRequest;
  return proto.xudrpc.ConnectRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xudrpc.ConnectRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xudrpc.ConnectRequest}
 */
proto.xudrpc.ConnectRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHost(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xudrpc.ConnectRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xudrpc.ConnectRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xudrpc.ConnectRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xudrpc.ConnectRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getHost();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getPort();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xudrpc.ConnectRequest} The clone.
 */
proto.xudrpc.ConnectRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.xudrpc.ConnectRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string host = 1;
 * @return {string}
 */
proto.xudrpc.ConnectRequest.prototype.getHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.xudrpc.ConnectRequest.prototype.setHost = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 port = 2;
 * @return {number}
 */
proto.xudrpc.ConnectRequest.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.xudrpc.ConnectRequest.prototype.setPort = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xudrpc.ConnectResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xudrpc.ConnectResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xudrpc.ConnectResponse.displayName = 'proto.xudrpc.ConnectResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xudrpc.ConnectResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xudrpc.ConnectResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xudrpc.ConnectResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xudrpc.ConnectResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: msg.getResult()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xudrpc.ConnectResponse}
 */
proto.xudrpc.ConnectResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xudrpc.ConnectResponse;
  return proto.xudrpc.ConnectResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xudrpc.ConnectResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xudrpc.ConnectResponse}
 */
proto.xudrpc.ConnectResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xudrpc.ConnectResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xudrpc.ConnectResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xudrpc.ConnectResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xudrpc.ConnectResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getResult();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xudrpc.ConnectResponse} The clone.
 */
proto.xudrpc.ConnectResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.xudrpc.ConnectResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string result = 1;
 * @return {string}
 */
proto.xudrpc.ConnectResponse.prototype.getResult = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.xudrpc.ConnectResponse.prototype.setResult = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xudrpc.Order = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xudrpc.Order, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xudrpc.Order.displayName = 'proto.xudrpc.Order';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xudrpc.Order.prototype.toObject = function(opt_includeInstance) {
  return proto.xudrpc.Order.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xudrpc.Order} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xudrpc.Order.toObject = function(includeInstance, msg) {
  var f, obj = {
    price: msg.getPrice(),
    quantity: msg.getQuantity(),
    pairId: msg.getPairId(),
    peerId: msg.getPeerId(),
    id: msg.getId(),
    createdAt: msg.getCreatedAt()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xudrpc.Order}
 */
proto.xudrpc.Order.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xudrpc.Order;
  return proto.xudrpc.Order.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xudrpc.Order} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xudrpc.Order}
 */
proto.xudrpc.Order.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrice(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setQuantity(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPairId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPeerId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xudrpc.Order} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xudrpc.Order.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xudrpc.Order.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xudrpc.Order.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = this.getQuantity();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = this.getPairId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getPeerId();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getCreatedAt();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xudrpc.Order} The clone.
 */
proto.xudrpc.Order.prototype.cloneMessage = function() {
  return /** @type {!proto.xudrpc.Order} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional double price = 1;
 * @return {number}
 */
proto.xudrpc.Order.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.xudrpc.Order.prototype.setPrice = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional double quantity = 2;
 * @return {number}
 */
proto.xudrpc.Order.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.xudrpc.Order.prototype.setQuantity = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string pair_id = 3;
 * @return {string}
 */
proto.xudrpc.Order.prototype.getPairId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.xudrpc.Order.prototype.setPairId = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 peer_id = 4;
 * @return {number}
 */
proto.xudrpc.Order.prototype.getPeerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.xudrpc.Order.prototype.setPeerId = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string id = 5;
 * @return {string}
 */
proto.xudrpc.Order.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.xudrpc.Order.prototype.setId = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int64 created_at = 6;
 * @return {number}
 */
proto.xudrpc.Order.prototype.getCreatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 6, 0));
};


/** @param {number} value  */
proto.xudrpc.Order.prototype.setCreatedAt = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xudrpc.OrderMatch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xudrpc.OrderMatch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xudrpc.OrderMatch.displayName = 'proto.xudrpc.OrderMatch';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xudrpc.OrderMatch.prototype.toObject = function(opt_includeInstance) {
  return proto.xudrpc.OrderMatch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xudrpc.OrderMatch} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xudrpc.OrderMatch.toObject = function(includeInstance, msg) {
  var f, obj = {
    maker: (f = msg.getMaker()) && proto.xudrpc.Order.toObject(includeInstance, f),
    taker: (f = msg.getTaker()) && proto.xudrpc.Order.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xudrpc.OrderMatch}
 */
proto.xudrpc.OrderMatch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xudrpc.OrderMatch;
  return proto.xudrpc.OrderMatch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xudrpc.OrderMatch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xudrpc.OrderMatch}
 */
proto.xudrpc.OrderMatch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xudrpc.Order;
      reader.readMessage(value,proto.xudrpc.Order.deserializeBinaryFromReader);
      msg.setMaker(value);
      break;
    case 2:
      var value = new proto.xudrpc.Order;
      reader.readMessage(value,proto.xudrpc.Order.deserializeBinaryFromReader);
      msg.setTaker(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xudrpc.OrderMatch} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xudrpc.OrderMatch.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xudrpc.OrderMatch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xudrpc.OrderMatch.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMaker();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.xudrpc.Order.serializeBinaryToWriter
    );
  }
  f = this.getTaker();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.xudrpc.Order.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xudrpc.OrderMatch} The clone.
 */
proto.xudrpc.OrderMatch.prototype.cloneMessage = function() {
  return /** @type {!proto.xudrpc.OrderMatch} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Order maker = 1;
 * @return {proto.xudrpc.Order}
 */
proto.xudrpc.OrderMatch.prototype.getMaker = function() {
  return /** @type{proto.xudrpc.Order} */ (
    jspb.Message.getWrapperField(this, proto.xudrpc.Order, 1));
};


/** @param {proto.xudrpc.Order|undefined} value  */
proto.xudrpc.OrderMatch.prototype.setMaker = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.xudrpc.OrderMatch.prototype.clearMaker = function() {
  this.setMaker(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.xudrpc.OrderMatch.prototype.hasMaker = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Order taker = 2;
 * @return {proto.xudrpc.Order}
 */
proto.xudrpc.OrderMatch.prototype.getTaker = function() {
  return /** @type{proto.xudrpc.Order} */ (
    jspb.Message.getWrapperField(this, proto.xudrpc.Order, 2));
};


/** @param {proto.xudrpc.Order|undefined} value  */
proto.xudrpc.OrderMatch.prototype.setTaker = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.xudrpc.OrderMatch.prototype.clearTaker = function() {
  this.setTaker(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.xudrpc.OrderMatch.prototype.hasTaker = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xudrpc.PlaceOrderRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xudrpc.PlaceOrderRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xudrpc.PlaceOrderRequest.displayName = 'proto.xudrpc.PlaceOrderRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xudrpc.PlaceOrderRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xudrpc.PlaceOrderRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xudrpc.PlaceOrderRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xudrpc.PlaceOrderRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    order: (f = msg.getOrder()) && proto.xudrpc.Order.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xudrpc.PlaceOrderRequest}
 */
proto.xudrpc.PlaceOrderRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xudrpc.PlaceOrderRequest;
  return proto.xudrpc.PlaceOrderRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xudrpc.PlaceOrderRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xudrpc.PlaceOrderRequest}
 */
proto.xudrpc.PlaceOrderRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xudrpc.Order;
      reader.readMessage(value,proto.xudrpc.Order.deserializeBinaryFromReader);
      msg.setOrder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xudrpc.PlaceOrderRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xudrpc.PlaceOrderRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xudrpc.PlaceOrderRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xudrpc.PlaceOrderRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOrder();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.xudrpc.Order.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xudrpc.PlaceOrderRequest} The clone.
 */
proto.xudrpc.PlaceOrderRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.xudrpc.PlaceOrderRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Order order = 1;
 * @return {proto.xudrpc.Order}
 */
proto.xudrpc.PlaceOrderRequest.prototype.getOrder = function() {
  return /** @type{proto.xudrpc.Order} */ (
    jspb.Message.getWrapperField(this, proto.xudrpc.Order, 1));
};


/** @param {proto.xudrpc.Order|undefined} value  */
proto.xudrpc.PlaceOrderRequest.prototype.setOrder = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.xudrpc.PlaceOrderRequest.prototype.clearOrder = function() {
  this.setOrder(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.xudrpc.PlaceOrderRequest.prototype.hasOrder = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xudrpc.PlaceOrderResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xudrpc.PlaceOrderResponse.repeatedFields_, null);
};
goog.inherits(proto.xudrpc.PlaceOrderResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xudrpc.PlaceOrderResponse.displayName = 'proto.xudrpc.PlaceOrderResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xudrpc.PlaceOrderResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xudrpc.PlaceOrderResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xudrpc.PlaceOrderResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xudrpc.PlaceOrderResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xudrpc.PlaceOrderResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    matchesList: jspb.Message.toObjectList(msg.getMatchesList(),
    proto.xudrpc.OrderMatch.toObject, includeInstance),
    remainingOrder: (f = msg.getRemainingOrder()) && proto.xudrpc.Order.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xudrpc.PlaceOrderResponse}
 */
proto.xudrpc.PlaceOrderResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xudrpc.PlaceOrderResponse;
  return proto.xudrpc.PlaceOrderResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xudrpc.PlaceOrderResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xudrpc.PlaceOrderResponse}
 */
proto.xudrpc.PlaceOrderResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xudrpc.OrderMatch;
      reader.readMessage(value,proto.xudrpc.OrderMatch.deserializeBinaryFromReader);
      msg.getMatchesList().push(value);
      msg.setMatchesList(msg.getMatchesList());
      break;
    case 2:
      var value = new proto.xudrpc.Order;
      reader.readMessage(value,proto.xudrpc.Order.deserializeBinaryFromReader);
      msg.setRemainingOrder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xudrpc.PlaceOrderResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xudrpc.PlaceOrderResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xudrpc.PlaceOrderResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xudrpc.PlaceOrderResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMatchesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.xudrpc.OrderMatch.serializeBinaryToWriter
    );
  }
  f = this.getRemainingOrder();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.xudrpc.Order.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xudrpc.PlaceOrderResponse} The clone.
 */
proto.xudrpc.PlaceOrderResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.xudrpc.PlaceOrderResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated OrderMatch matches = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.xudrpc.OrderMatch>}
 */
proto.xudrpc.PlaceOrderResponse.prototype.getMatchesList = function() {
  return /** @type{!Array.<!proto.xudrpc.OrderMatch>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xudrpc.OrderMatch, 1));
};


/** @param {Array.<!proto.xudrpc.OrderMatch>} value  */
proto.xudrpc.PlaceOrderResponse.prototype.setMatchesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.xudrpc.PlaceOrderResponse.prototype.clearMatchesList = function() {
  this.setMatchesList([]);
};


/**
 * optional Order remaining_order = 2;
 * @return {proto.xudrpc.Order}
 */
proto.xudrpc.PlaceOrderResponse.prototype.getRemainingOrder = function() {
  return /** @type{proto.xudrpc.Order} */ (
    jspb.Message.getWrapperField(this, proto.xudrpc.Order, 2));
};


/** @param {proto.xudrpc.Order|undefined} value  */
proto.xudrpc.PlaceOrderResponse.prototype.setRemainingOrder = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.xudrpc.PlaceOrderResponse.prototype.clearRemainingOrder = function() {
  this.setRemainingOrder(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.xudrpc.PlaceOrderResponse.prototype.hasRemainingOrder = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xudrpc.GetOrdersRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xudrpc.GetOrdersRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xudrpc.GetOrdersRequest.displayName = 'proto.xudrpc.GetOrdersRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xudrpc.GetOrdersRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xudrpc.GetOrdersRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xudrpc.GetOrdersRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xudrpc.GetOrdersRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    pairId: msg.getPairId(),
    maxResults: msg.getMaxResults()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xudrpc.GetOrdersRequest}
 */
proto.xudrpc.GetOrdersRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xudrpc.GetOrdersRequest;
  return proto.xudrpc.GetOrdersRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xudrpc.GetOrdersRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xudrpc.GetOrdersRequest}
 */
proto.xudrpc.GetOrdersRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPairId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxResults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xudrpc.GetOrdersRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xudrpc.GetOrdersRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xudrpc.GetOrdersRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xudrpc.GetOrdersRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPairId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getMaxResults();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xudrpc.GetOrdersRequest} The clone.
 */
proto.xudrpc.GetOrdersRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.xudrpc.GetOrdersRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string pair_id = 1;
 * @return {string}
 */
proto.xudrpc.GetOrdersRequest.prototype.getPairId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.xudrpc.GetOrdersRequest.prototype.setPairId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 max_results = 2;
 * @return {number}
 */
proto.xudrpc.GetOrdersRequest.prototype.getMaxResults = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.xudrpc.GetOrdersRequest.prototype.setMaxResults = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xudrpc.GetOrdersResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xudrpc.GetOrdersResponse.repeatedFields_, null);
};
goog.inherits(proto.xudrpc.GetOrdersResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xudrpc.GetOrdersResponse.displayName = 'proto.xudrpc.GetOrdersResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xudrpc.GetOrdersResponse.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xudrpc.GetOrdersResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xudrpc.GetOrdersResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xudrpc.GetOrdersResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xudrpc.GetOrdersResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    buyOrdersList: jspb.Message.toObjectList(msg.getBuyOrdersList(),
    proto.xudrpc.Order.toObject, includeInstance),
    sellOrdersList: jspb.Message.toObjectList(msg.getSellOrdersList(),
    proto.xudrpc.Order.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xudrpc.GetOrdersResponse}
 */
proto.xudrpc.GetOrdersResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xudrpc.GetOrdersResponse;
  return proto.xudrpc.GetOrdersResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xudrpc.GetOrdersResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xudrpc.GetOrdersResponse}
 */
proto.xudrpc.GetOrdersResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xudrpc.Order;
      reader.readMessage(value,proto.xudrpc.Order.deserializeBinaryFromReader);
      msg.getBuyOrdersList().push(value);
      msg.setBuyOrdersList(msg.getBuyOrdersList());
      break;
    case 2:
      var value = new proto.xudrpc.Order;
      reader.readMessage(value,proto.xudrpc.Order.deserializeBinaryFromReader);
      msg.getSellOrdersList().push(value);
      msg.setSellOrdersList(msg.getSellOrdersList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xudrpc.GetOrdersResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xudrpc.GetOrdersResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xudrpc.GetOrdersResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xudrpc.GetOrdersResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getBuyOrdersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.xudrpc.Order.serializeBinaryToWriter
    );
  }
  f = this.getSellOrdersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.xudrpc.Order.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xudrpc.GetOrdersResponse} The clone.
 */
proto.xudrpc.GetOrdersResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.xudrpc.GetOrdersResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated Order buy_orders = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.xudrpc.Order>}
 */
proto.xudrpc.GetOrdersResponse.prototype.getBuyOrdersList = function() {
  return /** @type{!Array.<!proto.xudrpc.Order>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xudrpc.Order, 1));
};


/** @param {Array.<!proto.xudrpc.Order>} value  */
proto.xudrpc.GetOrdersResponse.prototype.setBuyOrdersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.xudrpc.GetOrdersResponse.prototype.clearBuyOrdersList = function() {
  this.setBuyOrdersList([]);
};


/**
 * repeated Order sell_orders = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.xudrpc.Order>}
 */
proto.xudrpc.GetOrdersResponse.prototype.getSellOrdersList = function() {
  return /** @type{!Array.<!proto.xudrpc.Order>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xudrpc.Order, 2));
};


/** @param {Array.<!proto.xudrpc.Order>} value  */
proto.xudrpc.GetOrdersResponse.prototype.setSellOrdersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


proto.xudrpc.GetOrdersResponse.prototype.clearSellOrdersList = function() {
  this.setSellOrdersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xudrpc.StreamingExampleRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xudrpc.StreamingExampleRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xudrpc.StreamingExampleRequest.displayName = 'proto.xudrpc.StreamingExampleRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xudrpc.StreamingExampleRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xudrpc.StreamingExampleRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xudrpc.StreamingExampleRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xudrpc.StreamingExampleRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xudrpc.StreamingExampleRequest}
 */
proto.xudrpc.StreamingExampleRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xudrpc.StreamingExampleRequest;
  return proto.xudrpc.StreamingExampleRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xudrpc.StreamingExampleRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xudrpc.StreamingExampleRequest}
 */
proto.xudrpc.StreamingExampleRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xudrpc.StreamingExampleRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xudrpc.StreamingExampleRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xudrpc.StreamingExampleRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xudrpc.StreamingExampleRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xudrpc.StreamingExampleRequest} The clone.
 */
proto.xudrpc.StreamingExampleRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.xudrpc.StreamingExampleRequest} */ (jspb.Message.cloneMessage(this));
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xudrpc.StreamingExampleResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xudrpc.StreamingExampleResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xudrpc.StreamingExampleResponse.displayName = 'proto.xudrpc.StreamingExampleResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xudrpc.StreamingExampleResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xudrpc.StreamingExampleResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xudrpc.StreamingExampleResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xudrpc.StreamingExampleResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    date: msg.getDate()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xudrpc.StreamingExampleResponse}
 */
proto.xudrpc.StreamingExampleResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xudrpc.StreamingExampleResponse;
  return proto.xudrpc.StreamingExampleResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xudrpc.StreamingExampleResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xudrpc.StreamingExampleResponse}
 */
proto.xudrpc.StreamingExampleResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xudrpc.StreamingExampleResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xudrpc.StreamingExampleResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xudrpc.StreamingExampleResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xudrpc.StreamingExampleResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getDate();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xudrpc.StreamingExampleResponse} The clone.
 */
proto.xudrpc.StreamingExampleResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.xudrpc.StreamingExampleResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 date = 1;
 * @return {number}
 */
proto.xudrpc.StreamingExampleResponse.prototype.getDate = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.xudrpc.StreamingExampleResponse.prototype.setDate = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xudrpc.ShutdownRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xudrpc.ShutdownRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xudrpc.ShutdownRequest.displayName = 'proto.xudrpc.ShutdownRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xudrpc.ShutdownRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xudrpc.ShutdownRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xudrpc.ShutdownRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xudrpc.ShutdownRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xudrpc.ShutdownRequest}
 */
proto.xudrpc.ShutdownRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xudrpc.ShutdownRequest;
  return proto.xudrpc.ShutdownRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xudrpc.ShutdownRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xudrpc.ShutdownRequest}
 */
proto.xudrpc.ShutdownRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xudrpc.ShutdownRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xudrpc.ShutdownRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xudrpc.ShutdownRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xudrpc.ShutdownRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xudrpc.ShutdownRequest} The clone.
 */
proto.xudrpc.ShutdownRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.xudrpc.ShutdownRequest} */ (jspb.Message.cloneMessage(this));
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xudrpc.ShutdownResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xudrpc.ShutdownResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xudrpc.ShutdownResponse.displayName = 'proto.xudrpc.ShutdownResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xudrpc.ShutdownResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xudrpc.ShutdownResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xudrpc.ShutdownResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.xudrpc.ShutdownResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: msg.getResult()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xudrpc.ShutdownResponse}
 */
proto.xudrpc.ShutdownResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xudrpc.ShutdownResponse;
  return proto.xudrpc.ShutdownResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xudrpc.ShutdownResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xudrpc.ShutdownResponse}
 */
proto.xudrpc.ShutdownResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.xudrpc.ShutdownResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.xudrpc.ShutdownResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xudrpc.ShutdownResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.xudrpc.ShutdownResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getResult();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.xudrpc.ShutdownResponse} The clone.
 */
proto.xudrpc.ShutdownResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.xudrpc.ShutdownResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string result = 1;
 * @return {string}
 */
proto.xudrpc.ShutdownResponse.prototype.getResult = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.xudrpc.ShutdownResponse.prototype.setResult = function(value) {
  jspb.Message.setField(this, 1, value);
};


goog.object.extend(exports, proto.xudrpc);
