#!/usr/bin/env node

const Xud = require('../dist/Xud').default;

const { argv } = require('yargs')
  .options({
    dbpath: {
      describe: 'The file path for the database',
      type: 'string',
      alias: 'd',
    },
    initdb: {
      describe: 'Whether to initialize the db with data',
      type: 'boolean',
      default: undefined,
    },
    loglevel: {
      describe: 'Verbosity of the logger',
      type: 'string',
      alias: 'l',
    },
    logpath: {
      describe: 'Path to the log file',
      type: 'string',
    },
    network: {
      describe: 'The network the lnd clients are using',
      type: 'string',
      choices: ['mainnet', 'testnet', 'simnet', 'regtest'],
      alias: 'n',
    },
    xudir: {
      describe: 'Data directory for xud',
      type: 'string',
      alias: 'x',
    },
    'lndbtc.certpath': {
      describe: 'Path to the SSL certificate for lndBtc',
      type: 'string',
    },
    'lndbtc.disable': {
      describe: 'Disable lndBtc integration',
      type: 'boolean',
      default: undefined,
    },
    'lndbtc.host': {
      describe: 'Host of the lndBtc gRPC interface',
      type: 'string',
    },
    'lndbtc.macaroonpath': {
      describe: 'Path of the admin macaroon for lndBtc',
      type: 'string',
    },
    'lndbtc.nomacaroons': {
      describe: 'Whether to disable macaroons for lndBtc',
      type: 'boolean',
      default: undefined,
    },
    'lndbtc.port': {
      describe: 'Port of the lndBtc gRPC interface',
      type: 'number',
    },
    'lndbtc.cltvdelta': {
      describe: 'CLTV delta for the timelock of the final hop',
      type: 'number',
    },
    'lndltc.certpath': {
      describe: 'Path to the SSL certificate for lndLtc',
      type: 'string',
    },
    'lndltc.disable': {
      describe: 'Disable lndLtc integration',
      type: 'boolean',
      default: undefined,
    },
    'lndltc.host': {
      describe: 'Host of the lndLtc gRPC interface',
      type: 'string',
    },
    'lndltc.macaroonpath': {
      describe: 'Path of the admin macaroon for lndLtc',
      type: 'string',
    },
    'lndltc.nomacaroons': {
      describe: 'Whether to disable macaroons for lndLtc',
      type: 'boolean',
      default: undefined,
    },
    'lndltc.port': {
      describe: 'Port of the lndLtc gRPC interface',
      type: 'number',
    },
    'lndltc.cltvdelta': {
      describe: 'CLTV delta for the timelock of the final hop',
      type: 'number',
    },
    'p2p.addresses': {
      describe: 'String array of reachable addresses',
      type: 'array',
    },
    'p2p.listen': {
      describe: 'Listen for incoming peers',
      type: 'boolean',
      default: undefined,
    },
    'p2p.discover': {
      describe: 'Automatically discover and connect to new nodes',
      type: 'boolean',
      default: undefined,
    },
    'p2p.detectexternalip': {
      describe: 'Detect and advertise external ip address to peers',
      type: 'boolean',
      default: undefined,
    },
    'p2p.port': {
      describe: 'Port to listen for incoming peers',
      type: 'number',
      alias: 'p',
    },
    'raiden.disable': {
      describe: 'Disable raiden integration',
      type: 'boolean',
      default: undefined,
    },
    'raiden.port': {
      describe: 'Port for raiden REST service',
      type: 'number',
    },
    'rpc.host': {
      describe: 'gRPC service host',
      type: 'string',
    },
    'rpc.port': {
      describe: 'gRPC service port',
      type: 'number',
      alias: 'r',
    },
    'rpc.usetls': {
      describe: 'Whether to use TLS for gRPC calls',
      type: 'boolean',
      default: undefined,
    },
    'webproxy.disable': {
      describe: 'Disable web proxy server',
      type: 'boolean',
      default: undefined,
    },
    'webproxy.port': {
      describe: 'Port for web proxy server',
      type: 'number',
      alias: 'w',
    },
  });

// delete non-config keys from argv
delete argv._;
delete argv.version;
delete argv.help;
delete argv.$0;

const xud = new Xud();

xud.start(argv);
